{
  "module": "InputPhoneModule",
  "selector": "bb-input-phone-ui",
  "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-phone--docs",
  "inputs": {
    "ariaLabel": {
      "type": "string",
      "description": "ariaLabel is discernible text for phone input.",
      "default": "'Phone Input'"
    },
    "autocomplete": {
      "type": "",
      "description": "The autocomplete value of the enclosed input control. Defaults to 'tel' This attribute can be overwritten via the global configuration token"
    },
    "clearable": {
      "type": "boolean",
      "description": "Allow to clear selected value.",
      "default": "false"
    },
    "countryList": {
      "type": "",
      "description": "List of countries to display in dropdown. This attribute can be overwritten via the global configuration token"
    },
    "defaultCountryIsoCode": {
      "type": "",
      "description": "Default country selected for country dropdown. This attribute can be overwritten via the global configuration token"
    },
    "dropdownPosition": {
      "type": "\"bottom\" | \"top\" | \"auto\" | undefined",
      "description": "Dropdown Position (bottom | top | auto)"
    },
    "enableCountryCode": {
      "type": "",
      "description": "Enable/Disable Country code dropdown This attribute can be overwritten via the global configuration token"
    },
    "hideSelectedCountryFlag": {
      "type": "",
      "description": "Whether to hide the flag of the selected country. Defaults to false This attribute can be overwritten via the global configuration token"
    },
    "mask": {
      "type": "",
      "description": "The mask of the phone input. Defaults to null This attribute can be overwritten via the global configuration token"
    },
    "maxLength": {
      "type": "",
      "description": "The max size of the phone input. This attribute can be overwritten via the global configuration token."
    },
    "minLength": {
      "type": "",
      "description": "The size of the phone input. This attribute can be overwritten via the global configuration token"
    },
    "placeholder": {
      "type": "string",
      "description": "The placeholder for the phone input. Defaults to an empty string;",
      "default": "''"
    },
    "readonly": {
      "type": "boolean",
      "description": "Whether the phone input is readonly.",
      "default": "false"
    },
    "searchable": {
      "type": "boolean",
      "description": "Allow to search for value.",
      "default": "false"
    },
    "validationPattern": {
      "type": "",
      "description": "The validation pattern of the phone input. This attribute can be overwritten via the global configuration token."
    },
    "aria-activedescendant": {
      "type": "string",
      "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
    },
    "aria-autocomplete": {
      "type": "string",
      "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
    },
    "aria-controls": {
      "type": "string",
      "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
    },
    "aria-describedby": {
      "type": "string",
      "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
    },
    "aria-expanded": {
      "type": "string",
      "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
    },
    "aria-invalid": {
      "type": "string",
      "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
    },
    "aria-label": {
      "type": "string",
      "description": "Accessible label when control does not need to render label tag."
    },
    "aria-labelledby": {
      "type": "string",
      "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
    },
    "aria-owns": {
      "type": "string",
      "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
    },
    "autofocus": {
      "type": "boolean",
      "description": "Whether the text input should be auto-focused when shown.",
      "default": "false"
    },
    "disabled": {
      "type": "boolean",
      "description": "Whether the component is mutable or clickable. Defaults to false.",
      "default": "false"
    },
    "id": {
      "type": "string",
      "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
    },
    "inputClassName": {
      "type": "string",
      "description": "Class names that must be included on the &lt;input&gt; form control"
    },
    "label": {
      "type": "string",
      "description": "The label for the input. Defaults to an empty string.",
      "default": "''"
    },
    "required": {
      "type": "boolean",
      "description": "Whether the input is required. Defaults to false.",
      "default": "false"
    },
    "role": {
      "type": "string | undefined",
      "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
    },
    "size": {
      "type": "number | string",
      "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
    }
  },
  "outputs": {
    "valueChange": {
      "type": "EventEmitter",
      "description": "The event emitter called when the one of the inputs change."
    },
    "blur": {
      "type": "EventEmitter",
      "description": "An event emitter for on blur actions."
    },
    "focus": {
      "type": "EventEmitter",
      "description": "An event emitter for on focus actions."
    }
  },
  "methods": {
    "onChanges": {
      "params": [
        {
          "name": "event",
          "type": "CountryData"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onClear": {
      "returns": {
        "type": "void"
      }
    },
    "onClose": {
      "returns": {
        "type": "void"
      }
    },
    "onFilterChange": {
      "params": [
        {
          "name": "query",
          "type": "string | undefined"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onInputValueChange": {
      "params": [
        {
          "name": "newValue",
          "type": "string"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onOpen": {
      "returns": {
        "type": "void"
      }
    },
    "onTextChange": {
      "returns": {
        "type": "void"
      }
    },
    "searchFunc": {
      "params": [
        {
          "name": "term",
          "type": "string"
        },
        {
          "name": "item",
          "type": "CountryData"
        }
      ],
      "returns": {
        "type": "boolean"
      }
    },
    "updateValues": {
      "params": [
        {
          "name": "preventEmit",
          "type": ""
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "validate": {
      "params": [
        {
          "name": "control",
          "type": "AbstractControl"
        }
      ],
      "returns": {
        "type": "ValidationErrors | null"
      }
    },
    "writeValue": {
      "params": [
        {
          "name": "value",
          "type": "any"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "getSizeByKeyword": {
      "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
      "params": [
        {
          "name": "arg",
          "type": "any"
        }
      ],
      "returns": {
        "type": "number | undefined"
      }
    },
    "onBlur": {
      "params": [
        {
          "name": "$event",
          "type": "FocusEvent"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onFocus": {
      "params": [
        {
          "name": "$event",
          "type": "FocusEvent"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onValueChange": {
      "params": [
        {
          "name": "newValue",
          "type": "Object | string"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "registerOnChange": {
      "params": [
        {
          "name": "fn",
          "type": "function"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "registerOnTouched": {
      "params": [
        {
          "name": "fn",
          "type": "function"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "setDisabledState": {
      "params": [
        {
          "name": "isDisabled",
          "type": "boolean"
        }
      ],
      "returns": {
        "type": "void"
      }
    }
  }
}