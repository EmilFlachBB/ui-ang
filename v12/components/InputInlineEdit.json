{
  "module": "InputInlineEditModule",
  "selector": "bb-input-inline-edit-ui",
  "description": "### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-label  - aria-labelledby  - aria-owns Component that enables inline input editing.",
  "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-inline-edit--docs",
  "inputs": {
    "ariaLabelAccept": {
      "type": "any",
      "description": "string for aria label on Accept button",
      "default": "defaultAriaLabels.accept"
    },
    "ariaLabelCancel": {
      "type": "any",
      "description": "string for aria label on Cancel button",
      "default": "defaultAriaLabels.cancel"
    },
    "ariaLabelEdit": {
      "type": "any",
      "description": "string for aria label on Edit button",
      "default": "defaultAriaLabels.edit"
    },
    "ariaLabelInput": {
      "type": "any",
      "description": "string for aria label on edit input",
      "default": "defaultAriaLabels.input"
    },
    "autocomplete": {
      "type": "string",
      "description": "The autocomplete value of the enclosed input control.",
      "default": "'off'"
    },
    "autofocus": {
      "type": "boolean",
      "description": "Whether the text input should be auto-focused when shown.",
      "default": "false"
    },
    "canEdit": {
      "type": "boolean",
      "description": "Flag represents visibility of edit button",
      "default": "true"
    },
    "currency": {
      "type": "string",
      "description": "Whether to consider the input value as a currency"
    },
    "hasLoadingState": {
      "type": "boolean",
      "description": "Applies additional loading state for edit flow",
      "default": "false"
    },
    "hint": {
      "type": "string",
      "description": "Hint to be displayed in edit mode"
    },
    "inputInlineTemplate": {
      "type": "TemplateRef<InputInlineEditComponent> | undefined",
      "description": "Template for custom and styling text"
    },
    "inputText": {
      "type": "string | undefined",
      "description": "string for editing"
    },
    "maxLength": {
      "type": "any",
      "description": "The maxLength for the text input.",
      "default": "Infinity"
    },
    "maxValue": {
      "type": "number",
      "description": "The max number value of the text input"
    },
    "minLength": {
      "type": "number",
      "description": "The minLength for the text input.",
      "default": "0"
    },
    "minValue": {
      "type": "number",
      "description": "The min number value of the text input"
    },
    "pattern": {
      "type": "RegExp | string",
      "description": "Whether the text input should follow a pattern."
    },
    "patternErrorMessage": {
      "type": "string",
      "description": "Displays custom error message for pattern validation failure.",
      "default": "'Input value provided is invalid'"
    },
    "showCharCounter": {
      "type": "boolean",
      "description": "Shows character counter based on maxLength",
      "default": "false"
    },
    "state": {
      "type": "InputInlineEditState",
      "description": "State for inline edit"
    },
    "tooltipAccept": {
      "type": "any",
      "description": "string for tooltip on Accept button",
      "default": "defaultTooltips.accept"
    },
    "tooltipCancel": {
      "type": "any",
      "description": "string for tooltip on Cancel button",
      "default": "defaultTooltips.cancel"
    },
    "tooltipEdit": {
      "type": "any",
      "description": "string for tooltip on Edit button",
      "default": "defaultTooltips.edit"
    },
    "aria-activedescendant": {
      "type": "string",
      "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
    },
    "aria-autocomplete": {
      "type": "string",
      "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
    },
    "aria-controls": {
      "type": "string",
      "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
    },
    "aria-describedby": {
      "type": "string",
      "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
    },
    "aria-expanded": {
      "type": "string",
      "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
    },
    "aria-invalid": {
      "type": "string",
      "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
    },
    "aria-label": {
      "type": "string",
      "description": "Accessible label when control does not need to render label tag."
    },
    "aria-labelledby": {
      "type": "string",
      "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
    },
    "aria-owns": {
      "type": "string",
      "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
    },
    "disabled": {
      "type": "boolean",
      "description": "Whether the component is mutable or clickable. Defaults to false.",
      "default": "false"
    },
    "id": {
      "type": "string",
      "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
    },
    "inputClassName": {
      "type": "string",
      "description": "Class names that must be included on the &lt;input&gt; form control"
    },
    "label": {
      "type": "string",
      "description": "The label for the input. Defaults to an empty string.",
      "default": "''"
    },
    "readonly": {
      "type": "boolean",
      "description": "Whether the input is read only. Defaults to false.",
      "default": "false"
    },
    "required": {
      "type": "boolean",
      "description": "Whether the input is required. Defaults to false.",
      "default": "false"
    },
    "role": {
      "type": "string | undefined",
      "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
    },
    "size": {
      "type": "number | string",
      "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
    }
  },
  "outputs": {
    "accept": {
      "type": "EventEmitter",
      "description": "The event that's fired after on Accept."
    },
    "cancel": {
      "type": "EventEmitter",
      "description": "The event that's fired after on Cancel."
    },
    "stateChange": {
      "type": "EventEmitter",
      "description": "Emit on edit state changes"
    },
    "blur": {
      "type": "EventEmitter",
      "description": "An event emitter for on blur actions."
    },
    "focus": {
      "type": "EventEmitter",
      "description": "An event emitter for on focus actions."
    }
  },
  "methods": {
    "hasError": {
      "params": [
        {
          "name": "type",
          "type": "string"
        }
      ],
      "returns": {
        "type": "boolean | undefined"
      }
    },
    "onAccept": {
      "description": "Emits the updated value from input If the {@link InputInlineEditComponent.hasLoadingState } set to true -> the state is not changed, as component state should be updated from outside, otherwise the value will be updated with the new one and state will be switched to `IDLE`",
      "returns": {
        "type": "void"
      }
    },
    "onCancel": {
      "params": [
        {
          "name": "event",
          "type": "MouseEvent"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onEdit": {
      "params": [
        {
          "name": "event",
          "type": "MouseEvent"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onKeydownHandler": {
      "description": "Cancels the edit mode when the escape key is pressed.",
      "params": [
        {
          "name": "evt",
          "type": "KeyboardEvent"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "writeValue": {
      "params": [
        {
          "name": "inputValue",
          "type": "Object | string | null"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "getSizeByKeyword": {
      "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
      "params": [
        {
          "name": "arg",
          "type": "any"
        }
      ],
      "returns": {
        "type": "number | undefined"
      }
    },
    "onBlur": {
      "params": [
        {
          "name": "$event",
          "type": "FocusEvent"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onFocus": {
      "params": [
        {
          "name": "$event",
          "type": "FocusEvent"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onValueChange": {
      "params": [
        {
          "name": "newValue",
          "type": "Object | string"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "registerOnChange": {
      "params": [
        {
          "name": "fn",
          "type": "function"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "registerOnTouched": {
      "params": [
        {
          "name": "fn",
          "type": "function"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "setDisabledState": {
      "params": [
        {
          "name": "isDisabled",
          "type": "boolean"
        }
      ],
      "returns": {
        "type": "void"
      }
    }
  }
}