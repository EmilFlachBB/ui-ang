{
  "version": "12",
  "components": {
    "AccountNumber": {
      "module": "AccountNumberModule",
      "selector": "bb-account-number, bb-account-number-ui",
      "description": "Component that displays account number according to the IBAN, BBAN, cardNumber and number. ### Usage By default, The masking and unmasking of the account number is not implemented and requires custom implementation. In order to have a fully working component with masking capabilities, map the `mask` and `unmask` outputs to functions such that it toggles between the masked and unmasked number. ```typescript @Component({   selector: 'bb-account-number-ui-showcase',   template: `             `, }) export class AccountNumberShowcaseComponent {   number = '1234';   masked = false;   onMask() {     this.number = '**34';     this.masked = true;   }   onUnmask() {     this.number = '1234';     this.masked = false;   }   constructor() {} } ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-account-number--docs",
      "inputs": {
        "account": {
          "type": "ArrangementItem",
          "description": "Account that contains account number, a format will be picked automatically Used when number unset",
          "default": "{}"
        },
        "masked": {
          "type": "boolean",
          "description": "Defines whether the attribute is masked",
          "default": "false"
        },
        "number": {
          "type": "string | number | undefined",
          "description": "Account number, Use with type to specify which format to use"
        },
        "tooltipTrigger": {
          "type": "string",
          "description": "/** Defines toolitp trigger behavior for masking/unmasking buttons",
          "default": "'hover focus'"
        },
        "type": {
          "type": "AccountNumberType | undefined",
          "options": "'cardNumber' | 'iban' | 'bban'",
          "description": "Account number type ('bban', 'iban' or 'cardNumber')"
        },
        "unmaskable": {
          "type": "boolean",
          "description": "Defines whether the attribute is unmaskable",
          "default": "false"
        }
      },
      "outputs": {
        "mask": {
          "type": "EventEmitter<AccountNumberType>",
          "description": "Emits a AccountNumberType to be masked"
        },
        "unmask": {
          "type": "EventEmitter<AccountNumberType>",
          "description": "Emits a AccountNumberType to be unmasked"
        }
      },
      "methods": {
        "getAccountNumber": {
          "description": "Gives either number if provided. Otherwise, try to get from account.",
          "returns": {
            "type": "string | number",
            "description": "Either account number or iban or bban"
          }
        },
        "getAccountNumberType": {
          "description": "Gives either type if provided. Otherwise, try to get from account.",
          "returns": {
            "type": "AccountNumberType",
            "options": "'cardNumber' | 'iban' | 'bban'",
            "description": "'cardNumber' | 'iban' | 'bban'"
          }
        },
        "onMask": {
          "description": "Event handler for the `mask` button Emits the `masked` output with a `MaskedAttribute`",
          "returns": {
            "type": "void"
          }
        },
        "onUnmask": {
          "description": "Event handler for the `unmask` button Emits the `unmasked` output with a `MaskedAttribute`",
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "AccountSelector": {
      "module": "AccountSelectorModule",
      "selector": "bb-account-selector-ui",
      "description": "Component that provides a select, multiselect and auto complete feature. ### Custom templates AccountSelectorComponent allows providing optional custom templates for the different parts of its view. Below is an example of what a component with all custom templates migh look like: ```typescript                         ``` By default `items` input property has the type `any` to allow any types of items when providing custom item template. If a custom template for items is not provided then `items` internally matches the type `AccountSelectorDefaultItem[]`, which could be imported from `@backbase/ui-ang/account-selector` ### Money Protection `moneyProtectionStatus` and `moneyProtectionStatusClasses` Input are used for setting the Status for `bb-product-item-basic-account-ui` component via `items` input property.  ```typescript items: [{       id: '1',       name: 'Mrs J. Smith',       availableBalance: 5234.7,       balance: 102.1,       number: 'GB29NWBK60161331926819',       currency: 'EUR',       favorite: true,       status: 'inactive',       bankBranchCode: '01788902',       moneyProtectionStatus: MoneyProtectionStatusEnum.Yes,       moneyProtectionStatusClasses: 'bg-danger-subtle',   }] ``` ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - aria-describedby will be linked to the account selector component, dropdown list and search box  - aria-invalid will be linked to the search box",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-account-selector--docs",
      "inputs": {
        "accountSelectorInstructions": {
          "type": "string",
          "description": "Instructions for the account selector component. Use this to provide guidance on how to select multiple accounts from a dropdown list. To select or deselect all items use the left and right arrow keys.",
          "default": "`\n  Account selector component.\n  It allows to select multiple accounts by selecting from a dropdown list.\n  To select or deselect all items use left and right buttons.`"
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "clearable": {
          "type": "boolean",
          "description": "Allow to clear selected value.",
          "default": "false"
        },
        "closeOnSelect": {
          "type": "boolean",
          "description": "Whether to close the menu when a value is selected",
          "default": "true"
        },
        "compareItemsWith": {
          "type": "function",
          "description": "Compare the option values with the selected values. The first argument is a value from an option. The second is a value from the selection(model). A boolean should be returned.",
          "default": "(a, b) => a === b"
        },
        "disabled": {
          "type": "boolean",
          "description": "Disabled attr for ng-select"
        },
        "disableScrollEnd": {
          "type": "boolean",
          "description": "If true then scrollEnd event should NOT be emitted",
          "default": "false"
        },
        "dropdownPosition": {
          "type": "string",
          "description": "Dropdown Position (bottom | top | auto)",
          "default": "'bottom'"
        },
        "filterItems": {
          "type": "boolean",
          "description": "Filter items.",
          "default": "false"
        },
        "forceError": {
          "type": "boolean",
          "description": "Always show an error border around account selector when enabled. This allows programmatic toggling of the error state. It returns a { forcedError: true } validation which can be used to assign to an error message of your choosing. Do not use it together with showError. Defaults to false."
        },
        "groupByFn": {
          "type": "GroupByFunction",
          "options": "function",
          "description": "Allow to group items by key or function expression"
        },
        "groupValueFn": {
          "type": "(_: string, children: {}) => { name: string; total: any; }",
          "description": "Function expression to provide group value",
          "default": "(_: string, children: any[]) => ({\n    name: _,\n    total: children.length,\n  })"
        },
        "highlight": {
          "type": "boolean",
          "description": "Turn on or turn off bbHighlight directive in child product items",
          "default": "true"
        },
        "internalFiltering": {
          "type": "boolean",
          "description": "Enables NgSelect internal filtering functionality",
          "default": "true"
        },
        "isOpen": {
          "type": "any",
          "description": "Allows manual control of dropdown opening and closing. true - won't close. false - won't open. Defaults to undefined."
        },
        "items": {
          "type": "AccountSelectorItem | AccountSelectorItem[]",
          "description": "AccountSelectorItems array"
        },
        "loading": {
          "type": "boolean",
          "description": "Loading state from the outside (async items loading)",
          "default": "false"
        },
        "markFirst": {
          "type": "boolean",
          "description": "Marks first item as focused when opening/filtering.",
          "default": "false"
        },
        "minTermLength": {
          "type": "number",
          "description": "Minimum term length to start a search. Should be used with typeahead"
        },
        "moneyProtectionDisclaimerClasses": {
          "type": "string",
          "description": "Allows to add classes to disclamier of money protection"
        },
        "multiple": {
          "type": "boolean",
          "description": "Allows to select multiple items",
          "default": "false"
        },
        "notFoundText": {
          "type": "string",
          "description": "Not found text for ng-select"
        },
        "placeholder": {
          "type": "string",
          "description": "Placeholder text",
          "default": "''"
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted (you can hide or show specific numbers).",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "required": {
          "type": "boolean",
          "description": "Enable required validation for ng-select",
          "default": "false"
        },
        "searchable": {
          "type": "boolean",
          "description": "Allow to search for value. Default from ng-select is true.",
          "default": "true"
        },
        "searchFunc": {
          "type": "Function",
          "description": "Allow to apply custom search function"
        },
        "selectedItems": {
          "type": "AccountSelectorItem | AccountSelectorItem[]",
          "description": "Selected items",
          "default": "[]"
        },
        "showAvailableBalance": {
          "type": "BalanceDetailsView",
          "description": "Property, that determines how balance details should be rendered. Options for this property is described by BalanceDetailsView model: BalanceDetailsView.Booked - only booked balance data is rendered, OOTB behavior; BalanceDetailsView.Available - only available balance data is rendered; BalanceDetailsView.Ordinary - available balance data is rendered as primary with label Available, booked balance as secondary with label Balance; BalanceDetailsView.Reverse  - booked balance data is rendered as primary with label Balance, available balance as secondary with label Available. Default value undefined is the same behavior as BalanceDetailsView.Booked",
          "default": "undefined"
        },
        "showBankBranchCode": {
          "type": "boolean",
          "description": "Will show the bank branch code. Defaults to false",
          "default": "false"
        },
        "showCurrencySymbol": {
          "type": "boolean",
          "description": "Will show currency Symbol in amount. Default value true",
          "default": "true"
        },
        "showError": {
          "type": "boolean",
          "deprecated": true,
          "deprecationMessage": "Deprecated in ui-ang@12. To be removed in ui-ang@14. Replace with `forceError`.\n\nShow the error border around account selector when enabled and certain conditions are fulfilled.\nUsed when error needs to be shown on submit or when it requires a programmatic trigger.\nDoes not trigger if set to true on initial render.\n\nRequires condition that\n- `required` is set to `true`\n- the model is invalid when given `[selectedItems]=\"new UntypedFormControl(undefined, Validator)\"\n\nDo not use it together with `forceError`."
        },
        "showMoneyProtectionDisclaimer": {
          "type": "boolean",
          "description": "The flag to show money protection disclaimer. In order to see disclaimer you will need to configure BB_MONEY_PROTECTION_STATUS_CONFIG_TOKEN to provide component to render in disclaimer.",
          "default": "false"
        },
        "size": {
          "type": "AccountSelectorSize",
          "options": "'sm' | 'md'",
          "description": "Set account selector view size"
        },
        "typeahead": {
          "type": "Subject<string>",
          "description": "Custom autocomplete or advanced filter."
        },
        "typeToSearchText": {
          "type": "string",
          "description": "Set custom text when using Typeahead"
        },
        "virtualScroll": {
          "type": "boolean",
          "description": "Enables virtual scrolling mechanism",
          "default": "false"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter<void>",
          "description": "Emit event when account selector is blurred"
        },
        "change": {
          "type": "EventEmitter<object | []>",
          "description": "Emitter when item is added to selected items or removed from selected items. When Multiple is true: Output is Items[] When Multuple is false: Output is Item"
        },
        "clearSearch": {
          "type": "EventEmitter<void>",
          "description": "Emitter when clear search"
        },
        "filterChange": {
          "type": "EventEmitter<string>",
          "description": "Emitter when filter value is changed"
        },
        "focus": {
          "type": "EventEmitter<void>",
          "description": "Emit event when account selector is focused"
        },
        "remove": {
          "type": "EventEmitter<any>",
          "description": "Emitter when item is removed"
        },
        "scroll": {
          "type": "EventEmitter<literal type>",
          "description": "Emitter when scroll is triggered (will emmit scroll events if virtualScroll is enabled)"
        },
        "scrollToEnd": {
          "type": "EventEmitter<void>",
          "description": "Emitter when scrollToEnd is triggered"
        },
        "search": {
          "type": "EventEmitter<string>",
          "description": "Emitter when search is performed. Outputs search term"
        }
      },
      "methods": {
        "focusEditableElement": {
          "returns": {
            "type": "void"
          }
        },
        "onArrowLeft": {
          "description": "Listens for the 'keydown.arrowLeft' event and focuses on the selectAllButton if the ngSelect is open. This method is used to handle the left arrow key press event and focuses on the selectAllButton if the ngSelect dropdown is open.",
          "returns": {
            "type": "void"
          }
        },
        "onArrowRight": {
          "description": "Listens for the 'keydown.arrowRight' event and focuses on the unselectAllButton if the ngSelect is open. This method is used to handle the right arrow key press event and focuses on the unselectAllButton if the ngSelect dropdown is open.",
          "returns": {
            "type": "void"
          }
        },
        "onArrowUpOrDown": {
          "description": "Listens to keydown events for the arrowUp and arrowDown keys. Performs certain actions if either selectAllFocused or unselectAllFocused conditions are met. Blurs the corresponding buttons and focuses on various elements.",
          "returns": {
            "type": "void"
          }
        },
        "onBlur": {
          "returns": {
            "type": "void"
          }
        },
        "onChange": {
          "params": [
            {
              "name": "event",
              "type": "Event | any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onClear": {
          "returns": {
            "type": "void"
          }
        },
        "onClose": {
          "returns": {
            "type": "void"
          }
        },
        "onEnterKey": {
          "description": "Listens for the 'keydown.enter' event and performs actions based on the active element. This method is used to handle the enter key press event and performs actions based on the active element. If the active element is the selectAllButton, it calls the selectAll() method. If the active element is the unselectAllButton, it calls the unselectAll() method.",
          "returns": {
            "type": "void"
          }
        },
        "onFilterChange": {
          "params": [
            {
              "name": "query",
              "type": "string | undefined"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "returns": {
            "type": "void"
          }
        },
        "onOpen": {
          "deprecated": true,
          "deprecationMessage": "Deprecated in ui-ang@12. To be marked as protected in ui-ang@14. No replacements.",
          "returns": {
            "type": "void"
          }
        },
        "onRemove": {
          "params": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onScroll": {
          "params": [
            {
              "name": "position",
              "type": "literal type"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onScrollToEnd": {
          "returns": {
            "type": "void"
          }
        },
        "onSearch": {
          "params": [
            {
              "name": "event",
              "type": "string | SearchPayload"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "resetAccountSelectorModel": {
          "returns": {
            "type": "void"
          }
        },
        "selectAll": {
          "returns": {
            "type": "void"
          }
        },
        "unselectAll": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "ActionStatus": {
      "module": "ActionStatusModule",
      "selector": "bb-action-status-ui",
      "description": "Component that displays a loading indicator or icon to indicate an action response.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-action-status--docs",
      "inputs": {
        "state": {
          "type": "ActionState",
          "options": "'loading' | 'success' | 'info' | 'warning' | 'error' | 'message'",
          "description": "The current state of the action."
        }
      },
      "methods": {
        "getColor": {
          "returns": {
            "type": "string | undefined"
          }
        },
        "isLoading": {
          "returns": {
            "type": "boolean"
          }
        }
      }
    },
    "Alert": {
      "module": "AlertModule",
      "selector": "bb-alert-ui",
      "description": "Component that displays an alert. ### Accessibility For Alert component it's not required to pass any options for accessibility. It internally handles accessibility for title and message:  - title is linked with aria-labelledby.  - message is linked with aria-describedby.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-alert--docs",
      "inputs": {
        "autofocus": {
          "type": "boolean",
          "description": "Whether the button in the alert is focused on initial load. Defaults to false.",
          "default": "false"
        },
        "closeButtonAriaLabel": {
          "type": "string",
          "description": "Aria label for a &quot;close&quot; button",
          "default": "'Close alert'"
        },
        "dismissible": {
          "type": "boolean",
          "description": "Whether the alert can be dismissed. Defaults to false.",
          "default": "false"
        },
        "message": {
          "type": "string | undefined",
          "description": "The message of the alert. If nothing provided, wouldn't be displayed. It is internally linked with aria-describedby."
        },
        "modifier": {
          "type": "AlertType",
          "options": "'warning' | 'error' | 'success' | 'info'",
          "description": "The type modifier for the alert. Defaults to 'error'.",
          "default": "'error'"
        },
        "primaryActionButtonText": {
          "type": "string | undefined",
          "description": "The title of the primary action button."
        },
        "supportiveLinkText": {
          "type": "string | undefined",
          "description": "The title of the supportive link button."
        },
        "title": {
          "type": "string | undefined",
          "description": "The title of the alert. Will throw an error if unset. It is internaly linked with aria-labelledby."
        }
      },
      "outputs": {
        "close": {
          "type": "EventEmitter",
          "description": "The callback fired upon closing the alert."
        },
        "primaryActionButtonClick": {
          "type": "EventEmitter",
          "description": "The callback fired upon clicking primary action button."
        },
        "supportiveLinkClick": {
          "type": "EventEmitter",
          "description": "The callback fired upon clicking supportive link button."
        }
      },
      "methods": {
        "closeAlert": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Amount": {
      "module": "AmountModule",
      "selector": "bb-amount-ui",
      "description": "Component to enable the amount to be represented in the currency format. ### Locale token `LOCALE_ID` enables you to globally set the same locale for all instances of `AmountComponent` in your project. Refer to https://angular.io/api/core/LOCALE_ID for more information. ### Global configuration token `AMOUNT_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of `AmountComponent` in your project. *Note:* The token overwrites the default value only. If you have provided a value as a property on a specific component, the token is not be able to overwrite it. The following properties can be overwritten using the token:  - `abbreviate`  - `currency`  - `decimalPlaces`  - `mapCurrency`  - `trailingZeroes`  - `currencyFormat`  - `signPosition` The following is an example of how to use the token: ```typescript import { AMOUNT_CONFIG_TOKEN } from '@backbase/ui-ang/amount'; import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; import { AppModule } from './app/app.module'; const amountConfig = {   abbreviate: true } platformBrowserDynamic().bootstrapModule(AppModule, {   providers: [{ provide: AMOUNT_CONFIG_TOKEN, useValue: amountConfig }] }); ``` The amount component doesn't provide any specific properties for accessibility. But handles accessibility internally.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-amount--docs",
      "inputs": {
        "abbreviate": {
          "type": "boolean",
          "description": "Whether abbreviation should be applied. Default value false. This attribute can be overwritten via the global configuration token."
        },
        "amount": {
          "type": "string | number",
          "description": "Receive amount in number or string format and converts into a floating-point number. Does not support comma separated numbers unless used with DecimalPipe. Locale is infer from LOCALE_ID and does not support any locales that is different from the app's LOCALE_ID."
        },
        "currency": {
          "type": "string",
          "description": "Determines currency type. If nothing provided, wouldn't be displayed. This attribute can be overwritten via the global configuration token."
        },
        "currencyFormat": {
          "type": "CurrencyFormat",
          "options": "'wide' | 'narrow'",
          "description": "Whether to display wide or narrow currency format. Default value 'wide'."
        },
        "decimalPlaces": {
          "type": "number | undefined",
          "description": "Overrides amount of decimals places to display. Default value undefined, which will use currency default amount of decimals. This attribute can be overwritten via the global configuration token."
        },
        "hideCurrencySymbol": {
          "type": "boolean",
          "description": "If &quot;true&quot; currency will be hidden Can be used to display amounts without currency but still format them according to the currency (for example number of decimal points and groups symbol is based on a currency) Default value false.",
          "default": "false"
        },
        "mapCurrency": {
          "type": "boolean",
          "description": "Whether currency local should be transformed to symbol. Default value from injection token (if provided), else true. This attribute can be overwritten via the global configuration token."
        },
        "showPercent": {
          "type": "boolean",
          "description": "Whether percent symbol should be shown. Default value false.",
          "default": "false"
        },
        "showPlusSign": {
          "type": "boolean",
          "description": "If &quot;true&quot; and amount is positive adds plus sign at the beginning. Default value false.",
          "default": "false"
        },
        "signPosition": {
          "type": "Required<>",
          "description": "Position of the sign, whether it is before or after the currency symbol. Only applies to negative numbers. &quot;left&quot; renders the sign before the currency. &quot;right&quot; renders the sign after the currency. Default to &quot;left&quot;. Applied only for LTR locales. This attribute can be overwritten via the global configuration token."
        },
        "trailingZeroes": {
          "type": "boolean",
          "description": "Whether to display trailing zeroes. Default value true. This attribute can be overwritten via the global configuration token."
        }
      }
    },
    "AmountInput": {
      "module": "AmountInputModule",
      "selector": "bb-amount-input-ui",
      "description": "### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - set aria-describedby with ID of another element in the DOM with descriptive text about the amount input,    by default it is set to div defining the type of currency  - set aria-invalid with boolean value when the entered input value is not valid  - set aria-labelledby with ID of another element in the DOM as input's label Component that displays a text input.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-amount-input--docs",
      "inputs": {
        "autoDecimal": {
          "type": "boolean",
          "description": "Whether to automatically add decimal places to the input value. Defaults to false.",
          "default": "false"
        },
        "currency": {
          "type": "string | undefined",
          "description": "Displays currency either as currency symbol or value, if provided."
        },
        "isDotDecimalSeparator": {
          "type": "boolean",
          "description": "Flag to use dot(.) symbol as a decimal separator for the amount value provided to the component. Default value is false which means it expect a locale based decimal separator",
          "default": "false"
        },
        "mapCurrency": {
          "type": "boolean",
          "description": "Whether currency local should be transformed to symbol. Default value true.",
          "default": "true"
        },
        "maxLength": {
          "type": "number | undefined",
          "description": "The maxLength for the text input."
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder for the text input. Defaults to an empty string.",
          "default": "''"
        },
        "swapCurrencyAndValue": {
          "type": "boolean",
          "description": "Whether we swap places for the currency and value for the input field. The default value is false. If true, the currency will appear on the right and the value on the left of the input field.",
          "default": "false"
        },
        "textHint": {
          "type": "string",
          "description": "Provided to add a text hint for the input field.",
          "default": "''"
        },
        "wrapperClasses": {
          "type": "string",
          "description": "classnames for the wrapper div",
          "default": "''"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "correctInputValue": {
          "returns": {
            "type": "void"
          }
        },
        "onBackspace": {
          "description": "Event handler for backspace key press, and check if correct number is deleted",
          "params": [
            {
              "name": "el",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onInput": {
          "returns": {
            "type": "void"
          }
        },
        "onPress": {
          "params": [
            {
              "name": "$event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "model",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Avatar": {
      "module": "AvatarModule",
      "selector": "bb-avatar-ui",
      "description": "Component that displays an avatar. ### Global configuration token `AVATAR_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of `AvatarComponent` in your project. The following properties can be overwritten using the token: - `initialsFn` #### Usage notes The following is an example of how to use the token: ``` import { AVATAR_CONFIG_TOKEN } from '@backbase/ui-ang/avatar'; import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; import { AppModule } from './app/app.module'; const avatarConfig = { initialsFn: (text) => `${text[0]}${text[1]}` } platformBrowserDynamic().bootstrapModule(AppModule, { providers: [{ provide: AVATAR_CONFIG_TOKEN, useValue: avatarConfig }] }); ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-avatar--docs",
      "inputs": {
        "image": {
          "type": "string",
          "description": "The image  of the avatar. Defaults to empty string.",
          "default": "''"
        },
        "imgAlt": {
          "type": "string",
          "description": "The imgAlt for provide alt in img of the avatar. Defaults to empty string.",
          "default": "''"
        },
        "initials": {
          "type": "string",
          "description": "Initials to be displayed. If not provided, initials will be derived from the name input. Supports on up to two characters.",
          "default": "''"
        },
        "name": {
          "type": "string",
          "description": "The name  of the avatar. Defaults to empty string.",
          "default": "''"
        },
        "size": {
          "type": "string",
          "description": "Size of the avatar. Possible values sm | md | lg | xl. Defaults to empty string.",
          "default": "''"
        }
      }
    },
    "Badge": {
      "module": "BadgeModule",
      "selector": "bb-badge-ui",
      "description": "Component that displays a badge.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-badge--docs",
      "inputs": {
        "abbr": {
          "type": "string | boolean",
          "description": "The abbreviation to show when using circle styling.",
          "default": "false"
        },
        "ariaLabel": {
          "type": "string | undefined",
          "description": "Accessible label when control does not need to render label tag."
        },
        "breakWord": {
          "type": "boolean",
          "description": "Whether the text break class will be applied (adjusting to the parent box width)",
          "default": "false"
        },
        "circle": {
          "type": "boolean",
          "description": "Whether circle styling should be applied.",
          "default": "false"
        },
        "color": {
          "type": "BadgeColor | string",
          "options": "'primary' | 'info' | 'success' | 'warning' | 'danger' | 'secondary'",
          "description": "The (background) color of the badge.  Defaults to 'primary'.",
          "default": "'primary'"
        },
        "text": {
          "type": "string | undefined",
          "description": "The text to display in the badge."
        },
        "wrap": {
          "type": "boolean",
          "description": "Whether text wrap styling should be applied.",
          "default": "false"
        }
      }
    },
    "BadgeCounter": {
      "module": "BadgeCounterModule",
      "selector": "bb-badge-counter-ui",
      "description": "Component that displays a counter badge.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-badge-counter--docs",
      "inputs": {
        "color": {
          "type": "BadgeColor",
          "options": "'primary' | 'info' | 'success' | 'warning' | 'danger' | 'secondary'",
          "description": "The (background) color of the badge. Defaults to 'primary'.",
          "default": "'primary'"
        },
        "count": {
          "type": "number",
          "description": "The count to show in the badge. Defaults to 0 and badge will be hidden if count equals 0.",
          "default": "0"
        },
        "maxCount": {
          "type": "number",
          "description": "The max count value to limit text inside badge. Defaults to 999.",
          "default": "999"
        }
      }
    },
    "CardVendor": {
      "module": "CardVendorModule",
      "selector": "bb-card-vendor-ui",
      "description": "Component that displays the logo of a card vendor.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-card-vendor--docs",
      "inputs": {
        "vendor": {
          "type": "string | undefined",
          "description": "The vendor that this component displays the logo of.  Mandatory."
        }
      }
    },
    "CharCounter": {
      "module": "CharCounterModule",
      "selector": "bb-char-counter-ui",
      "description": "Component for counting characters typed inside a form element",
      "deprecated": true,
      "deprecationMessage": "Deprecated in ui-ang@11. To be made into a private component which is used in `bb-textarea-ui` and `bb-rich-text-editor-ui` in ui-ang@13.",
      "inputs": {
        "blockTyping": {
          "type": "boolean",
          "description": "Whether the element should be blocked when maximum character count is reached."
        },
        "element": {
          "type": "HTMLInputElement | HTMLTextAreaElement | undefined",
          "description": "The element reference which the characters are typed in."
        },
        "inputValue": {
          "type": "string | undefined",
          "description": "Passed value from parent input, it gives option to count char event if value was programmatically changed"
        },
        "limitExceededText": {
          "type": "string",
          "description": "Additional text to display when when maximum character count has been exceeded. Defaults to ''.",
          "default": "''"
        },
        "maxLength": {
          "type": "number",
          "description": "Indicator for maximum character count.",
          "default": "150"
        }
      },
      "methods": {
        "calculateElementValue": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "CheckboxGroup": {
      "module": "CheckboxGroupModule",
      "selector": "bb-checkbox-group-ui",
      "description": "Stores a state, determines it and displays a parent checkbox for a checkboxes group. Required module(s): FormsModule",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-checkbox-group--docs",
      "inputs": {
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "isDisabled": {
          "description": "Returns a boolean indicating whether the component is disabled.",
          "returns": {
            "type": "boolean",
            "description": "A boolean indicating whether the component is disabled."
          }
        },
        "onValueChange": {
          "description": "Called when the value of the component changes.  - Updates the value of the control and sets the skip$ behavior subject to avoid infinite loops.",
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Chip": {
      "module": "ChipModule",
      "selector": "bb-chip-ui",
      "description": "Component that displays a chip with optional action button",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-chip--docs",
      "inputs": {
        "dismissible": {
          "type": "boolean",
          "description": "Defines if a dismiss button is displayed on chip",
          "default": "false"
        },
        "label": {
          "type": "string",
          "description": "Chip label",
          "optional": false
        }
      },
      "outputs": {
        "close": {
          "type": "EventEmitter",
          "description": "Emits when the chip dismiss button is clicked"
        }
      }
    },
    "CollapsibleAccordion": {
      "module": "CollapsibleAccordionModule",
      "selector": "bb-collapsible-accordion-ui",
      "description": "Component that groups Collapsible components to show them in an accordion fashion. It can assure that only one Collapsible panel can be opened at a time.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-collapsible-accordion--docs",
      "inputs": {
        "closeOthers": {
          "type": "boolean",
          "description": "Assures that only one Collapsible panel can be opened at a time.",
          "default": "false"
        },
        "obeyParentAccordion": {
          "type": "boolean",
          "description": "When true the Accordion will inherit the parent Accordion behaviour."
        },
        "openFirst": {
          "type": "boolean",
          "description": "When true displays the first panel on load.",
          "default": "false"
        }
      },
      "methods": {
        "collapseAll": {
          "returns": {
            "type": "void"
          }
        },
        "expandAll": {
          "returns": {
            "type": "void"
          }
        },
        "registerNestedAccordion": {
          "params": [
            {
              "name": "childAccordion",
              "type": "CollapsibleAccordionComponent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerNestedPanel": {
          "params": [
            {
              "name": "panel",
              "type": "ICollapsible"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "unregisterNestedAccordion": {
          "params": [
            {
              "name": "childAccordion",
              "type": "CollapsibleAccordionComponent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "unregisterNestedPanel": {
          "params": [
            {
              "name": "panel",
              "type": "ICollapsible"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "CollapsibleCard": {
      "module": "CollapsibleCardModule",
      "selector": "bb-collapsible-card-ui",
      "description": "Provides an expandable details-summary/body-header view. Uses bb-collapsible-ui for a predefined template ### Accessibility ariaLabelForIcon is discernible text for chevron icon",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-collapsible-card--docs",
      "inputs": {
        "aria-label": {
          "type": "string | null",
          "description": "Accessible label for collapsible card",
          "default": "'toggle'"
        },
        "ariaLabelForIcon": {
          "type": "string",
          "description": "Accessible label for chevron icon.",
          "default": "'Chevron icon'"
        },
        "hasChevron": {
          "type": "boolean",
          "description": "Whether chevron should be displayed. Defaults to true.",
          "default": "true"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether card should be highlighted. Defaults to false.",
          "default": "false"
        },
        "isOpen": {
          "type": "boolean",
          "description": "Collapsible card open state",
          "default": "false"
        },
        "shadow": {
          "type": "boolean",
          "description": "Whether card should has shadow effect. Defaults to true.",
          "default": "true"
        },
        "size": {
          "type": "CollapsibleCardSize",
          "options": "'sm' | 'md' | 'lg'",
          "description": "Card size. Defaults to md.",
          "default": "'md'"
        }
      },
      "outputs": {
        "isOpenChange": {
          "type": "EventEmitter",
          "description": "Emits when the isOpen input is changed."
        }
      },
      "methods": {
        "toggle": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Collapsible": {
      "module": "CollapsibleModule",
      "selector": "bb-collapsible-ui",
      "description": "Provides an expandable details-summary/body-header view.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-collapsible--docs",
      "inputs": {
        "hasChevron": {
          "type": "boolean",
          "description": "Whether chevron should be displayed. Defaults to true.",
          "default": "true",
          "deprecated": true,
          "deprecationMessage": "Deprecated in ui-ang@11. To be removed in ui-ang@13."
        },
        "isOpen": {
          "type": "boolean",
          "description": "Toggles the content."
        },
        "recreateBodyContent": {
          "type": "boolean",
          "description": "If true, it will use the ngIf approach to create the content which is less performant but removes the extra div. In case of styling issues, set this to true.",
          "default": "false"
        }
      },
      "outputs": {
        "isOpenChange": {
          "type": "EventEmitter",
          "description": "Emits the toggle content event."
        }
      }
    },
    "CurrencyInput": {
      "module": "CurrencyInputModule",
      "selector": "bb-currency-input-ui",
      "description": "Component to display and manage the currency and the amount ### Global configuration token `CURRENCY_INPUT_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of the `CurrencyInputComponent` in your project. *Note:* The token overwrites the default value only. If you have provided a value as a property on a specific component, the token is not able to overwrite it. The following properties can be overwritten using the token:  - `allowNegativeValue`  - `currencies`  - `placeholder` #### Usage notes The following is an example of how to use the token: ```typescript import { CURRENCY_INPUT_CONFIG_TOKEN } from '@backbase/ui-ang/currency-input'; import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; import { AppModule } from './app/app.module'; const currencyInputConfig = {   allowNegativeValue: true } platformBrowserDynamic().bootstrapModule(AppModule, {   providers: [{ provide: CURRENCY_INPUT_CONFIG_TOKEN, useValue: currencyInputConfig }] }); ``` ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - aria-describedby  - aria-invalid  - aria-labelledby  - integerLabelSrOnly  - decimalLabelSrOnly",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-currency-input--docs",
      "inputs": {
        "allowNegativeValue": {
          "type": "",
          "description": "Flag is used to allow input negative value This attribute can be overwritten via the global configuration token"
        },
        "aria-describedby": {
          "type": "string"
        },
        "aria-invalid": {
          "type": "string"
        },
        "aria-labelledby": {
          "type": "string"
        },
        "currencies": {
          "type": "Array<string>",
          "description": "Currency list to be displayed in the dropdown. Note: Non-empty currency list is required for the currency symbol field to be shown. Otherwise, only the amount fields will be shown. Additionally, If only a single currency provided, the dropdown of the currency selection will be disabled and its value set to that single currency This attribute can be overwritten via the global configuration token"
        },
        "currencyInputId": {
          "type": "string",
          "description": "The id for the currency input. Defaults to unique string. Used to map the label to the input."
        },
        "currencyLabel": {
          "type": "string",
          "description": "The label for the currency input.",
          "default": "''"
        },
        "currencyListAriaLabel": {
          "type": "string",
          "description": "Aria label for the currency dropdown.",
          "default": "'Currency List Dropdown'"
        },
        "currencyListWithOnItemAriaLabel": {
          "type": "string",
          "description": "Aria label for the currency list with one item.",
          "default": "'Currency'"
        },
        "decimalId": {
          "type": "string",
          "description": "The id for the decimal input. Defaults to unique string. Used to map the label to the input."
        },
        "decimalInputId": {
          "type": "string",
          "description": "The id for the decimal input. Defaults to unique string. Used to map the label to the input."
        },
        "decimalLabel": {
          "type": "string",
          "description": "The label for the decimal input.",
          "default": "''"
        },
        "decimalLabelSrOnly": {
          "type": "boolean",
          "description": "By default is visible if it is needed to hide change this property to &quot;true&quot; and it will have class &quot;visually-hidden&quot; By default is hidden and accessible only for screen reader",
          "default": "false"
        },
        "decMaxLen": {
          "type": "number | undefined",
          "description": "Configure the maximum number of decimals. When greater than the default number of decimals for the specified currency, this value will take precedence. Configuring this value can affect the input placeholder."
        },
        "decMinLen": {
          "type": "number",
          "description": "Number of minimum currency precision. Defaults to 2.",
          "default": "defaultDecimalPrecision"
        },
        "disabled": {
          "type": "boolean | CurrencyFieldsState",
          "description": "Whether the input is disabled. Defaults to false."
        },
        "integer": {
          "type": "boolean",
          "description": "Whether there should be only the integer part. You have to keep in mind, that if you have decimal part, even &quot;.00&quot; you will not be able to remove it",
          "default": "false"
        },
        "integerId": {
          "type": "string",
          "description": "The id for the integer input. Defaults to unique string. Used to map the label to the input."
        },
        "integerInputId": {
          "type": "string",
          "description": "The id for the integer input. Defaults to unique string. Used to map the label to the input."
        },
        "integerLabel": {
          "type": "string",
          "description": "The label for the integer input.",
          "default": "''"
        },
        "integerLabelSrOnly": {
          "type": "boolean",
          "description": "Whether integer label is only visible for screen readers. By default is visible if it is needed to hide change this property to &quot;true&quot; and it will have class &quot;visually-hidden&quot;",
          "default": "false"
        },
        "isRightAligned": {
          "type": "boolean",
          "description": "Whether decimal text is aligned to the right. By default is false",
          "default": "false"
        },
        "placeholder": {
          "type": "",
          "description": "The placeholder for the input. Defaults to 0. This attribute can be overwritten via the global configuration token"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "resultType": {
          "type": "ResultType",
          "options": "'string' | 'number'",
          "description": "For set output type string/number, by default 'number', when  need work with long number ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'",
          "default": "'number'"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        }
      },
      "methods": {
        "checkNumeric": {
          "params": [
            {
              "name": "numeric",
              "type": "any"
            }
          ],
          "returns": {
            "type": "string"
          }
        },
        "checkValues": {
          "returns": {
            "type": "boolean"
          }
        },
        "correctInputValue": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "decOnBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "formatDecimal": {
          "params": [
            {
              "name": "decControl",
              "type": "UntypedFormControl"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "formatInteger": {
          "description": "Formats integer to user-friendly format.",
          "returns": {
            "type": "boolean",
            "description": "Returns true in case of successful formatting, otherwise - false."
          }
        },
        "markAsTouched": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onBackspace": {
          "description": "Event handler for backspace key press, and check if correct number is deleted.",
          "params": [
            {
              "name": "el",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onInput": {
          "returns": {
            "type": "void"
          }
        },
        "onPress": {
          "params": [
            {
              "name": "$event",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabled": {
          "params": [
            {
              "name": "disableState",
              "type": "CurrencyFieldsState"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "triggerChange": {
          "returns": {
            "type": "void"
          }
        },
        "updateCurrency": {
          "params": [
            {
              "name": "currency",
              "type": "string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "model",
              "type": "any | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "DropdownMenu": {
      "module": "DropdownMenuModule",
      "selector": "bb-dropdown-menu-ui",
      "description": "Component that displays a button with a dropdown - `dropDownButtonLabel` is discernible text for dropdown button which is used as the `aria-label`. - `aria-owns` handles contextual relationship between a parent and its child elements, in this case between dropdown menu and dropdown items, it's internally handled by the component with unique ids. - `aria-activedescendant` identifies currently active element of dropdown item. It's internally handled but when `bbDropdownMenuItem` directive and [role=menuitem] is used for listing dropdown elements then use [id]=\"option\". Example: ``` {{ option}} ``` ### Keyboard navigation guide This guide will help you understand the keyboard navigation on dropdown menu and its dropdown items. | Key | Function | |-----|----------| | Enter | **When the dropdown menu is open and an item within it is focused:**1. **Pressing Enter** selects the item, closes the dropdown, and refocuses on the dropdown button. | | ArrowDown | **When the dropdown menu is closed:**1. **Pressing ArrowDown** opens the dropdown menu and focuses on the first item. **When the dropdown menu is open and an item is focused:**1. **Pressing ArrowDown** moves the focus to the next item. | | ArrowUp | **When the dropdown menu is closed:**1. Pressing ArrowUp opens the dropdown menu and focuses on the first item. **When the dropdown menu is open and an item is focused:**1. **Pressing ArrowUp** moves the focus to the previous item. | | Tab | **When the dropdown menu is open:**1. If the focus is on the dropdown button, pressing Tab shifts the focus to the first item in the dropdown.2. If the focus is on the last item in the dropdown, **pressing Tab** toggles the focus back to the dropdown button and closes the dropdown.3. If the focus is on any item other than the last, **pressing Tab** shifts the focus to the next item in the dropdown. | | Tab + Shift | **When the dropdown menu is open:**1. If the focus is on the dropdown button, **pressing Tab + Shift** closes the dropdown menu.2. If the focus is on the first item in the dropdown, **pressing Tab + Shift** toggles the focus to the dropdown button.3. If the focus is on any item other than the first, **pressing Tab + Shift** shifts the focus to the previous item in the dropdown. |",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-dropdown-menu--docs",
      "inputs": {
        "autoClose": {
          "type": "boolean | \"inside\" | \"outside\"",
          "description": "Whether the dropdown should be closed when clicking one of dropdown items or pressing ESC. Defaults to true.",
          "default": "true"
        },
        "btnCircle": {
          "type": "boolean",
          "description": "The flag to indicate whether the dropdown button should be in a circular shape. Defaults to 'false'. This will only work when there's only an icon inside the button without a text.",
          "default": "false"
        },
        "btnColor": {
          "type": "string",
          "description": "Color of the button. Defaults to primary.",
          "default": "'primary'"
        },
        "buttonSize": {
          "type": "\"sm\" | \"md\"",
          "description": "Predefined button sizes",
          "default": "'md'"
        },
        "container": {
          "type": "string | \"body\"",
          "description": "Specifies which element the dropdown should be appended to.",
          "default": "''"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "dropDownButtonLabel": {
          "type": "any",
          "description": "Dropdown menu (toggle) button aria label. Defaults to &quot;Toggle dropdown&quot;.",
          "default": "$localize`:@@bb-dropdown-menu-ui.dropdown-button.aria-label:Toggle dropdown`"
        },
        "dropDownMenuId": {
          "type": "string",
          "description": "ID for the dropdown menu"
        },
        "dropDownMenuRole": {
          "type": "string",
          "description": "The role of the dropdown menu defaults to menu",
          "default": "'menu'"
        },
        "fullWidth": {
          "type": "boolean",
          "description": "If true it will stretch the button inside to 100% width.",
          "default": "false"
        },
        "icon": {
          "type": "string",
          "description": "Icon that is displayed in the button."
        },
        "iconColor": {
          "type": "string",
          "description": "The color of the icon to be displayed."
        },
        "iconSize": {
          "type": "string",
          "description": "The size of the icon to be displayed. Defaults to md.",
          "default": "'md'"
        },
        "isOpen": {
          "type": "boolean",
          "description": "Defines whether or not the dropdown menu is opened initially. Defaults to false.",
          "default": "false"
        },
        "label": {
          "type": "string",
          "description": "The label for the button dropdown. Defaults to an empty string.",
          "default": "''"
        },
        "leftIcon": {
          "type": "string"
        },
        "optionLabelKey": {
          "type": "string",
          "description": "Key that contains the label of the option object. Mandatory when the type of option is object"
        },
        "options": {
          "type": "Array<string | object>",
          "description": "If the value is an object, please provide a optionLabelKey.",
          "default": "[]"
        },
        "position": {
          "type": "Placement | PlacementArray",
          "description": "The position of the dropdown, position will be picked in order of feasibility.",
          "default": "['bottom-end', 'bottom-start', 'top-end', 'top-start']"
        },
        "role": {
          "type": "string",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed.",
          "default": "'group'"
        }
      },
      "outputs": {
        "select": {
          "type": "EventEmitter",
          "description": "Event (Output) that emits the value of selected dropdown item."
        }
      },
      "methods": {
        "closeDropdownAndReturnFocus": {
          "description": "Internal handler to close dropdown on keyboard clicks and return focus to the dropdown button",
          "returns": {
            "type": "void"
          }
        },
        "getOptionLabel": {
          "description": "Function that returns the label of the dropdown item",
          "params": [
            {
              "name": "option",
              "type": "any"
            }
          ],
          "returns": {
            "type": "string"
          }
        },
        "onClick": {
          "description": "Internal handler for clicks on dropdown items",
          "params": [
            {
              "name": "event",
              "type": "Event"
            },
            {
              "name": "item",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onKeyUp": {
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onOpenChange": {
          "description": "Drop down change state event handler",
          "params": [
            {
              "name": "isOpen",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "DropdownMultiSelect": {
      "module": "DropdownMultiSelectModule",
      "selector": "bb-dropdown-multi-select-ui",
      "description": "Component that use for DropDown Multi Select.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-dropdown-multi-select--docs",
      "inputs": {
        "container": {
          "type": "string | \"body\"",
          "description": "Specifies which element the dropdown should be appended to.",
          "default": "''"
        },
        "dropdownHeaderText": {
          "type": "string | undefined",
          "description": "The dropdown header text."
        },
        "dropdownPosition": {
          "type": "PlacementArray",
          "description": "The position of the dropdown",
          "default": "['bottom-end', 'bottom-start', 'top-end', 'top-start']"
        },
        "filtering": {
          "type": "boolean",
          "description": "Enable filtering; Defaults to false.",
          "default": "false"
        },
        "label": {
          "type": "string",
          "description": "The label for the Dropdown multi select. Defaults to an empty string.",
          "default": "''"
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder for the multi select.",
          "default": "'No items selected'"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the Dropdown multi select is read only. Defaults to false.",
          "default": "false"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "clearAll": {
          "description": "Unselect all selected options from the listbox",
          "params": [
            {
              "name": "$event",
              "type": "Event"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getLabel": {
          "description": "Updating labels while searching",
          "params": [
            {
              "name": "label",
              "type": "string"
            }
          ],
          "returns": {
            "type": "string"
          }
        },
        "getLabeledByIds": {
          "params": [
            {
              "name": "tokens",
              "type": "Array<string | undefined>"
            }
          ],
          "returns": {
            "type": "string | undefined"
          }
        },
        "onDropdownToggle": {
          "params": [
            {
              "name": "isOpen",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocusOut": {
          "params": [
            {
              "name": "event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onListboxBlur": {
          "returns": {
            "type": "void"
          }
        },
        "onListboxFocus": {
          "returns": {
            "type": "void"
          }
        },
        "onListboxKeyDown": {
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "trackByValueFn": {
          "params": [
            {
              "name": "_",
              "type": "number"
            },
            {
              "name": "item",
              "type": "DropdownMultiSelectOptionComponent"
            }
          ],
          "returns": {
            "type": "any"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "value",
              "type": "string[] | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "DropdownMultiSelectOption": {
      "module": "DropdownMultiSelectOptionModule",
      "selector": "bb-dropdown-multi-select-option-ui",
      "description": "Component that represents a single option that is part of the multi select component.",
      "inputs": {
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string."
        },
        "label": {
          "type": "string",
          "description": "The label of the option item",
          "default": "''"
        },
        "state": {
          "type": "boolean | undefined",
          "default": "false"
        },
        "value": {
          "type": "string",
          "description": "The value of the native option element",
          "default": "''"
        }
      }
    },
    "DropdownPanel": {
      "module": "DropdownPanelModule",
      "selector": "bb-dropdown-panel-ui",
      "description": "Component incapsulating logic for showing/hiding dropdown.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-dropdown-panel--docs",
      "inputs": {
        "buttonClass": {
          "type": "string",
          "description": "Class for the dropdown toggle",
          "default": "''"
        },
        "container": {
          "type": "string | \"body\"",
          "description": "Specifies which element the dropdown should be appended to.",
          "default": "''"
        },
        "isDropdownOpen": {
          "type": "boolean",
          "description": "Defines whether or not the dropdown menu is opened initially. Defaults to false."
        },
        "position": {
          "type": "PlacementArray",
          "description": "The position of the dropdown, position will be picked in order of feasibility.",
          "default": "['bottom-end', 'bottom-start', 'top-end', 'top-start']"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "focusout": {
          "type": "EventEmitter",
          "description": "Event emitted when the dropdown toggle loses focus"
        },
        "open": {
          "type": "Observable<boolean>",
          "description": "Event emitted when dropdown open/close."
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "changeState": {
          "params": [
            {
              "name": "state",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "closeMenu": {
          "returns": {
            "type": "void"
          }
        },
        "onFocusOut": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "DropdownSingleSelect": {
      "module": "DropdownSingleSelectModule",
      "selector": "bb-dropdown-single-select-ui",
      "description": "Component that displays a dropdown with a single select option. ### Accessibility Current component provides option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - aria-label will be linked to the single select dropdown with label  - set aria-labelledby with ID of another element in the DOM as dropdown's label.  - set aria-describedby with ID of another element in the DOM with descriptive text about the dropdown  - set aria-expanded with a boolean value based on the listbox display.  - set aria-invalid to true when a selected option is not valid ans vice versa  - aria-owns handles contextual relationship between a parent and its child elements,    in this case between dropdown menu and dropdown items, use the id from the input binding.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-dropdown-single-select--docs",
      "inputs": {
        "compareWithFn": {
          "type": "function",
          "description": "Allowing override the option comparison algorithm for tracking identities when checking for change",
          "default": "(a, b) => a === b"
        },
        "defaultOptionAsPlaceholder": {
          "type": "boolean",
          "description": "This Boolean attribute determine if default option as placeholder is displayed. Defaults to false.",
          "default": "false"
        },
        "displayAttributePath": {
          "type": "string",
          "description": "In case the list of options is a list of objects, this property will set the path to the object property which value will be used to display the option. Undefined will assume the options are strings. Child Nodes should be seperated by '.'"
        },
        "iconName": {
          "type": "string",
          "description": "Right corner icon name. Default name 'toggle-down'",
          "default": "'toggle-down'"
        },
        "options": {
          "type": "Array<Object | string>",
          "description": "The value for the input field. It can be a list of strings or list of objects. If the value is a list of objects, you have to provide the displayAttributePath property.",
          "default": "[]"
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder for the select. Defaults to an empty string;",
          "default": "''"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "getOptionDisplayText": {
          "params": [
            {
              "name": "option",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "any"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "DropdownSingleSelectOption": {
      "module": "DropdownSingleSelectOptionModule",
      "selector": "bb-dropdown-single-select-option-ui",
      "description": "Component that represents a single option that is part of the dropdown single select component.",
      "inputs": {
        "label": {
          "type": "string | undefined",
          "description": "The label of the option item"
        },
        "value": {
          "type": "string | undefined",
          "description": "The value of the native option element"
        }
      }
    },
    "Ellipsis": {
      "module": "EllipsisModule",
      "selector": "bb-ellipsis-ui",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-ellipsis--docs",
      "inputs": {
        "lineClamp": {
          "type": "number",
          "description": "Specifies after what text line apply truncating"
        },
        "text": {
          "type": "string | undefined",
          "description": "The text which should be truncated."
        },
        "tooltipTriggers": {
          "type": "string",
          "description": "Specifies the events that should trigger the tooltip (space separated strings). Defaults to 'click'.",
          "default": "'click'"
        }
      },
      "methods": {
        "onMouseEnter": {
          "params": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onMouseLeave": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "EmptyState": {
      "module": "EmptyStateModule",
      "selector": "bb-empty-state-ui",
      "description": "Component that displays an empty state.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-empty-state--docs",
      "inputs": {
        "image": {
          "type": "string",
          "description": "The image to be displayed for empty state. Required. Will throw an error if unset."
        },
        "preset": {
          "type": "EmptyStatePresetType",
          "options": "'unknown_error_personal' | 'consents' | 'sweeps' | 'batches' | 'payment_not_found' | 'transactions' | 'budgets' | 'permissions' | 'upcoming_payments' | 'results_found' | 'no_results_found' | 'notifications' | 'unknown_error_organisation' | 'cards' | 'cashflow' | 'data_found' | 'no_internet' | 'location' | 'user' | 'pockets' | 'insights' | 'transaction_limits' | 'no_contacts' | 'no_conversations' | 'nothing_to_approve' | 'operation_timeout'"
        },
        "primaryActionText": {
          "type": "string"
        },
        "primaryBtnTemplate": {
          "type": "TemplateRef<any> | undefined",
          "description": "Use the primaryBtnTemplate to add any extra elements to the secondary button, such as icons or dropdowns. When using this template, do not use primaryActionText instead, include it within the template itself."
        },
        "secondaryActionText": {
          "type": "string"
        },
        "secondaryBtnTemplate": {
          "type": "TemplateRef<any> | undefined",
          "description": "Use the secondaryBtnTemplate to add any extra elements to the secondary button, such as icons or dropdowns. When using this template, do not use secondaryActionText instead, include it within the template itself."
        },
        "showPrimaryAction": {
          "type": "boolean",
          "default": "false"
        },
        "showSecondaryAction": {
          "type": "boolean",
          "default": "false"
        },
        "subtitle": {
          "type": "string",
          "description": "The sub-title of the empty state. Defaults to an empty string."
        },
        "title": {
          "type": "string",
          "description": "The title of the empty state. Required. Will throw an error if unset."
        }
      },
      "outputs": {
        "primaryActionClick": {
          "type": "EventEmitter"
        },
        "secondaryActionClick": {
          "type": "EventEmitter"
        }
      }
    },
    "ErrorCommonState": {
      "module": "ErrorCommonStateModule",
      "selector": "bb-common-error-state-ui",
      "description": "Component that displays error state based on error value that was provided.",
      "inputs": {
        "error": {
          "type": "HttpErrorResponse | Error | TemplateRef<any> | string",
          "description": "Error that should be displayed. Could be HttpErrorResponse, Error, Template reference or string. Defaults to empty string.",
          "default": "''"
        }
      },
      "methods": {
        "getErrorTemplate": {
          "returns": {
            "type": "any"
          }
        },
        "getMessage": {
          "returns": {
            "type": "any"
          }
        }
      }
    },
    "Fieldset": {
      "module": "FieldsetModule",
      "selector": "bb-fieldset-ui",
      "description": "Component that displays a fieldset group.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-fieldset--docs",
      "inputs": {
        "disabled": {
          "type": "boolean",
          "description": "Whether to disable all form items within the fieldset.",
          "default": "false"
        },
        "heading": {
          "type": "string",
          "description": "The caption for the fieldset element."
        }
      }
    },
    "FileAttachment": {
      "module": "FileAttachmentModule",
      "selector": "bb-file-attachment-ui",
      "description": "### Accessibility Current component provide option to pass needed accessibility attributes:  - id  - aria-label  - aria-describedby Component displays file attachment.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-file-attachment--docs",
      "inputs": {
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget.",
          "default": "'file-attachment-card-body'"
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label for delete button when control does not need to render label tag.",
          "default": "'Delete file'"
        },
        "block": {
          "type": "boolean",
          "description": "The flag to indicate whether the file-attachment should fill the container that it is in. Defaults to 'false'.",
          "default": "false"
        },
        "deletable": {
          "type": "boolean",
          "description": "Show delete button flag. Defaults to false.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Disabled state flag. Defaults to false.",
          "default": "false"
        },
        "fileContent": {
          "type": "Observable<ArrayBuffer> | undefined",
          "description": "Set file content (required if disabled property is not set to true)."
        },
        "id": {
          "type": "string",
          "description": "The id for attachment card.",
          "default": "'file-attachment-card-body_' + getDynamicId()"
        },
        "loading": {
          "type": "boolean",
          "description": "Loading indicator flag. Defaults to false.",
          "default": "false"
        },
        "name": {
          "type": "string | undefined",
          "description": "Set file name (required)."
        },
        "size": {
          "type": "number | string | undefined",
          "description": "Set file size (required). Accepts number or string."
        }
      },
      "outputs": {
        "delete": {
          "type": "EventEmitter",
          "description": "Event emitted on delete button click."
        }
      },
      "methods": {
        "onDelete": {
          "description": "Delete attachment event emitter.",
          "params": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onDownload": {
          "description": "Download attachment method.",
          "params": [
            {
              "name": "$event",
              "type": "Event"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Header": {
      "module": "HeaderModule",
      "selector": "bb-header-ui",
      "description": "Component that displays a header.",
      "deprecated": true,
      "deprecationMessage": "Component is deprecated as of ui-ang v11. It will be removed in ui-ang v13. Please use PageHeaderComponent to replace your primary header and native HTML h2-h5 to replace smaller headers.",
      "inputs": {
        "heading": {
          "type": "string | TemplateRef<any> | undefined",
          "description": "The text or label or a TemplateRef to be displayed as the header."
        },
        "headingClasses": {
          "type": "string | undefined",
          "description": "The heading classes to be added to the component."
        },
        "headingType": {
          "type": "string | undefined",
          "description": "The heading type to be rendered in the component."
        }
      },
      "methods": {
        "getHeadingTemplate": {
          "returns": {
            "type": "TemplateRef | undefined"
          }
        }
      }
    },
    "Heading": {
      "module": "HeadingModule",
      "selector": "bb-heading-ui",
      "description": "Component that displays a header with navigation ### Displaying navigation options based on entitlements Heading component could render the navigation items based on entitlements. To enable this feature PERMISSIONS_STRATEGY token from `@backbase/ui-ang/heading` should be privided. F.e. ``` import { PermissionsStrategy } from '@backbase/foundation-ang/web-sdk'; //... providers: [ { provide: PERMISSIONS_STRATEGY, useClass: PermissionsStrategy } ] //.... ```",
      "deprecated": true,
      "deprecationMessage": "Component is deprecated as of ui-ang v11. It will be removed in ui-ang v13. Please use PageHeaderComponent to replace your primary header and native HTML h2-h5 to replace smaller headers.",
      "inputs": {
        "buttonColor": {
          "type": "string",
          "description": "Color of the button. Default primary",
          "default": "'primary'"
        },
        "buttonIcon": {
          "type": "string",
          "description": "Button icon. Will be used if useFirstLinkAsDefault = false;"
        },
        "buttonLabel": {
          "type": "string",
          "description": "Button label. Will be used if useFirstLinkAsDefault = false;"
        },
        "buttonSize": {
          "type": "\"sm\" | \"md\"",
          "description": "Size of the button. Allowed values are sm or md. Default md",
          "default": "'md'"
        },
        "customClassName": {
          "type": "string",
          "description": "Custom class name",
          "default": "''"
        },
        "heading": {
          "type": "string",
          "description": "Heading",
          "default": "''"
        },
        "headingClasses": {
          "type": "string",
          "description": "Heading Classes",
          "default": "''"
        },
        "headingType": {
          "type": "string",
          "description": "Heading type (h1-h6)",
          "default": "''"
        },
        "navigationItems": {
          "type": "HeadingNavigationItem<any>[]",
          "description": "An array of objects representing the navigation menu items.",
          "default": "[]"
        },
        "position": {
          "type": "Placement | PlacementArray",
          "description": "The position of the dropdown, position will be picked in order of feasibility",
          "default": "['bottom-end', 'bottom-start', 'top-end', 'top-start']"
        },
        "showNavigation": {
          "type": "boolean",
          "description": "Determines whether or not to show the navigation section.",
          "default": "true"
        },
        "useFirstLinkAsDefault": {
          "type": "boolean",
          "description": "Determines whether or not to use the first link as the default target.",
          "default": "false"
        }
      },
      "outputs": {
        "navigationAction": {
          "type": "EventEmitter",
          "description": "Event on item click"
        }
      },
      "methods": {
        "onClick": {
          "params": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "HeadingDropdown": {
      "module": "HeadingDropdownModule",
      "selector": "bb-heading-dropdown",
      "inputs": {
        "buttonColor": {
          "type": "string",
          "description": "Color of the button. Default primary",
          "default": "'primary'"
        },
        "buttonIcon": {
          "type": "string",
          "description": "Button icon. Will be used if useFirstLinkAsDefault = false;"
        },
        "buttonLabel": {
          "type": "string",
          "description": "Button label. Will be used if useFirstLinkAsDefault = false;"
        },
        "buttonSize": {
          "type": "\"sm\" | \"md\"",
          "description": "Size of the button. Allowed values are sm or md. Default md",
          "default": "'md'"
        },
        "menu": {
          "type": "HeadingNavigationItem<any>[]",
          "description": "Array of representation of the link menu object",
          "default": "[]"
        },
        "position": {
          "type": "Placement | PlacementArray",
          "description": "The position of the dropdown, position will be picked in order of feasibility",
          "default": "['bottom-end', 'bottom-start', 'top-end', 'top-start']"
        },
        "useFirstLinkAsDefault": {
          "type": "boolean",
          "description": "Flag to denote if the first link from buttons array should be used as default target",
          "default": "false"
        }
      },
      "outputs": {
        "navigationAction": {
          "type": "EventEmitter",
          "description": "Event on item click"
        }
      },
      "methods": {
        "onClick": {
          "params": [
            {
              "name": "event",
              "type": "Event"
            },
            {
              "name": "value",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Icon": {
      "module": "IconModule",
      "selector": "bb-icon-ui",
      "description": "Component that displays an icon.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-icon--docs",
      "inputs": {
        "animate": {
          "type": "boolean",
          "description": "Whether the icon should be animated. Defaults to false.",
          "default": "false"
        },
        "aria-label": {
          "type": "string | undefined",
          "description": "Input that can be used to specify the aria-label attribute."
        },
        "backgroundType": {
          "type": "\"circle\" | \"square\" | undefined",
          "description": "Wether the icon has a background. If not set it will display just the icon without background. Possible values are circle and square."
        },
        "color": {
          "type": "string | undefined",
          "description": "The color of the icon represented as a color name contained in backbase-theme."
        },
        "cropped": {
          "type": "boolean | string",
          "description": "Whether the icon should be cropped horizontally."
        },
        "flipOnRtl": {
          "type": "boolean",
          "description": "Whether the icon should be flipped when the page direction is RTL (right-to-left)."
        },
        "inverse": {
          "type": "boolean",
          "description": "Whether to use white background and inverse icon colors",
          "default": "false"
        },
        "name": {
          "type": "string | undefined",
          "description": "The name of the icon"
        },
        "size": {
          "type": "IconSize",
          "options": "'sm' | 'md' | 'lg' | 'xl' | 'xxl'",
          "description": "The size of the icon represented as a size name contained in backbase-theme.  This is ignored when the circle option is used. Defaults to md.",
          "default": "'md'"
        }
      }
    },
    "Illustration": {
      "module": "IllustrationModule",
      "selector": "bb-illustration-ui",
      "description": "Component that displays an illustration from the Design System visual asset library. ### Usage If you already have a Backbase app, please follow https://backbase.io/developers/documentation/web-devkit/app-development/configure-static-assets/#_configure_an_application_to_add_static_assets to configure static assets inclusion. For this component in particular, you may need to add: ```ts \"assets\": [   {     \"glob\": \"**\\/*\",     \"input\": \"node_modules/@backbase/ui-ang/assets\",     \"output\": \"/assets/design-system\"   } ] ``` ### Global configuration token `ILLUSTRATION_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of `IllustrationComponent` in your project. *Note:* The token overwrites the default value only. If you have provided a value as a property on a specific component, the token is not be able to overwrite it. The following properties can be overwritten using the token:  - `assetPath`  - `fileType` #### Usage notes The following is an example of how to use the token: ```ts import { ILLUSTRATION_CONFIG_TOKEN } from '@backbase/ui-ang/illustration'; import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; import { AppModule } from './app/app.module'; const illustrationConfig = {   fileType: 'png' } platformBrowserDynamic().bootstrapModule(AppModule, {   providers: [{ provide: ILLUSTRATION_CONFIG_TOKEN, useValue: illustrationConfig }] }); ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-illustration--docs",
      "inputs": {
        "alt": {
          "type": "string",
          "description": "The alt attribute value of the illustration HTML  tag. Set the value to empty string &quot;&quot; so that screen readers won't read it. This useful when the image does not convey any meaning and avoid disturbing a screen reader user Defaults to undefined. It will set alt to name | illustrationAlt in the html template."
        },
        "assetPath": {
          "type": "string",
          "description": "Location of your assets folder. Used for overriding or theming the illustrations. This attribute can be overwritten via the global configuration token. Defaults to the ui-ang visual asset library folder."
        },
        "classes": {
          "type": "string",
          "description": "The class of the image. Used for additional styling."
        },
        "fileType": {
          "type": "string",
          "description": "The file type. This attribute can be overwritten via the global configuration token. Defaults to svg."
        },
        "loading": {
          "type": "",
          "description": "The desired loading behavior (lazy, eager, or auto). Defaults to lazy which is recommended for most images."
        },
        "name": {
          "type": "string",
          "description": "The name of the illustration. This corresponds to the file name. Supports camelCase, snake_case or kebab-case. Input is required.",
          "optional": false
        },
        "priority": {
          "type": "",
          "description": "Indicates whether this image should have a high priority.",
          "default": "false"
        },
        "size": {
          "type": "IllustrationSizeObject",
          "description": "Either a string indicating the size. For example: &quot;sm&quot;, &quot;md&quot; an object with dimensions: { width, height }  Input is required.",
          "optional": false
        }
      }
    },
    "InfiniteScroll": {
      "module": "InfiniteScrollModule",
      "selector": "bb-infinite-scroll-ui",
      "description": "Component that displays an infinite scroll.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-infinite-scroll--docs",
      "inputs": {
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag.",
          "default": "'Infinite scrolling content'"
        },
        "debounce": {
          "type": "number",
          "description": "Specify debounce duration in ms",
          "default": "100"
        },
        "disableScrollEnd": {
          "type": "boolean",
          "description": "If true then scrollEnd event should NOT be emitted",
          "default": "false"
        },
        "focusable": {
          "type": "boolean",
          "description": "Sets the focusability of the component. If value is true, the component becomes focusable. If value is false, the component becomes non-focusable. Component is focusable by default",
          "default": "true"
        },
        "isLoading": {
          "type": "boolean",
          "description": "Takes a boolean value to indicate the loading state of data",
          "default": "false"
        },
        "offset": {
          "type": "number",
          "description": "The number of pixels from the bottom of the element at which to trigger the scrollEnd event.",
          "default": "0"
        },
        "scrollContainer": {
          "type": "string",
          "description": "Takes a CSS class selector to identify the scrolling element",
          "default": "'.infinite-scroll-wrapper'"
        }
      },
      "outputs": {
        "scrollEnd": {
          "type": "EventEmitter",
          "description": "Event that is triggered when the user has scrolled to the bottom of the element."
        }
      }
    },
    "InputBase": {
      "module": "InputBaseModule",
      "description": "Base component for input fields. ### Accessibility Current component provide option to pass needed accessibility attributes to custom components",
      "inputs": {
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputCheckbox": {
      "module": "InputCheckboxModule",
      "selector": "bb-input-checkbox-ui",
      "description": "Component that displays a checkbox input.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-checkbox--docs",
      "inputs": {
        "hideCheckbox": {
          "type": "boolean",
          "description": "Whether checkbox should be rendered. There will be no visual changes but the checkbox will not be interactive. Used for preventing nested interactive control violations for accessibility e.g bb-account-selector-ui. Defaults to false.",
          "default": "false"
        },
        "indeterminate": {
          "type": "boolean",
          "description": "The value that represents indeterminate state of checkbox."
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "indeterminateChange": {
          "type": "EventEmitter<boolean>",
          "description": "Event emitted when the checkbox's indeterminate value changes."
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "returns": {
            "type": "void"
          }
        },
        "setFocus": {
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputDateDivided": {
      "module": "InputDateDividedModule",
      "selector": "bb-input-date-divided",
      "description": "Component that displays a date input with different inputs for day, month, year .",
      "deprecated": true,
      "deprecationMessage": "Component is deprecated as of ui-ang v11. It will be removed in ui-ang v13. Please use InputDatepickerComponent instead.",
      "inputs": {
        "format": {
          "type": "string",
          "description": "date format to order the text boxes"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the text input is readonly.",
          "default": "false"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "checkErrors": {
          "params": [
            {
              "name": "control",
              "type": "UntypedFormControl"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getInputsTouched": {
          "returns": {
            "type": "boolean"
          }
        },
        "getInputsValid": {
          "returns": {
            "type": "boolean"
          }
        },
        "getLocaleFormat": {
          "returns": {
            "type": "string"
          }
        },
        "getTextOrderFromLocales": {
          "params": [
            {
              "name": "localFormat",
              "type": "string"
            }
          ],
          "returns": {
            "type": "Array<string>"
          }
        },
        "showDayErrors": {
          "returns": {
            "type": "\"dayRequired\" | \"dayMin\" | \"dayMax\""
          }
        },
        "showMonthErrors": {
          "returns": {
            "type": "\"monthRequired\" | \"monthMin\" | \"monthMax\""
          }
        },
        "showYearErrors": {
          "returns": {
            "type": "\"yearRequired\" | \"yearMin\" | \"yearMax\""
          }
        },
        "validate": {
          "params": [
            {
              "name": "control",
              "type": "UntypedFormControl"
            }
          ],
          "returns": {
            "type": "any"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "data",
              "type": "literal type"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputDatepicker": {
      "module": "InputDatepickerModule",
      "selector": "bb-input-datepicker-ui",
      "description": "Component that displays a datepicker ### Custom internationalization It is possible to provide a custom internalization. To do this, a `DATEPICKER_I18` token from `@backbase/ui-ang/input-datepicker` should be provided on the module level. The token should implement the [NgbDatepickerI18n](https://ng-bootstrap.github.io/#/components/datepicker/api#NgbDatepickerI18n) interface. ### Setting and reading the date *Note* Datepicker uses the date *with the timezone* inside its model. And hence to make it work properly in all cases there are some recommendations for setting and reading the date to and from the datepicker. #### Setting the date When setting the date to the datepicker the date must be provided in the format that assumes zero hours and zero minutes in the local timezone. Here are some examples of what the date setting should looks like: ```typescript this.minDate = new Date(2021, 11, 15, 0, 0).toISOString(); ``` or ```typescript this.minDate = new Date('2021-12-15T00:00').toISOString(); ``` Note that ```typescript new Date('2021-12-15').toISOString(); ``` generates a date in GMT0 format and that is not correct for the datepicker input date. #### Reading the date When a date is selected via UI (the datepicker's popup window or browser's input field) its display date is transformed to the ISO string date with the assumption that it’s zero hours and zero minutes in the current time zone. Which leads to the different ISO string values for different time zones for the same date. F.e. \"Dec 15 2021\" is going to be transformed to \"2021-12-14T23:00:00.000Z\" for the \"GMT+0100 (Central European Standard Time)\" time zone and to \"2021-12-15T03:00:00.000Z\" for \"GMT-0300 (West Greenland Standard Time)\" time zone. As you can see the _day_ value is different in ISO string based on the timezone. It’s going to be either 14 or 15 in the example above. The recommendation here is to convert the ISO string, that the datepicker returns, into the Date object and read its day value. Here is an example: ```typescript private formatDate(stringDate: string): string {   const date = new Date(stringDate);   if (stringDate && !isNaN(date.valueOf())) {     return `${date.getFullYear()}-${this.appendLeadingZeroes(date.getMonth() + 1)}-${this.appendLeadingZeroes(date.getDate())}`;   }   return ''; } private appendLeadingZeroes(value: number): string {   return value > 9 ? value.toString() : `0${value}`; } ``` ### Setting the mask When setting the mask, the following rules/expectations apply: - mask can be set to boolean true/false, or to some string pattern like 00/00/0000 - when mask is set, if overrideDateFormat is not set in the template, it's set inside the component to be dateFormat Rules when mask is set to true in the template: - when mask is set to true, it will be reset to an overrideDateFormat-compliant-string-pattern that's created in the component - if overrideDateFormat is not mask compliant (e.g., has one digit for days or months), overrideDateFormat is adjusted first Rules when mask is set to some string pattern in the template: - string patterns are made of a subset of allowed ngx-mask characters 0's and S's only - see https://www.npmjs.com/package/ngx-mask - In the above, 0 is used to be a placeholder for digits, and S for letters - Typical date separators such as these in [ / , sp - ] are allowed in the created/provided mask pattern - If created/provided mask pattern is not compliant with overrideDateFormat, component is invalidated and mask is set to be undefined Examples when mask is set to true in the template (e.g., [mask]=\"true\") - if overrideDateFormat = 'dd/MM/yyyy' or 'MM/dd/yyyy', created mask will be '00/00/0000' - if overrideDateFormat = 'MMM dd, yy', created mask will be 'SSS 00, 00' - if dateFormat = 'M/d/yy', then overrideDateFormat is corrected to 'MM/dd/yy' and created mask will be '00/00/00' Examples when mask is set to some string pattern (e.g., [mask]=\"'00/00/00'\") - in this setting, overrideDateFormat is not adjusted, only validation occurs here - if overrideDateFormat = 'yyyy-MMM-00' and template-set mask = '0000-SSS-00', mask is validated and accepted - if overrideDateFormat = 'yyyy-MMM-00' and template-set mask = '0000-000-00', mask is rejected (because there are no three-digit months), set to undefined, and element is errored ### Global configuration token `INPUT_DATEPICKER_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of `InputDatepickerComponent` in your project. *Note:* The token overwrites the default value only. If you have provided a value as a property on a specific component, the token is not able to overwrite it. The following properties can be overwritten using the token: - `autocomplete` - `displayMonths` - `firstDayOfWeek` - `overrideDateFormat` - `placeholder` - `rangeSelection` #### Usage notes The following is an example of how to use the token: ```typescript import { INPUT_DATEPICKER_CONFIG_TOKEN } from '@backbase/ui-ang/input-datepicker'; import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; import { AppModule } from './app/app.module'; const inputDatepickerConfig = {   firstDayOfWeek: 1 } platformBrowserDynamic().bootstrapModule(AppModule, {   providers: [{ provide: INPUT_DATEPICKER_CONFIG_TOKEN, useValue: inputDatepickerConfig }] }); ``` ### Accessibility The component provides options to pass needed accessibility attributes. You need to take care of properties that are required in your case: - `role` describes the role of the element in programs like screen readers - `aria-activedescendant` identifies the currently active element - `aria-describedby` identifies the element that describes the component - `aria-expanded` is set on an element to indicate if the datepicker is expanded or collapsed - `aria-invalid` state indicates the entered value does not conform to the format expected - `aria-label` defines a string value that labels the component - `aria-labelledby` identifies the element that labels the component - `aria-owns` identifies an element in order to define a visual, functional, or contextual relationship",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-datepicker--docs",
      "inputs": {
        "ariaLabel": {
          "type": "string",
          "description": "A label for the datepicker that will be used to provide an accessible description of the component.",
          "default": "'Datepicker'"
        },
        "ariaLabelForButton": {
          "type": "any",
          "description": "Accessible label for Datepicker button.",
          "default": "$localize`:@@bb-input-datepicker-ui.datepicker-button.aria-label:Toggle Date popup`"
        },
        "ariaLabelToDate": {
          "type": "string",
          "description": "Accessible label for the second input when the datepicker has a ranged split input."
        },
        "autocomplete": {
          "type": "",
          "description": "The autocomplete value of enclosed input control. This attribute can be overwritten via the global configuration token"
        },
        "btnColor": {
          "type": "string",
          "description": "Color of the button.",
          "deprecated": true,
          "deprecationMessage": "in ui-ang@12 and will be removed in ui-ang@14. No replacement provided."
        },
        "clickOpen": {
          "type": "boolean",
          "description": "Indicates if the datepicker is opened when clicking input. Defaults to false",
          "default": "false"
        },
        "container": {
          "type": "",
          "description": "The container element that the datepicker should be attached to.",
          "default": "null"
        },
        "datepickerDescribedby": {
          "type": "string",
          "description": "Accessible description for datepicker date selection popup.",
          "default": "this.defaultDatepickerDescribedby"
        },
        "displayMonths": {
          "type": "number",
          "description": "Indicates how many month will be shown in the picker This attribute can be overwritten via the global configuration token"
        },
        "firstDayOfWeek": {
          "type": "",
          "description": "The first day of the week By default, the calendar uses ISO 8601 and the weekdays are is 1=Mon ... 7=Sun This attribute can be overwritten via the global configuration token."
        },
        "focusOpen": {
          "type": "boolean",
          "description": "Indicates if the datepicker is opened when focusing input. Defaults to false",
          "default": "false"
        },
        "footerTemplate": {
          "type": "ElementRef",
          "description": "The reference to the custom template for the datepicker footer."
        },
        "icon": {
          "type": "string",
          "description": "Icon that is displayed in the button. Defaults to calendar",
          "default": "'calendar-today'"
        },
        "iconColor": {
          "type": "string",
          "description": "The color of the icon to be displayed."
        },
        "iconSize": {
          "type": "string",
          "description": "The size of the icon to be displayed. Defaults to md",
          "default": "'md'"
        },
        "isOpen": {
          "type": "boolean",
          "description": "Defines whether or not the datepicker is opened initially. Defaults to false.",
          "default": "false"
        },
        "labelTo": {
          "type": "string",
          "description": "The label for the second input when the datepicker has a ranged split input. Defaults to an empty string.",
          "default": "''"
        },
        "markDisabled": {
          "type": "Function",
          "description": "Callback to mark a given date as disabled."
        },
        "mask": {
          "type": "",
          "description": "Mask configuration (optional). The default value is false Mask can be:  1- enabled: when set from template to boolean true to create mask, or false (default is false if left unset).  2- validated: when set from template to some string date pattern such as 00/00/0000 or SSS 00, 0000. This attribute can be overwritten via the global configuration token"
        },
        "maxDate": {
          "type": "NgbDateStruct | string | undefined",
          "description": "Max date for the navigation. If not provided, 'year' select box will display 10 years after current month."
        },
        "minDate": {
          "type": "NgbDateStruct | string | undefined",
          "description": "Min date for the navigation. If not provided, 'year' select box will display 10 years before current month"
        },
        "navigation": {
          "type": "\"select\" | \"arrows\" | \"none\"",
          "description": "Navigation pattern through dates. Default to arrows",
          "default": "'arrows'"
        },
        "overrideDateFormat": {
          "type": "",
          "description": "Override date format (optional). Supported formats are yyyy/MM/dd, MM/dd/yyyy, MMMM dd, yyyy. Note, other formats might work inconsistent in different browsers. This attribute can be overwritten via the global configuration token"
        },
        "placeholder": {
          "type": "",
          "description": "The placeholder for the datepicker input. Default is Locale Date Format; This attribute can be overwritten via the global configuration token"
        },
        "placement": {
          "type": "string | undefined",
          "description": "Placement of a popup window"
        },
        "rangeSelection": {
          "type": "boolean",
          "description": "Indicates whether the datepicker should allow selecting a date range with a single input. The default value is false. This attribute can be overwritten via the global configuration token."
        },
        "rangeSelectionSplit": {
          "type": "boolean",
          "description": "Indicates if the datepicker should a date range with split input. One for the from date and one for the to date. Defaults to false",
          "default": "false"
        },
        "startDate": {
          "type": "NgDateStructNullable",
          "options": "NgbDateStruct | null",
          "description": "The date to open calendar with."
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "focusedDate": {
          "type": "EventEmitter",
          "description": "Event that is emitted when a date is focused. The event payload is a DateSelectionModel."
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "autoMask": {
          "description": "if mask for element is set, transform (constrain) input pattern accordingly",
          "params": [
            {
              "name": "element",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "bindDocumentEvents": {
          "description": "Binds event on the global document when the datepicker is not opened",
          "returns": {
            "type": "void"
          }
        },
        "createOrValidateMask": {
          "description": "createOrValidateMask  1- sets overrideDateFormat to be dateFormat in case it's undefined  2- if mask property is boolean and value is true, then createMask()  3- else, validateMask()",
          "returns": {
            "type": "void"
          }
        },
        "handleDocumentEvent": {
          "description": "Document Event handler",
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent | MouseEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onBlur": {
          "description": "Event handler for blur on the host control.",
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onClosed": {
          "description": "Event handler for closing `from` or single date picker.",
          "returns": {
            "type": "void"
          }
        },
        "onClosedTo": {
          "description": "Event handler for closing picker for `to` date.",
          "returns": {
            "type": "void"
          }
        },
        "onControlBlur": {
          "description": "Event handler blur on internal inputs and buttons",
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onDayHover": {
          "description": "Handling day-hover from day-template on range selection.",
          "params": [
            {
              "name": "event",
              "type": "literal type"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onInputChange": {
          "description": "Input change handler for single date",
          "params": [
            {
              "name": "element",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onInputChangeRange": {
          "description": "Update datepicker value on input value change for same input date range selection",
          "params": [
            {
              "name": "element",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onInputChangeSplitRange": {
          "description": "Update datepicker value on input value change for split input date range selection, from date",
          "params": [
            {
              "name": "element",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onInputChangeSplitRangeTo": {
          "description": "Update datepicker value on input value change for split input date range selection, to date.",
          "params": [
            {
              "name": "element",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onInputFocus": {
          "description": "Event handler for the native input.",
          "params": [
            {
              "name": "open",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onInputFocusTo": {
          "description": "Event handler for the native input",
          "params": [
            {
              "name": "open",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onPickerTogglerClick": {
          "description": "Event handler for the picker toggle button to",
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onPickerTogglerClickTo": {
          "description": "Event handler for the picker toggle button to (split range selection)",
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onRangeDateSelect": {
          "description": "Event handler for date setting from picker when single input range selection",
          "params": [
            {
              "name": "date",
              "type": "NgbDate"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onRangeDateSelectSplit": {
          "description": "Event handler for date setting from picker for `from` date when split input range selection",
          "params": [
            {
              "name": "date",
              "type": "NgbDate"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onRangeDateSelectSplitTo": {
          "description": "Event handler for date setting from picker for `to` date when split input range selection",
          "params": [
            {
              "name": "date",
              "type": "NgbDate"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "description": "Set disable state for the host control",
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "toggleCalendarAriaLabel": {
          "params": [
            {
              "name": "isDateTo",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "string"
          }
        },
        "writeValue": {
          "description": "Implements the value update for the control",
          "params": [
            {
              "name": "model",
              "type": "DateRangeModel | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputDatepickerDayTemplateRange": {
      "module": "InputDatepickerDayTemplateRangeModule",
      "selector": "bb-input-datepicker-range-day-template-ui",
      "inputs": {
        "currentMonth": {
          "type": "string",
          "description": "CurrentMonth on the datepicker window."
        },
        "date": {
          "type": "NgbDate",
          "description": "Date to render."
        },
        "disabled": {
          "type": "boolean",
          "description": "When true the date is rendered as disabled.",
          "default": "false"
        },
        "fromDate": {
          "type": "NgDateStructNullable",
          "options": "NgbDateStruct | null",
          "description": "Selected &quot;from&quot; date.",
          "default": "null"
        },
        "hoveredDate": {
          "type": "NgDateStructNullable",
          "options": "NgbDateStruct | null",
          "description": "Hovered date by a user",
          "default": "null"
        },
        "splitRange": {
          "type": "boolean",
          "description": "If &quot;true&quot; the datepicker is displayed with two input fields for &quot;from&quot; and &quot;to&quot; dates",
          "default": "false"
        },
        "toDate": {
          "type": "NgDateStructNullable",
          "options": "NgbDateStruct | null",
          "description": "Selected &quot;to&quot; date",
          "default": "null"
        },
        "toDateDatepicker": {
          "type": "boolean",
          "description": "&quot;true&quot; when &quot;splitRange&quot; is &quot;true&quot; and the parent datepicker belongs to second datepicker input (the one for &quot;to&quot; date)",
          "default": "false"
        }
      },
      "outputs": {
        "hovered": {
          "type": "EventEmitter",
          "description": "Event to trigger on date hover."
        },
        "rangeSelect": {
          "type": "EventEmitter",
          "description": "Emits an event when a range is selected"
        }
      },
      "methods": {
        "onKeyUp": {
          "description": "Keypress handler",
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onMouseOut": {
          "description": "Handle mouseover. Emit the hovered date with null.",
          "returns": {
            "type": "void"
          }
        },
        "onMouseOver": {
          "description": "Handle mouseover. Emit the hovered date with date.",
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputDatepickerDayTemplateSingle": {
      "module": "InputDatepickerDayTemplateSingleModule",
      "selector": "bb-input-datepicker-single-day-template-ui",
      "inputs": {
        "currentMonth": {
          "type": "string",
          "description": "The current month on the datepicker window."
        },
        "date": {
          "type": "NgbDate",
          "description": "Date to render."
        },
        "disabled": {
          "type": "boolean",
          "description": "When true the date is rendered as disabled",
          "default": "false"
        },
        "hoveredDate": {
          "type": "NgDateStructNullable",
          "options": "NgbDateStruct | null",
          "description": "Hovered date by a user.",
          "default": "null"
        },
        "selected": {
          "type": "boolean",
          "description": "Indicates whether the date is selected",
          "default": "false"
        }
      },
      "outputs": {
        "hovered": {
          "type": "EventEmitter",
          "description": "Event to trigger on date hover."
        }
      },
      "methods": {
        "onKeyUp": {
          "description": "Keypress handler",
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onMouseOut": {
          "description": "Handle mouseover. Emit the hovered date with null.",
          "returns": {
            "type": "void"
          }
        },
        "onMouseOver": {
          "description": "Handle mouseover. Emit the hovered date with date.",
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputEmail": {
      "module": "InputEmailModule",
      "selector": "bb-input-email-ui",
      "description": "Component that displays an email input. ### Global configuration token `INPUT_EMAIL_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of `InputEmailComponent` instances in your project. *Note:* The token overwrites the default value only. If you have provided a value as a property on a specific component, the token is not be able to overwrite it. The following properties can be overwritten using the token:  - `autocomplete`  - `maxLength`  - `minLength`  - `placeholder`  - `size`  - `pattern` #### Usage notes The following is an example of how to use the token: ```typescript  import { INPUT_EMAIL_CONFIG_TOKEN } from '@backbase/ui-ang/input-email';  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';  import { AppModule } from './app/app.module';  const inputEmailConfig = {    autocomplete: 'email'  }  platformBrowserDynamic().bootstrapModule(AppModule, {    providers: [{ provide: INPUT_EMAIL_CONFIG_TOKEN, useValue: inputEmailConfig }]  }); ``` ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-label  - aria-labelledby  - aria-owns",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-email--docs",
      "inputs": {
        "autocomplete": {
          "type": "\"email\" | \"off\" | \"on\"",
          "description": "The autocomplete value of enclosed input control. If not set, 'email' is used. This attribute can be overwritten via the global configuration token"
        },
        "maxLength": {
          "type": "number | undefined",
          "description": "The maxLength for the email input. This attribute can be overwritten via the global configuration token"
        },
        "minLength": {
          "type": "number | undefined",
          "description": "The minLength for the email input. This attribute can be overwritten via the global configuration token"
        },
        "pattern": {
          "type": "string | RegExp | undefined",
          "description": "The validation pattern for the email input. Defaults to undefined, resulting in the validation check using the built-in Angular validator, Validators.email(control). This attribute can be overwritten via the global configuration token"
        },
        "placeholder": {
          "type": "string | undefined",
          "description": "The placeholder for the email input. Defaults to an empty string; This attribute can be overwritten via the global configuration token"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the email input is readonly.",
          "default": "false"
        },
        "size": {
          "type": "number | string",
          "description": "The size for the email input. Defaults to an empty string; This attribute can be overwritten via the global configuration token"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "validate": {
          "params": [
            {
              "name": "control",
              "type": "AbstractControl"
            }
          ],
          "returns": {
            "type": "ValidationErrors | null"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputFile": {
      "module": "InputFileModule",
      "selector": "bb-input-file-ui",
      "description": "Component that displays a file input button. ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-label  - aria-labelledby  - aria-owns",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-file--docs",
      "inputs": {
        "accept": {
          "type": "string",
          "description": "Accepted file formats. Defaults to any ('*');",
          "default": "'*'"
        },
        "autofocus": {
          "type": "boolean",
          "description": "This Boolean attribute lets you specify that the button should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified. Defaults to false.",
          "default": "false"
        },
        "buttonSize": {
          "type": "\"sm\" | \"md\"",
          "description": "Size of the button. Defaults to 'md'.",
          "default": "'md'"
        },
        "buttonText": {
          "type": "string",
          "description": "Button text. If set, change button text from default 'Attach file' to a custom one."
        },
        "color": {
          "type": "ButtonColor | string",
          "options": "'primary' | 'info' | 'success' | 'warning' | 'danger' | 'secondary' | 'light' | 'dark' | 'link' | 'tertiary' | 'link-text' | 'link-text-light' | 'unstyled' | 'link-dark' | 'neutral'",
          "description": "Button color. Defaults to 'link';",
          "default": "'link'"
        },
        "iconName": {
          "type": "string",
          "description": "Button icon name. Defaults to 'attachment';",
          "default": "'attachment'"
        },
        "maxSizeInMb": {
          "type": "number | string",
          "description": "If set, validate according to the maximum file size in Megabytes."
        },
        "multiple": {
          "type": "boolean",
          "description": "Multiple/single file upload flag. Defaults to false;",
          "default": "false"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "onValueChange": {
          "params": [
            {
              "name": "input",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "validate": {
          "returns": {
            "type": "ValidationErrors | null"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputInlineEdit": {
      "module": "InputInlineEditModule",
      "selector": "bb-input-inline-edit-ui",
      "description": "### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-label  - aria-labelledby  - aria-owns Component that enables inline input editing.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-inline-edit--docs",
      "inputs": {
        "ariaLabelAccept": {
          "type": "any",
          "description": "string for aria label on Accept button",
          "default": "defaultAriaLabels.accept"
        },
        "ariaLabelCancel": {
          "type": "any",
          "description": "string for aria label on Cancel button",
          "default": "defaultAriaLabels.cancel"
        },
        "ariaLabelEdit": {
          "type": "any",
          "description": "string for aria label on Edit button",
          "default": "defaultAriaLabels.edit"
        },
        "ariaLabelInput": {
          "type": "any",
          "description": "string for aria label on edit input",
          "default": "defaultAriaLabels.input"
        },
        "autocomplete": {
          "type": "string",
          "description": "The autocomplete value of the enclosed input control.",
          "default": "'off'"
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "canEdit": {
          "type": "boolean",
          "description": "Flag represents visibility of edit button",
          "default": "true"
        },
        "currency": {
          "type": "string",
          "description": "Whether to consider the input value as a currency"
        },
        "hasLoadingState": {
          "type": "boolean",
          "description": "Applies additional loading state for edit flow",
          "default": "false"
        },
        "hint": {
          "type": "string",
          "description": "Hint to be displayed in edit mode"
        },
        "inputInlineTemplate": {
          "type": "TemplateRef<InputInlineEditComponent> | undefined",
          "description": "Template for custom and styling text"
        },
        "inputText": {
          "type": "string | undefined",
          "description": "string for editing"
        },
        "maxLength": {
          "type": "any",
          "description": "The maxLength for the text input.",
          "default": "Infinity"
        },
        "maxValue": {
          "type": "number",
          "description": "The max number value of the text input"
        },
        "minLength": {
          "type": "number",
          "description": "The minLength for the text input.",
          "default": "0"
        },
        "minValue": {
          "type": "number",
          "description": "The min number value of the text input"
        },
        "pattern": {
          "type": "RegExp | string",
          "description": "Whether the text input should follow a pattern."
        },
        "patternErrorMessage": {
          "type": "string",
          "description": "Displays custom error message for pattern validation failure.",
          "default": "'Input value provided is invalid'"
        },
        "showCharCounter": {
          "type": "boolean",
          "description": "Shows character counter based on maxLength",
          "default": "false"
        },
        "state": {
          "type": "InputInlineEditState",
          "description": "State for inline edit"
        },
        "tooltipAccept": {
          "type": "any",
          "description": "string for tooltip on Accept button",
          "default": "defaultTooltips.accept"
        },
        "tooltipCancel": {
          "type": "any",
          "description": "string for tooltip on Cancel button",
          "default": "defaultTooltips.cancel"
        },
        "tooltipEdit": {
          "type": "any",
          "description": "string for tooltip on Edit button",
          "default": "defaultTooltips.edit"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "accept": {
          "type": "EventEmitter",
          "description": "The event that's fired after on Accept."
        },
        "cancel": {
          "type": "EventEmitter",
          "description": "The event that's fired after on Cancel."
        },
        "stateChange": {
          "type": "EventEmitter",
          "description": "Emit on edit state changes"
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "hasError": {
          "params": [
            {
              "name": "type",
              "type": "string"
            }
          ],
          "returns": {
            "type": "boolean | undefined"
          }
        },
        "onAccept": {
          "description": "Emits the updated value from input If the {@link InputInlineEditComponent.hasLoadingState } set to true -> the state is not changed, as component state should be updated from outside, otherwise the value will be updated with the new one and state will be switched to `IDLE`",
          "returns": {
            "type": "void"
          }
        },
        "onCancel": {
          "params": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onEdit": {
          "params": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onKeydownHandler": {
          "description": "Cancels the edit mode when the escape key is pressed.",
          "params": [
            {
              "name": "evt",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputNumber": {
      "module": "InputNumberModule",
      "selector": "bb-input-number-ui",
      "description": "Component that displays a text input. ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-errormessage (Always paired with aria-invalid,when aria-invalid is true error message is read)  - aria-label  - aria-labelledby  - aria-owns",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-number--docs",
      "inputs": {
        "allowNegativeSign": {
          "type": "boolean",
          "description": "If true then the under-laying input control will allow negative sign as well. Known issue is that it is possible to insert the negative sign anywhere in the field, not only at the beginning. Inserting the negative sign after a digit will render the value empty.",
          "default": "false"
        },
        "allowNonDigits": {
          "type": "boolean",
          "description": "If true then the under-laying input control will behave as a default number input.",
          "default": "false"
        },
        "ariaLabel": {
          "type": "any",
          "description": "Text used to describe the number input for screen readers.",
          "default": "$localize`:@@bb-input-number-ui.input-number.aria-label:Number Input`"
        },
        "autocomplete": {
          "type": "string | undefined",
          "description": "The autocomplete value of the enclosed input control."
        },
        "max": {
          "type": "number | undefined",
          "description": "The maximum value to accept."
        },
        "min": {
          "type": "number | undefined",
          "description": "The minimum value to accept for this input."
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder for the number input. Defaults to an empty string;",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the number input is readonly.",
          "default": "false"
        },
        "step": {
          "type": "number | undefined",
          "description": "A stepping interval to use when using up and down arrows to adjust the value"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "onInput": {
          "params": [
            {
              "name": "inputNumber",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onPaste": {
          "params": [
            {
              "name": "inputNumber",
              "type": "HTMLInputElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputPassword": {
      "module": "InputPasswordModule",
      "selector": "bb-input-password-ui",
      "description": "Component that displays a password input ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-label  - aria-labelledby  - aria-owns visibilityControlLabel is discernible text for show/hide password button. ariaLabel is discernible text for password input",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-password--docs",
      "inputs": {
        "ariaLabel": {
          "type": "string",
          "description": "Text used to describe the password input for screen readers.",
          "default": "'Password Input'"
        },
        "autocomplete": {
          "type": "\"new-password\" | \"current-password\" | \"on\" | \"off\" | \"one-time-code\"",
          "description": "The autocomplete type for text input."
        },
        "inputMode": {
          "type": "string",
          "description": "The inputMode for the input.",
          "default": "'text'"
        },
        "maxLength": {
          "type": "number",
          "description": "The maxLength for the password input."
        },
        "minLength": {
          "type": "number",
          "description": "The minLength for the password input."
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder for the password input. Defaults to an empty string;",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the password input is readonly.",
          "default": "false"
        },
        "showPassword": {
          "type": "boolean",
          "description": "Whether to show password in plain text.",
          "default": "false"
        },
        "showVisibilityControl": {
          "type": "boolean",
          "description": "Whether to show the visibility button icon after the text.",
          "default": "false"
        },
        "visibilityControlLabel": {
          "type": "string",
          "description": "Discernible text for show/hide password button.",
          "default": "'Show/Hide password'"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "toggleVisibility": {
          "type": "EventEmitter",
          "description": "The event emitter called when the visibility button is clicked."
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "onVisibilityChange": {
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputPhone": {
      "module": "InputPhoneModule",
      "selector": "bb-input-phone-ui",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-phone--docs",
      "inputs": {
        "ariaLabel": {
          "type": "string",
          "description": "ariaLabel is discernible text for phone input.",
          "default": "'Phone Input'"
        },
        "autocomplete": {
          "type": "",
          "description": "The autocomplete value of the enclosed input control. Defaults to 'tel' This attribute can be overwritten via the global configuration token"
        },
        "clearable": {
          "type": "boolean",
          "description": "Allow to clear selected value.",
          "default": "false"
        },
        "countryList": {
          "type": "",
          "description": "List of countries to display in dropdown. This attribute can be overwritten via the global configuration token"
        },
        "defaultCountryIsoCode": {
          "type": "",
          "description": "Default country selected for country dropdown. This attribute can be overwritten via the global configuration token"
        },
        "dropdownPosition": {
          "type": "\"bottom\" | \"top\" | \"auto\" | undefined",
          "description": "Dropdown Position (bottom | top | auto)"
        },
        "enableCountryCode": {
          "type": "",
          "description": "Enable/Disable Country code dropdown This attribute can be overwritten via the global configuration token"
        },
        "hideSelectedCountryFlag": {
          "type": "",
          "description": "Whether to hide the flag of the selected country. Defaults to false This attribute can be overwritten via the global configuration token"
        },
        "isOpen": {
          "type": "any",
          "description": "Allows manual control of dropdown opening and closing. true - won't close. false - won't open. Defaults to undefined."
        },
        "mask": {
          "type": "",
          "description": "The mask of the phone input. Defaults to null This attribute can be overwritten via the global configuration token"
        },
        "maxLength": {
          "type": "",
          "description": "The max size of the phone input. This attribute can be overwritten via the global configuration token."
        },
        "minLength": {
          "type": "",
          "description": "The size of the phone input. This attribute can be overwritten via the global configuration token"
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder for the phone input. Defaults to an empty string;",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the phone input is readonly.",
          "default": "false"
        },
        "searchable": {
          "type": "boolean",
          "description": "Allow to search for value.",
          "default": "false"
        },
        "validationPattern": {
          "type": "",
          "description": "The validation pattern of the phone input. This attribute can be overwritten via the global configuration token."
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "valueChange": {
          "type": "EventEmitter",
          "description": "The event emitter called when the one of the inputs change."
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "onChanges": {
          "params": [
            {
              "name": "event",
              "type": "CountryData"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onClear": {
          "returns": {
            "type": "void"
          }
        },
        "onClose": {
          "returns": {
            "type": "void"
          }
        },
        "onFilterChange": {
          "params": [
            {
              "name": "query",
              "type": "string | undefined"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onInputValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onOpen": {
          "deprecated": true,
          "deprecationMessage": "Deprecated in ui-ang@12. To be marked as protected in ui-ang@14. No replacements.",
          "returns": {
            "type": "void"
          }
        },
        "onTextChange": {
          "params": [
            {
              "name": "preventEmit",
              "type": ""
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "searchFunc": {
          "params": [
            {
              "name": "term",
              "type": "string"
            },
            {
              "name": "item",
              "type": "CountryData"
            }
          ],
          "returns": {
            "type": "boolean"
          }
        },
        "updateValues": {
          "params": [
            {
              "name": "preventEmit",
              "type": ""
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "validate": {
          "params": [
            {
              "name": "control",
              "type": "AbstractControl"
            }
          ],
          "returns": {
            "type": "ValidationErrors | null"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputRadio": {
      "module": "InputRadioModule",
      "selector": "bb-input-radio-ui",
      "description": "### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-label  - aria-labelledby  - aria-owns Component that represents a single radio that is part of the radio group component.",
      "inputs": {
        "aria-activedescendant": {
          "type": "string | undefined",
          "description": "The ID of the currently active descendant element when the radio button is part of a group."
        },
        "aria-describedby": {
          "type": "string | undefined",
          "description": "The 'aria-describedby' attribute for the radio button"
        },
        "aria-expanded": {
          "type": "string | undefined",
          "description": "Whether the radio button is expanded (true) or collapsed (false)."
        },
        "aria-invalid": {
          "type": "string | undefined",
          "description": "Whether the radio button is invalid (true) or valid (false)."
        },
        "aria-label": {
          "type": "string | undefined",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string | undefined",
          "description": "The 'aria-labelledby' attribute for the radio button"
        },
        "aria-owns": {
          "type": "string | undefined",
          "description": "The IDs of the elements that are controlled by the radio button."
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the radio button is disabled (true) or enabled (false).",
          "default": "false"
        },
        "id": {
          "type": "string | undefined",
          "description": "A unique identifier for the radio element."
        },
        "label": {
          "type": "string | undefined",
          "description": "The label of the radio item"
        },
        "labelTemplate": {
          "type": "TemplateRef<any> | undefined",
          "description": "Custom label template."
        },
        "labelTemplateContext": {
          "type": "any | undefined",
          "description": "Label template context."
        },
        "role": {
          "type": "string | undefined"
        },
        "value": {
          "type": "string | undefined",
          "description": "The value of the native radio element."
        }
      }
    },
    "InputRadioGroup": {
      "module": "InputRadioGroupModule",
      "selector": "bb-input-radio-group-ui",
      "description": "Component that represents a group of radio buttons. ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-label  - aria-labelledby  - aria-owns",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-radio-group--docs",
      "inputs": {
        "horizontal": {
          "type": "boolean",
          "description": "Set horizontal placement of the radio elements.",
          "default": "false"
        },
        "isBlock": {
          "type": "boolean",
          "description": "Display the radio group labels as a block element.",
          "default": "false",
          "deprecated": true,
          "deprecationMessage": "in ui-ang@12. To be removed in ui-ang@14. No replacements. Introduced as a quick fix to layout issues."
        },
        "labelTemplate": {
          "type": "TemplateRef<any> | undefined",
          "description": "Custom group label template. In case with providing both (labelTemplate and label), labelTemplate will be showed."
        },
        "labelTemplateContext": {
          "type": "any | undefined",
          "description": "Group label template context.  In case with providing both (labelTemplate and label), labelTemplate will be showed."
        },
        "name": {
          "type": "string | undefined",
          "description": "The unique name of the radio group. This would the the name used for the descending radio buttons.",
          "default": "`input_radio_group_${getDynamicId()}`"
        },
        "preselect": {
          "type": "boolean",
          "description": "Set to true to select the first radio button onInit.",
          "default": "true"
        },
        "verticalAlign": {
          "type": "\"middle\" | \"top\" | \"bottom\"",
          "description": "Vertical align of the radio buttons",
          "default": "'middle'"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "valueChange": {
          "type": "EventEmitter<any>",
          "description": "Emits an event when the value of the radio group is changed."
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "focusOut": {
          "returns": {
            "type": "void"
          }
        },
        "focusValue": {
          "params": [
            {
              "name": "radio",
              "type": "InputRadioComponent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setValue": {
          "params": [
            {
              "name": "radio",
              "type": "InputRadioComponent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "trackByFn": {
          "params": [
            {
              "name": "_",
              "type": "number"
            },
            {
              "name": "item",
              "type": "InputRadioComponent"
            }
          ],
          "returns": {
            "type": "any"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "value",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputText": {
      "module": "InputTextModule",
      "selector": "bb-input-text-ui",
      "description": "Component that displays a text input. ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-label  - aria-labelledby  - aria-owns",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-text--docs",
      "inputs": {
        "autocomplete": {
          "type": "string | undefined",
          "description": "A string specifying whether the browser should autocomplete the input. Possible values: 'on', 'off', or any string that is not empty.",
          "default": "'off'"
        },
        "inputMode": {
          "type": "string",
          "description": "The inputMode for the text input.",
          "default": "'text'"
        },
        "mask": {
          "type": "string",
          "description": "ngx-mask related; default value imply no mask is used",
          "default": "''"
        },
        "maskValidator": {
          "type": "boolean",
          "description": "ngx-mask related; default value imply validation is applied on mask pattern",
          "default": "true"
        },
        "maxLength": {
          "type": "number | undefined",
          "description": "The maxLength for the text input."
        },
        "minLength": {
          "type": "number | undefined",
          "description": "The minLength for the text input."
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder for the text input. Defaults to an empty string;",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the text input is readonly. If true, the input cannot be edited. Defaults to false.",
          "default": "false"
        },
        "showCharCounter": {
          "type": "boolean",
          "description": "Shows character counter based on maxLength",
          "default": "false"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "valueChange": {
          "type": "EventEmitter<any>",
          "description": "Emits an event whenever the input value changes."
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "focusEditableElement": {
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputTimepicker": {
      "module": "InputTimepickerModule",
      "selector": "bb-input-timepicker-ui",
      "description": "Component that displays a timepicker. ### Global configuration token `INPUT_TIMEPICKER_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of  `InputTimepickerComponent` instances in your project. *Note:* The token overwrites the default value only. If you have provided a value as a property on a specific component, the token is not be able to overwrite it. The following properties can be overwritten using the token:  - `clock`  - `hourStep`  - `max`  - `min`  - `minuteStep` #### Usage notes The following is an example of how to use the token: ```typescript  import { INPUT_TIMEPICKER_CONFIG_TOKEN } from '@backbase/ui-ang/input-timepicker';  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';  import { AppModule } from './app/app.module';  const inputTimepickerConfig = {    clock: '12h'  };  platformBrowserDynamic().bootstrapModule(AppModule, {    providers: [{ provide: INPUT_TIMEPICKER_CONFIG_TOKEN, useValue: inputTimepickerConfig }]  }); ``` ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-label  - aria-labelledby  - aria-owns",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-timepicker--docs",
      "inputs": {
        "autocomplete": {
          "type": "",
          "description": "The autocomplete value of enclosed input control."
        },
        "clock": {
          "type": "\"12h\" | \"24h\"",
          "description": "Whether to display 12H or 24H mode. This attribute can be overwritten via the global configuration token."
        },
        "hourStep": {
          "type": "number",
          "description": "The number of hours to add/subtract when clicking hour spinners. This attribute can be overwritten via the global configuration token."
        },
        "max": {
          "type": "",
          "description": "If set , validate according to max time This attribute can be overwritten via the global configuration token."
        },
        "min": {
          "type": "",
          "description": "If set, validate according to min time This attribute can be overwritten via the global configuration token"
        },
        "minuteStep": {
          "type": "number",
          "description": "The number of minutes to add/subtract when clicking minute spinners. This attribute can be overwritten via the global configuration token."
        },
        "readonly": {
          "type": "boolean",
          "description": "If true, the timepicker is readonly and can't be changed.",
          "default": "false"
        },
        "seconds": {
          "type": "boolean",
          "description": "If true, it is possible to select seconds.",
          "default": "false"
        },
        "secondStep": {
          "type": "number",
          "description": "The number of seconds to add/subtract when clicking second spinners.",
          "default": "1"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "getKeywordBySize": {
          "params": [
            {
              "name": "size",
              "type": "number | string"
            }
          ],
          "returns": {
            "type": "string"
          }
        },
        "getSizeByKeyword": {
          "params": [
            {
              "name": "keyword",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "validate": {
          "params": [
            {
              "name": "control",
              "type": "AbstractControl"
            }
          ],
          "returns": {
            "type": "ValidationErrors | null"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "InputValidationMessage": {
      "module": "InputValidationMessageModule",
      "selector": "bb-input-validation-message-ui",
      "description": "Component that displays an input validation message or helper. ### Global configuration token `INPUT_VALIDATION_MESSAGE_CONFIG` enables you to globally set the same configuration for all instances of `InputValidationMessageComponent` in your project. *Note:* The token overwrites the default value only. If you have provided a value as a property on a specific component, the token is not be able to overwrite it. The following properties can be overwritten using the token:  - `showIcon` #### Usage notes The following is an example of how to use the token: ```typescript import { INPUT_VALIDATION_MESSAGE_CONFIG } from '@backbase/ui-ang/input-validation-message'; import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; import { AppModule } from './app/app.module'; const inputValidationMessageShowIcon = { showIcon: false }; platformBrowserDynamic().bootstrapModule(AppModule, {   providers: [{ provide: INPUT_VALIDATION_MESSAGE_CONFIG, useValue: inputValidationMessageShowIcon }] }); ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-validation-message--docs",
      "inputs": {
        "messageId": {
          "type": "string",
          "description": "Optional reference to bind parent input with this component This property is used to bind the parent input element with this component. It is optional and can be used to associate a validation message with a specific input element using the input element's ID or name."
        },
        "role": {
          "type": "\"status\" | \"alert\"",
          "description": "Sets the role attribute on the validation message. If multiple validation messages may be present on the screen then select 'status'. Default is 'alert'.",
          "default": "'alert'"
        },
        "showErrors": {
          "type": "boolean",
          "description": "Whether the errors template should be shown This property is used to show or hide the error template for the input element. When set to true, the error template will be displayed.",
          "default": "false"
        },
        "showIcon": {
          "type": "boolean",
          "description": "Whether the error template should display &quot;info&quot; icon before the error message. Default is true."
        }
      }
    },
    "ItemLog": {
      "module": "ItemLogModule",
      "selector": "bb-item-log-ui",
      "description": "Component that shows the log of the records.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-item-log--docs",
      "inputs": {
        "isPending": {
          "type": "boolean",
          "description": "Flag that denotes if item log status is pending. Defaults to false",
          "default": "false"
        },
        "records": {
          "type": "Array<ItemLogRecord | T>",
          "description": "List of item log records."
        }
      }
    },
    "ListMultipleSelect": {
      "module": "ListMultipleSelectModule",
      "selector": "bb-list-multiple-select-ui",
      "description": "Component that displays list with checkboxes.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-list-multiple-select--docs",
      "deprecated": true,
      "deprecationMessage": "Component is deprecated as of ui-ang v12. It will be removed in ui-ang v14. No replacement of this component as there is 0 usage of this component.",
      "inputs": {
        "config": {
          "type": "ListMultipleSelectItems",
          "description": "Configuration object for describing the icons to be used for each item in the multiple select list."
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "getKeys": {
          "params": [
            {
              "name": "object",
              "type": "object"
            }
          ],
          "returns": {
            "type": "string[]"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "LoadButton": {
      "module": "LoadButtonModule",
      "selector": "bb-load-button-ui",
      "description": "Component that displays a button with integrated loading indicator. Refer to [Button Component](https://designsystem.backbase.com/web-components/button/web) for button colors and sizes. ### Use Case There are two use-cases for this component:    - Finite loading - button is disabled but remains displayed after a certain limit    - Infinite loading - button is always functional #### Finite Loading This is used primarily when paginating a list of items and the number of items is known. The component is enabled and allows loading as long as the current number of displayed results (determined by `from` and `size`) is under the `totalCount`. ```html     ``` #### Infinite Loading This is used primarily when you are loading a content only once or endlessly. This is the default behaviour. This behaviour is available as long as the `totalCount` is 1. ```html     ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-load-button--docs",
      "inputs": {
        "aria-label": {
          "type": "string",
          "description": "Accessible label when button does not contain a discernible text."
        },
        "circle": {
          "type": "boolean",
          "description": "Whether it should render the button as a circle. Defaults to false i.e. oblong shape.",
          "default": "false"
        },
        "from": {
          "type": "number",
          "description": "The page to list from.",
          "default": "0"
        },
        "isLoading": {
          "type": "boolean",
          "description": "Indicates if loading indicator should be shown instead of button content. Defaults to false.",
          "default": "false"
        },
        "size": {
          "type": "number",
          "description": "The number of results per page.",
          "default": "0"
        },
        "totalCount": {
          "type": "number",
          "description": "The total item count. Defaults to 1 to allow infinite loading.",
          "default": "1"
        },
        "autofocus": {
          "type": "boolean",
          "description": "This Boolean attribute lets you specify that the button should have input focus when the page loads, unless the user overrides it, for example by typing in a different control.  Only one form-associated element in a document can have this attribute specified.",
          "default": "false"
        },
        "block": {
          "type": "boolean",
          "description": "The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.",
          "default": "false"
        },
        "buttonSize": {
          "type": "\"sm\" | \"md\"",
          "description": "Size of the button.",
          "default": "'md'"
        },
        "color": {
          "type": "ButtonColor | string",
          "options": "'primary' | 'info' | 'success' | 'warning' | 'danger' | 'secondary' | 'light' | 'dark' | 'link' | 'tertiary' | 'link-text' | 'link-text-light' | 'unstyled' | 'link-dark' | 'neutral'",
          "description": "The color for the button.  Defaults to 'primary'.",
          "default": "'primary'"
        },
        "disabled": {
          "type": "boolean",
          "description": "This Boolean attribute indicates that the user cannot interact with the button.  Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the button. Defaults to unique string"
        },
        "type": {
          "type": "ButtonType",
          "options": "'button' | 'submit' | 'reset'",
          "description": "The HTML5 button type.  Defaults to 'button'.",
          "default": "'button'"
        }
      },
      "outputs": {
        "paramChange": {
          "type": "EventEmitter<LoadMoreParams>",
          "description": "This emits new load more params to parent component"
        }
      },
      "methods": {
        "hasMore": {
          "returns": {
            "type": "boolean"
          }
        },
        "isLoadMore": {
          "returns": {
            "type": "boolean"
          }
        },
        "onClick": {
          "params": [
            {
              "name": "$event",
              "type": "MouseEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onHostElementClick": {
          "params": [
            {
              "name": "$event",
              "type": "MouseEvent"
            }
          ],
          "returns": {
            "type": "boolean"
          }
        },
        "onLoadMore": {
          "returns": {
            "type": "void"
          }
        },
        "moveAriaAttributes": {
          "params": [
            {
              "name": "hostEl",
              "type": "HTMLElement"
            },
            {
              "name": "childEl",
              "type": "HTMLElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "LoadingIndicator": {
      "module": "LoadingIndicatorModule",
      "selector": "bb-loading-indicator-ui",
      "description": "Component that displays a loading spinner and message.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-loading-indicator--docs",
      "inputs": {
        "hasBackground": {
          "type": "boolean",
          "description": "Defines whether gray background should be displayed. Default to false (background hidden).",
          "default": "false"
        },
        "inline": {
          "type": "boolean",
          "description": "Define if spinner should be shown inline without any default padding and margin. Default to false (show default padding and margin).",
          "default": "false"
        },
        "loaderSize": {
          "type": "LoadingIndicatorSize",
          "options": "'lg' | 'md' | 'sm'",
          "description": "The size of the loading indicator. Defaults to 'md'.",
          "default": "'md'"
        },
        "showDelay": {
          "type": "number",
          "description": "Delay in milliseconds before the loading indicator display. Default to 0.",
          "default": "0"
        },
        "text": {
          "type": "string",
          "description": "The text to display under the loading indicator."
        }
      }
    },
    "LocaleSelector": {
      "module": "LocaleSelectorModule",
      "selector": "bb-locale-selector-ui",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-locale-selector--docs",
      "inputs": {
        "btnColor": {
          "type": "string",
          "description": "Color of the button. Defaults to primary.",
          "default": "'primary'"
        },
        "dropDownButtonLabel": {
          "type": "string",
          "description": "Button aria label."
        },
        "dropdownPlacement": {
          "type": "PlacementArray",
          "description": "The position of the dropdown for the locale selector, position will be picked in order of feasibility.",
          "default": "['bottom-end', 'bottom-start', 'top-end', 'top-start']"
        },
        "fullWidth": {
          "type": "boolean",
          "description": "If true it will stretch the button inside to 100% width.",
          "default": "false"
        },
        "icon": {
          "type": "string",
          "description": "Icon that is displayed in the button."
        },
        "iconSize": {
          "type": "string",
          "description": "The size of the icon to be displayed. Defaults to md.",
          "default": "'md'"
        },
        "isOpen": {
          "type": "boolean",
          "description": "Defines whether or not the dropdown menu is opened initially. Defaults to false.",
          "default": "false"
        },
        "showModalOnMobileView": {
          "type": "boolean",
          "description": "If true it will show the locale selection inside a modal on mobile view.",
          "default": "false"
        }
      },
      "outputs": {
        "selectLocale": {
          "type": "EventEmitter",
          "description": "An output property which will emit a selected Locale code."
        }
      },
      "methods": {
        "changeLanguage": {
          "description": "Changes the current language to the specified locale, toggles locale modal and triggers a output event with selected locale code.",
          "params": [
            {
              "name": "localeCode",
              "type": "string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "toggleLocaleModal": {
          "description": "Toggles the visibility of the locale selector modal.",
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Logo": {
      "module": "LogoModule",
      "selector": "bb-logo-ui",
      "description": "Component that displays the company logo.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-logo--docs",
      "inputs": {
        "isInverse": {
          "type": "boolean",
          "description": "Flag to indicate whether to use the inverse colors or not.  Defaults to false.",
          "default": "false"
        },
        "type": {
          "type": "LogoType",
          "options": "'full' | 'emblem'",
          "description": "The type of the logo.  Defaults to 'full'.",
          "default": "'full'"
        }
      }
    },
    "ModalBody": {
      "module": "ModalBodyModule",
      "selector": "bb-modal-body-ui",
      "methods": {
        "setScrollable": {
          "params": [
            {
              "name": "scrollable",
              "type": "boolean | undefined"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Modal": {
      "module": "ModalModule",
      "selector": "bb-modal-ui",
      "description": "Component that displays a modal window. ### Controlling components with overflow/z-index If you have nested modals, dropdowns or select components, add (or remove) the property `container=\"body\"` on your topmost component. You may have to toggle around depending on your setup or if your modal/dropdown/select has overflow. Alternatively, you can also add the `.modal-overflow` class by doing: `[modalOptions]=\"{ modalDialogClass: 'modal-overflow' }\"`.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-modal--docs",
      "inputs": {
        "aria-describedby": {
          "type": "string | undefined",
          "description": "Set aria-describedby with an element id that contains a detailed description about the modal."
        },
        "aria-labelledby": {
          "type": "string | undefined",
          "description": "Set aria-labelledby with an element id that contains a brief label about the modal. By default is takes the modal heading."
        },
        "isOpen": {
          "type": "boolean",
          "description": "The flag to show the dialog window. Defaults to 'false'."
        },
        "modalOptions": {
          "type": "NgbModalOptions",
          "description": "Dialog options inherited from https://ng-bootstrap.github.io/#/components/modal/api#NgbModalOptions. Defaults to an empty object.",
          "default": "{}"
        },
        "moneyProtectionBannerClasses": {
          "type": "string",
          "description": "Custom class to be assigned for money protection banner inside modal",
          "default": "''"
        },
        "role": {
          "type": "string",
          "description": "Customize the ARIA role this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'alertdialog'&quot; if it requires immediate attention of the user. Defaults to 'dialog'.",
          "default": "'dialog'"
        },
        "showMoneyProtectionBanner": {
          "type": "boolean",
          "description": "The flag to show money protection insurance banner on top of the modal. In order to see banner you will need to configure BB_MONEY_PROTECTION_BANNER_CONFIG_TOKEN to provide component to render in banner content outlet.",
          "default": "false"
        }
      },
      "outputs": {
        "cancel": {
          "type": "EventEmitter",
          "description": "The event that's fired after cancel button is pressed. Can be used with (click)=&quot;dialogRef.onCancel()&quot; where dialogRef is a templateRef on &lt;bb-dialog-ui #dialogRef /&gt;"
        },
        "confirm": {
          "type": "EventEmitter",
          "description": "The event that's fired after confirm button is pressed. Can be used with (click)=&quot;dialogRef.onConfirm()&quot; where dialogRef is a templateRef on &lt;bb-dialog-ui #dialogRef /&gt;"
        },
        "isOpenChange": {
          "type": "EventEmitter",
          "description": "Used for two way binding with the isOpen Input. If used, backdrop and esc dismiss cases will be handled automatically."
        }
      },
      "methods": {
        "closeModal": {
          "params": [
            {
              "name": "reason",
              "type": "string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "dismissModal": {
          "params": [
            {
              "name": "reason",
              "type": "string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getDismissReason": {
          "params": [
            {
              "name": "reason",
              "type": "ModalDismissReasons | string"
            }
          ],
          "returns": {
            "type": "ModalDismissReasons | string"
          }
        },
        "setConfirm": {
          "params": [
            {
              "name": "flag",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "trapKeyEvent": {
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "ModalFooter": {
      "module": "ModalFooterModule",
      "selector": "bb-modal-footer-ui",
      "inputs": {
        "cancelText": {
          "type": "string",
          "description": "The text of the cancel button."
        },
        "confirmText": {
          "type": "string",
          "description": "The text of the confirm button."
        }
      },
      "outputs": {
        "cancel": {
          "type": "EventEmitter",
          "description": "The event that's fired after cancel button is pressed. Can be used with (click)=&quot;dialogRef.onCancel()&quot; where dialogRef is a templateRef on &lt;bb-dialog-ui #dialogRef /&gt;"
        },
        "confirm": {
          "type": "EventEmitter",
          "description": "The event that's fired after confirm button is pressed. Can be used with (click)=&quot;dialogRef.onConfirm()&quot; where dialogRef is a templateRef on &lt;bb-dialog-ui #dialogRef /&gt;"
        }
      },
      "methods": {
        "onCancel": {
          "params": [
            {
              "name": "$event",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onConfirm": {
          "params": [
            {
              "name": "$event",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "ModalHeader": {
      "module": "ModalHeaderModule",
      "selector": "bb-modal-header-ui",
      "inputs": {
        "closeButtonAriaLabel": {
          "type": "any",
          "description": "Aria label for a &quot;close&quot; button",
          "default": "$localize`:@@bb-modal-header-ui.close-button.aria-label:Close modal window`"
        },
        "showClose": {
          "type": "boolean",
          "description": "Whether to display the close button. Defaults to true.",
          "default": "true"
        },
        "title": {
          "type": "string",
          "description": "Title text for the modal header. Defaults to empty string.",
          "default": "''"
        }
      },
      "outputs": {
        "close": {
          "type": "EventEmitter",
          "description": "The event emitted when the modal header close button is clicked."
        }
      },
      "methods": {
        "onClose": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "ModeHeader": {
      "module": "ModeHeaderModule",
      "selector": "bb-mode-header-ui",
      "description": "Component that displays a mode header.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-mode-header--docs",
      "inputs": {
        "closeButtonAriaLabel": {
          "type": "string",
          "description": "The aria label to describe the close button to screen reader users."
        },
        "reverseTitleOrder": {
          "type": "boolean",
          "description": "Whether or not the order of title elements is reversed.",
          "default": "true"
        },
        "secondaryTitle": {
          "type": "string",
          "description": "The smaller, secondary title to display."
        },
        "showCloseButton": {
          "type": "boolean",
          "description": "Whether or not to show the close button. Defaults to true.",
          "default": "true"
        },
        "title": {
          "type": "string",
          "description": "The main title to display."
        }
      },
      "outputs": {
        "close": {
          "type": "EventEmitter",
          "description": "Event fired when the close button is clicked."
        }
      }
    },
    "MoneyProtectionDisclaimer": {
      "module": "MoneyProtectionDisclaimerModule",
      "selector": "bb-money-protection-disclaimer",
      "description": "Create a component that will add money protection disclaimer message. ```typescript const MoneyProtectionDisclaimerConfig: MoneyProtectionDisclaimerConfig = { messagePerStatus: {   [MoneyProtectionStatusEnum.Yes]: { message: 'is insured by the XYZ.' },  [MoneyProtectionStatusEnum.No]: { message: 'not insured by the XYZ.' },  [MoneyProtectionStatusEnum.NA]: { message: 'not available.' }, }, disclaimer: 'Products marked are not XYZ insured,not a deposit and may lose value', }; ``` Provide this component through providers at application level. ```typescript providers: [   {     provide: BB_MONEY_PROTECTION_STATUS_CONFIG_TOKEN,     useValue: MoneyProtectionDisclaimerConfig,   }, ] ``` At component level it can be used as ```typescript ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-money-protection-disclaimer--docs",
      "inputs": {
        "classes": {
          "type": "string"
        }
      }
    },
    "MoneyProtectionStatus": {
      "module": "MoneyProtectionStatusModule",
      "selector": "bb-money-protection-status",
      "description": "Create a component that will add money protection status at each account level. ```typescript const MoneyProtectionStatusConfig: MoneyProtectionStatusConfig = { messagePerStatus: {   [MoneyProtectionStatusEnum.Yes]: { message: 'is insured by the XYZ.' },  [MoneyProtectionStatusEnum.No]: { message: 'not insured by the XYZ.' },  [MoneyProtectionStatusEnum.NA]: { message: 'not available.' }, }, disclaimer: 'Products marked are not XYZ insured,not a deposit and may lose value', }; ``` Provide this component through providers at application level. ```typescript providers: [   {     provide: BB_MONEY_PROTECTION_STATUS_CONFIG_TOKEN,     useValue: MoneyProtectionStatusConfig,   }, ] ``` At component level it can be used as ```typescript ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-money-protection-status--docs",
      "inputs": {
        "classes": {
          "type": "string"
        },
        "insuredStatus": {
          "type": "MoneyProtectionStatusEnum"
        }
      }
    },
    "Notification": {
      "module": "NotificationModule",
      "selector": "bb-notification-ui",
      "description": "Component that displays a notification. ### Usage Notification component can be rendered with `NotificationService` Below is an example of this this will look like: ```typescript @Component({    standalone: true,    selector: 'bb-some-component',    template: '',    imports: [NotificationModule],  })  export class SomeComponent {    notificationService = inject(NotificationService);    showNotification() {      this.notificationService.showNotification({        header: 'This is the header of notification',        message: 'This is the message of notification',      });    }  } ``` ### Usage with NotificationService NotificationComponent allows providing header and message as templates. Below is an example of what a component with might look like: ```typescript @Component({    standalone: true,    selector: 'bb-some-component',    template: '              Template header                    This is an html message message template          ',    imports: [NotificationModule],  })  export class SomeComponent {   @ViewChild('headerTml', { static: true }) headerTml: TemplateRef | undefined;   @ViewChild('messageTemplate', { static: true }) messageTemplate: TemplateRef | undefined;    notificationService = inject(NotificationService);    showNotification() {      this.notificationService.showNotification({        header: this.headerTml,        message: this.messageTemplate,      });    }  } ``` ### Known issues: #### Focus event of any element will interrupt VO readout of notification. Due to the fact that notifications container is using `aria-live=\"polite\"` and `role=\"status\"` notifications can get interrupted with any other event. Example: - User opens a modal - After modal is closed, notification is shown - VO will try to announce notification - Modal puts focus back to button that triggered it. - VO is interrupted and starts announcing button text **Possible solution** is to delay notification render with `setTimeout` or any other possible solution in streams.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-notification--docs",
      "inputs": {
        "animation": {
          "type": "boolean",
          "description": "If true, notification opening and closing will be animated. Animation is triggered only when the .hide() or .show() functions are called."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the notification should focused when rendered.",
          "default": "false"
        },
        "closeAction": {
          "type": "Function",
          "description": "The callback function for the manually close event."
        },
        "dismissible": {
          "type": "boolean",
          "description": "Whether the notification is dismissible. Defaults to true. If true then an additional class name is added to the wrapper div of the notification in the following format bb-notification--dismissible",
          "default": "true"
        },
        "header": {
          "type": "TemplateRef<any> | string",
          "description": "The header for the notification."
        },
        "headerContext": {
          "type": "any",
          "description": "The context for notification header template."
        },
        "hostAction": {
          "type": "Function",
          "description": "The callback function for the host click event."
        },
        "message": {
          "type": "TemplateRef<any> | string",
          "description": "The message template for the notification. Defaults to an empty string.",
          "default": "''"
        },
        "messageContext": {
          "type": "any",
          "description": "The context for notification message template."
        },
        "modifier": {
          "type": "NotificationType",
          "options": "'success' | 'info' | 'warning' | 'error' | 'alert'",
          "description": "The type modifier for the notification. Defaults to 'info' This property will be used to add additional class names to the wrapper div of the notification in the following format: bb-notification--&lt;&lt;modifier&gt;&gt;",
          "default": "'info'"
        },
        "primaryAction": {
          "type": "Function",
          "description": "A callback function for the primary action. Required for buttons on notification."
        },
        "primaryActionTemplate": {
          "type": "TemplateRef<any>",
          "description": "The primary action template for the notification."
        },
        "primaryActionText": {
          "type": "string",
          "description": "The text for the primary action button. Will throw an error if unset and primary action set."
        },
        "secondaryAction": {
          "type": "Function",
          "description": "A callback function for the secondary action. Required for buttons on notification."
        },
        "secondaryActionTemplate": {
          "type": "TemplateRef<any>",
          "description": "The secondary action template for the notification."
        },
        "secondaryActionText": {
          "type": "string",
          "description": "The text for the secondary action button. Will throw an error if unset and secondary action set."
        }
      },
      "outputs": {
        "close": {
          "type": "EventEmitter",
          "description": "Notification manually close event stream."
        }
      },
      "methods": {
        "beforeDestroy": {
          "returns": {
            "type": "void"
          }
        },
        "getHeaderTemplate": {
          "returns": {
            "type": "TemplateRef | undefined"
          }
        },
        "getMessageTemplate": {
          "returns": {
            "type": "TemplateRef | undefined"
          }
        },
        "hasButtonRow": {
          "returns": {
            "type": "boolean"
          }
        },
        "hasPrimaryAction": {
          "returns": {
            "type": "boolean"
          }
        },
        "hasSecondaryAction": {
          "returns": {
            "type": "boolean"
          }
        },
        "onKeyEvent": {
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onNotificationClick": {
          "returns": {
            "type": "void"
          }
        },
        "onNotificationClose": {
          "returns": {
            "type": "void"
          }
        },
        "onPrimaryPress": {
          "returns": {
            "type": "void"
          }
        },
        "onSecondaryPress": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "OptionList": {
      "module": "OptionListModule",
      "selector": "bb-option-list-ui",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-option-list--docs",
      "inputs": {
        "columns": {
          "type": "OptionListColumns",
          "options": "'1' | '2' | '3'",
          "description": "Number of columns for displaying the buttons (one, two or three).",
          "default": "1"
        },
        "mode": {
          "type": "OptionListMode",
          "options": "'radio' | 'checkbox'",
          "description": "Selection mode for the option list (radio or checkbox).",
          "default": "'radio'"
        },
        "options": {
          "type": "OptionListItem[]",
          "description": "List of option buttons to display. Validates the number of options (2-9).",
          "optional": false
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "isSelected": {
          "description": "Determines whether a value is selected.",
          "params": [
            {
              "name": "value",
              "type": "string | boolean"
            }
          ],
          "returns": {
            "type": "boolean"
          }
        },
        "onButtonBlur": {
          "description": "Handles blur on a button.",
          "params": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onButtonFocus": {
          "description": "Handles focus on a button.",
          "params": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "description": "Set disable state for the host control",
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "updateValue": {
          "description": "Updates the selected value for the option list.",
          "params": [
            {
              "name": "selectedValue",
              "type": "string | boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "description": "Implements the value update for the control",
          "params": [
            {
              "name": "inputValue",
              "type": "string[] | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Paginator": {
      "module": "PaginatorModule",
      "selector": "bb-pagination-ui",
      "description": "A component that displays page numbers and allows to customize them in several ways.",
      "inputs": {
        "boundaryLinks": {
          "type": "boolean",
          "description": "If true, the &quot;First&quot; and &quot;Last&quot; page links are shown. Defaults to false.",
          "default": "false"
        },
        "directionLinks": {
          "type": "boolean",
          "description": "If true, the &quot;Next&quot; and &quot;Previous&quot; page links are shown. Defaults to false.",
          "default": "false"
        },
        "itemsPerPage": {
          "type": "number",
          "description": "The number of items per page.",
          "default": "10"
        },
        "maxNavPages": {
          "type": "number",
          "description": "The maximum number of pages to display.",
          "default": "5"
        },
        "page": {
          "type": "number",
          "description": "The current page. bb-paginator-ui is 0-indexed, but ngb-pagination is 1-indexed. Corrects input by adding 1 internally.",
          "default": "1"
        },
        "totalItems": {
          "type": "number",
          "description": "The number of items in your paginated collection. Note, that this is not the number of pages. Page numbers are calculated dynamically based on totalItems and itemsPerPage.",
          "default": "0"
        }
      },
      "outputs": {
        "pageChange": {
          "type": "EventEmitter<number>",
          "description": "An event fired when the page is changed. Will fire only if collection size is set and all values are valid. Event payload is the number of the newly selected page. bb-paginator-ui is 0-indexed, but ngb-pagination is 1-indexed. Corrects output by subtracting 1 internally."
        }
      },
      "methods": {
        "onPageChange": {
          "params": [
            {
              "name": "page",
              "type": "number"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "PaymentCard": {
      "module": "PaymentCardModule",
      "selector": "bb-payment-card-ui",
      "description": "A component that displays card of any vendor that can be used as a form of payment.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-payment-card--docs",
      "inputs": {
        "displayEmblem": {
          "type": "boolean",
          "description": "Display Backbase logo on the card.",
          "default": "true"
        },
        "displayOverlay": {
          "type": "boolean",
          "description": "Display card overlay in the card. Defaults to false.",
          "default": "false"
        },
        "imageSrc": {
          "type": "string",
          "description": "Configuration to pass a link or (base64, svg) image to be used as the background image of the card. Defaults to undefined."
        },
        "overlayIcon": {
          "type": "\"access-time\" | \"lock\" | \"not-interested\" | \"remove-circle-outline\" | \"warning\"",
          "description": "Overlay icon to be displayed on the card. Possible values: 'access-time', 'lock', 'not-interested', 'remove-circle-outline', 'warning'. Defaults to undefined."
        },
        "overlayText": {
          "type": "string",
          "description": "Overlay status to be displayed on the card. Defaults to undefined."
        },
        "paymentCard": {
          "type": "PaymentCard",
          "description": "Payment card data."
        },
        "paymentCardNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the card number should be formatted. Defaults to the following format: Example :{ length: 16, maskRange: [0, 12], segments: 4, }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "size": {
          "type": "\"sm\" | \"md\"",
          "description": "Defines the size of the card. Small cards show no content. Defaults to 'md'.",
          "default": "PaymentCardSizes.MD"
        },
        "vertical": {
          "type": "boolean | undefined",
          "description": "Display the card in a vertical orientation. Defaults to false"
        }
      }
    },
    "PeriodSelector": {
      "module": "PeriodSelectorModule",
      "selector": "bb-period-selector-ui",
      "description": "Component that selects a period.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-period-selector--docs",
      "inputs": {
        "period": {
          "type": "PeriodSize",
          "description": "Period step. Defaults to 'month'.",
          "default": "'month'"
        },
        "periodEnd": {
          "type": "Date",
          "description": "End date of the period."
        },
        "periodFormatters": {
          "type": "PeriodFormatters",
          "description": "Custom date period formatter. Accepts formatters in the form of: Example : {    title?: (date: Date) =&gt; string;    start?: (date: Date) =&gt; string;    end?: (date: Date) =&gt; string;  }"
        },
        "periodStart": {
          "type": "Date",
          "description": "Start date of the period."
        }
      },
      "outputs": {
        "periodChange": {
          "type": "EventEmitter<Period>",
          "description": "Emits an event when the period is changed."
        }
      },
      "methods": {
        "changePeriod": {
          "params": [
            {
              "name": "next",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "ProductItemBase": {
      "module": "ProductItemBaseModule",
      "description": "Base component for product items.",
      "inputs": {
        "active": {
          "type": "boolean",
          "description": "Whether the card should have a check icon. Defaults to true.",
          "default": "true"
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the card should be marked as favourite. Defaults to false.",
          "default": "false"
        },
        "favoriteIconColor": {
          "type": "string",
          "description": "The color of the favourite icon when favorite=true. Defaults to primary.",
          "default": "'primary'"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether the amount and currency value should be highlighted."
        },
        "productDetailsInfo": {
          "type": "Record<string | any>",
          "description": "The product details information."
        },
        "productNumber": {
          "type": "string",
          "description": "The product number."
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted. Defaults to the following format: { length: 16, maskRange: [0, 12], segments: 4 }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "title": {
          "type": "string",
          "description": "The card title."
        }
      }
    },
    "ProductItemBasicAccount": {
      "module": "ProductItemBasicAccountModule",
      "selector": "bb-product-item-basic-account-ui",
      "description": "A component that renders a styled-container or card for basic account.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-product-item-basic-account--docs",
      "inputs": {
        "amount": {
          "type": "number",
          "description": "The card amount value."
        },
        "balanceLabel": {
          "type": "string",
          "description": "The text to be placed above the amount."
        },
        "balanceLabelForSecondaryAmount": {
          "type": "string",
          "description": "The text to be placed above the amount."
        },
        "bankBranchCode": {
          "type": "string",
          "description": "Branch code of a bank."
        },
        "currency": {
          "type": "string",
          "description": "The card currency."
        },
        "moneyProtectionStatus": {
          "type": "MoneyProtectionStatusEnum",
          "description": "MoneyProtectionStatus can be Yes, No or NA"
        },
        "moneyProtectionStatusClasses": {
          "type": "string",
          "description": "Allows to add classes to status of money protection"
        },
        "secondaryAmount": {
          "type": "number",
          "description": "The card secondary amount value.(e.g. Available amount is primary and booked balance is secondary)."
        },
        "selected": {
          "type": "boolean",
          "description": "Whether the card is selected. This removes any check mark on the item when active=true. Defaults to false.",
          "default": "false"
        },
        "showCurrencySymbol": {
          "type": "boolean",
          "description": "Whether the item should show the currency symbol. Defaults to true.",
          "default": "true"
        },
        "status": {
          "type": "AccountStatus",
          "options": "'closed' | 'inactive' | 'active'",
          "description": "The current account status. Accepts closed, inactive or active."
        },
        "type": {
          "type": "string",
          "description": "The type of icon to be displayed when selected=true."
        },
        "active": {
          "type": "boolean",
          "description": "Whether the card should have a check icon. Defaults to true.",
          "default": "true"
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the card should be marked as favourite. Defaults to false.",
          "default": "false"
        },
        "favoriteIconColor": {
          "type": "string",
          "description": "The color of the favourite icon when favorite=true. Defaults to primary.",
          "default": "'primary'"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether the amount and currency value should be highlighted."
        },
        "productDetailsInfo": {
          "type": "Record<string | any>",
          "description": "The product details information."
        },
        "productNumber": {
          "type": "string",
          "description": "The product number."
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted. Defaults to the following format: { length: 16, maskRange: [0, 12], segments: 4 }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "title": {
          "type": "string",
          "description": "The card title."
        }
      }
    },
    "ProductItemCreditCard": {
      "module": "ProductItemCreditCardModule",
      "selector": "bb-product-item-credit-card-ui",
      "description": "A component that renders a styled-container or card for credit card.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-product-item-credit-card--docs",
      "inputs": {
        "amount": {
          "type": "number",
          "description": "The card amount value."
        },
        "currency": {
          "type": "string",
          "description": "The card currency."
        },
        "mainSectionAmount": {
          "type": "number",
          "description": "The card additional main section amount value."
        },
        "mainSectionCurrency": {
          "type": "string",
          "description": "The card additional main section currency."
        },
        "mainSectionTitle": {
          "type": "string",
          "description": "The card additional main section amount value."
        },
        "moneyProtectionStatus": {
          "type": "MoneyProtectionStatusEnum",
          "description": "MoneyProtectionStatus can be Yes, No or NA"
        },
        "moneyProtectionStatusClasses": {
          "type": "string",
          "description": "Allows to add classes to status of money protection"
        },
        "secondarySectionAmount": {
          "type": "number",
          "description": "The card additional secondary section amount value."
        },
        "secondarySectionCurrency": {
          "type": "string",
          "description": "The card additional secondary section currency."
        },
        "secondarySectionTitle": {
          "type": "string",
          "description": "The card additional secondary section amount value."
        },
        "active": {
          "type": "boolean",
          "description": "Whether the card should have a check icon. Defaults to true.",
          "default": "true"
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the card should be marked as favourite. Defaults to false.",
          "default": "false"
        },
        "favoriteIconColor": {
          "type": "string",
          "description": "The color of the favourite icon when favorite=true. Defaults to primary.",
          "default": "'primary'"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether the amount and currency value should be highlighted."
        },
        "productDetailsInfo": {
          "type": "Record<string | any>",
          "description": "The product details information."
        },
        "productNumber": {
          "type": "string",
          "description": "The product number."
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted. Defaults to the following format: { length: 16, maskRange: [0, 12], segments: 4 }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "title": {
          "type": "string",
          "description": "The card title."
        }
      }
    },
    "ProductItemCurrentAccount": {
      "module": "ProductItemCurrentAccountModule",
      "selector": "bb-product-item-current-account-ui",
      "description": "A component that renders a styled-container or card for current account.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-product-item-current-account--docs",
      "inputs": {
        "amount": {
          "type": "number",
          "description": "The card amount value."
        },
        "currency": {
          "type": "string",
          "description": "The card currency."
        },
        "mainSectionAmount": {
          "type": "number",
          "description": "The card additional main section amount value."
        },
        "mainSectionCurrency": {
          "type": "string",
          "description": "The card additional main section currency."
        },
        "mainSectionTitle": {
          "type": "string",
          "description": "The card additional main section amount value."
        },
        "moneyProtectionStatus": {
          "type": "MoneyProtectionStatusEnum",
          "description": "moneyProtectionStatus can be Yes, No or NA"
        },
        "moneyProtectionStatusClasses": {
          "type": "string",
          "description": "Allows to add classes to status of money protection"
        },
        "secondarySectionAmount": {
          "type": "number",
          "description": "The card additional secondary section amount value."
        },
        "secondarySectionCurrency": {
          "type": "string",
          "description": "The card additional secondary section currency."
        },
        "secondarySectionTitle": {
          "type": "string",
          "description": "The card additional secondary section amount value."
        },
        "active": {
          "type": "boolean",
          "description": "Whether the card should have a check icon. Defaults to true.",
          "default": "true"
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the card should be marked as favourite. Defaults to false.",
          "default": "false"
        },
        "favoriteIconColor": {
          "type": "string",
          "description": "The color of the favourite icon when favorite=true. Defaults to primary.",
          "default": "'primary'"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether the amount and currency value should be highlighted."
        },
        "productDetailsInfo": {
          "type": "Record<string | any>",
          "description": "The product details information."
        },
        "productNumber": {
          "type": "string",
          "description": "The product number."
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted. Defaults to the following format: { length: 16, maskRange: [0, 12], segments: 4 }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "title": {
          "type": "string",
          "description": "The card title."
        }
      }
    },
    "ProductItemDebitCard": {
      "module": "ProductItemDebitCardModule",
      "selector": "bb-product-item-debit-card-ui",
      "description": "A component that renders a styled-container or card for debit card.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-product-item-debit-card--docs",
      "inputs": {
        "moneyProtectionStatus": {
          "type": "MoneyProtectionStatusEnum",
          "description": "moneyProtectionStatus can be Yes, No or NA"
        },
        "moneyProtectionStatusClasses": {
          "type": "string",
          "description": "Allows to add classes to status of money protection"
        },
        "active": {
          "type": "boolean",
          "description": "Whether the card should have a check icon. Defaults to true.",
          "default": "true"
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the card should be marked as favourite. Defaults to false.",
          "default": "false"
        },
        "favoriteIconColor": {
          "type": "string",
          "description": "The color of the favourite icon when favorite=true. Defaults to primary.",
          "default": "'primary'"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether the amount and currency value should be highlighted."
        },
        "productDetailsInfo": {
          "type": "Record<string | any>",
          "description": "The product details information."
        },
        "productNumber": {
          "type": "string",
          "description": "The product number."
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted. Defaults to the following format: { length: 16, maskRange: [0, 12], segments: 4 }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "title": {
          "type": "string",
          "description": "The card title."
        }
      }
    },
    "ProductItemInvestmentAccount": {
      "module": "ProductItemInvestmentAccountModule",
      "selector": "bb-product-item-investment-account-ui",
      "description": "A component that renders a styled-container or card for investment account.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-product-item-investment-account--docs",
      "inputs": {
        "amount": {
          "type": "number",
          "description": "The card amount value."
        },
        "currency": {
          "type": "string",
          "description": "The card currency."
        },
        "moneyProtectionStatus": {
          "type": "MoneyProtectionStatusEnum",
          "description": "moneyProtectionStatus can be Yes, No or NA"
        },
        "moneyProtectionStatusClasses": {
          "type": "string",
          "description": "Allows to add classes to status of money protection"
        },
        "active": {
          "type": "boolean",
          "description": "Whether the card should have a check icon. Defaults to true.",
          "default": "true"
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the card should be marked as favourite. Defaults to false.",
          "default": "false"
        },
        "favoriteIconColor": {
          "type": "string",
          "description": "The color of the favourite icon when favorite=true. Defaults to primary.",
          "default": "'primary'"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether the amount and currency value should be highlighted."
        },
        "productDetailsInfo": {
          "type": "Record<string | any>",
          "description": "The product details information."
        },
        "productNumber": {
          "type": "string",
          "description": "The product number."
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted. Defaults to the following format: { length: 16, maskRange: [0, 12], segments: 4 }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "title": {
          "type": "string",
          "description": "The card title."
        }
      }
    },
    "ProductItemLoan": {
      "module": "ProductItemLoanModule",
      "selector": "bb-product-item-loan-ui",
      "description": "A component that renders a styled-container or card for loan.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-product-item-loan--docs",
      "inputs": {
        "amount": {
          "type": "number",
          "description": "The card amount value."
        },
        "currency": {
          "type": "string",
          "description": "The card currency."
        },
        "moneyProtectionStatus": {
          "type": "MoneyProtectionStatusEnum",
          "description": "moneyProtectionStatus can be Yes, No or NA"
        },
        "moneyProtectionStatusClasses": {
          "type": "string",
          "description": "Allows to add classes to status of money protection"
        },
        "active": {
          "type": "boolean",
          "description": "Whether the card should have a check icon. Defaults to true.",
          "default": "true"
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the card should be marked as favourite. Defaults to false.",
          "default": "false"
        },
        "favoriteIconColor": {
          "type": "string",
          "description": "The color of the favourite icon when favorite=true. Defaults to primary.",
          "default": "'primary'"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether the amount and currency value should be highlighted."
        },
        "productDetailsInfo": {
          "type": "Record<string | any>",
          "description": "The product details information."
        },
        "productNumber": {
          "type": "string",
          "description": "The product number."
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted. Defaults to the following format: { length: 16, maskRange: [0, 12], segments: 4 }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "title": {
          "type": "string",
          "description": "The card title."
        }
      }
    },
    "ProductItemSavingsAccount": {
      "module": "ProductItemSavingsAccountModule",
      "selector": "bb-product-item-savings-account-ui",
      "description": "A component that renders a styled-container or card for savings account.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-product-item-savings-account--docs",
      "inputs": {
        "amount": {
          "type": "number",
          "description": "The card amount value."
        },
        "currency": {
          "type": "string",
          "description": "The card currency."
        },
        "mainSectionAmount": {
          "type": "number",
          "description": "The card additional main section amount value."
        },
        "mainSectionCurrency": {
          "type": "string",
          "description": "The card additional main section currency."
        },
        "mainSectionTitle": {
          "type": "string",
          "description": "The card additional main section amount value."
        },
        "moneyProtectionStatus": {
          "type": "MoneyProtectionStatusEnum",
          "description": "MoneyProtectionStatus can be Yes, No or NA"
        },
        "moneyProtectionStatusClasses": {
          "type": "string",
          "description": "Allows to add classes to status of money protection"
        },
        "active": {
          "type": "boolean",
          "description": "Whether the card should have a check icon. Defaults to true.",
          "default": "true"
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the card should be marked as favourite. Defaults to false.",
          "default": "false"
        },
        "favoriteIconColor": {
          "type": "string",
          "description": "The color of the favourite icon when favorite=true. Defaults to primary.",
          "default": "'primary'"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether the amount and currency value should be highlighted."
        },
        "productDetailsInfo": {
          "type": "Record<string | any>",
          "description": "The product details information."
        },
        "productNumber": {
          "type": "string",
          "description": "The product number."
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted. Defaults to the following format: { length: 16, maskRange: [0, 12], segments: 4 }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "title": {
          "type": "string",
          "description": "The card title."
        }
      }
    },
    "ProductItemTermDeposit": {
      "module": "ProductItemTermDepositModule",
      "selector": "bb-product-item-term-deposit-ui",
      "description": "A component that renders a styled-container or card for term deposit.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-product-item-term-deposit--docs",
      "inputs": {
        "amount": {
          "type": "number",
          "description": "The card amount value."
        },
        "currency": {
          "type": "string",
          "description": "The card currency."
        },
        "mainSectionAmount": {
          "type": "number",
          "description": "The card additional main section amount value."
        },
        "mainSectionCurrency": {
          "type": "string",
          "description": "The card additional main section currency."
        },
        "mainSectionTitle": {
          "type": "string",
          "description": "The card additional main section amount value."
        },
        "moneyProtectionStatus": {
          "type": "MoneyProtectionStatusEnum",
          "description": "MoneyProtectionStatus can be Yes, No or NA"
        },
        "moneyProtectionStatusClasses": {
          "type": "string",
          "description": "Allows to add classes to status of money protection"
        },
        "active": {
          "type": "boolean",
          "description": "Whether the card should have a check icon. Defaults to true.",
          "default": "true"
        },
        "favorite": {
          "type": "boolean",
          "description": "Whether the card should be marked as favourite. Defaults to false.",
          "default": "false"
        },
        "favoriteIconColor": {
          "type": "string",
          "description": "The color of the favourite icon when favorite=true. Defaults to primary.",
          "default": "'primary'"
        },
        "highlight": {
          "type": "boolean",
          "description": "Whether the amount and currency value should be highlighted."
        },
        "productDetailsInfo": {
          "type": "Record<string | any>",
          "description": "The product details information."
        },
        "productNumber": {
          "type": "string",
          "description": "The product number."
        },
        "productNumberFormat": {
          "type": "PaymentCardNumberFormat",
          "description": "Configuration of how the product number should be formatted. Defaults to the following format: { length: 16, maskRange: [0, 12], segments: 4 }",
          "default": "DefaultPaymentCardNumberFormat"
        },
        "title": {
          "type": "string",
          "description": "The card title."
        }
      }
    },
    "ProductSelector": {
      "module": "ProductSelectorModule",
      "selector": "bb-product-selector-ui",
      "description": "A dropdown component that displays items in a pre-defined format. Every item from the list in the custom templates need to match the following requirements: * It should have a `role=\"option\"` attribute for detection by Screen Reader like option. * It should have a `#listItem` hash tag for keyBoard accessibility (navigate with keyUp/keyDown) * It should use a `div` HTML element instead of a button for its host HTML element * It should have a `tabindex=\"0\"` Here is a example of custom tempates for the list items: ```            ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-product-selector--docs",
      "inputs": {
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element in the selector."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "ariaLabelForDropdown": {
          "type": "string",
          "description": "Set ariaLabelForDropdown with a text that explains what dropdown component is about",
          "default": "'A dropdown component with a product list'"
        },
        "ariaLabelForToggleButton": {
          "type": "string",
          "description": "Set ariaLabelForToggleButton with a text that explains what a toggle button is about",
          "default": "'A toggle button for a product list'"
        },
        "autoClose": {
          "type": "boolean",
          "description": "Whether the dropdown should be closed when clicking one of dropdown items or pressing ESC. Defaults to true.",
          "default": "true"
        },
        "container": {
          "type": "string | \"body\"",
          "description": "Specifies which element the dropdown should be appended to.",
          "default": "''"
        },
        "id": {
          "type": "string",
          "description": "A unique identifier for the product-selector toggle element."
        },
        "isOpen": {
          "type": "boolean",
          "description": "Open/close state of dropDown menu"
        },
        "position": {
          "type": "Placement | PlacementArray",
          "description": "The position of the dropdown, position will be picked in order of feasibility.",
          "default": "['bottom-end', 'bottom-start', 'top-end', 'top-start']"
        }
      },
      "methods": {
        "close": {
          "returns": {
            "type": "void"
          }
        },
        "focusItem": {
          "returns": {
            "type": "void"
          }
        },
        "onBlur": {
          "description": "Event handler for blur dropdown menu",
          "returns": {
            "type": "void"
          }
        },
        "onClose": {
          "returns": {
            "type": "void"
          }
        },
        "onKeyEvent": {
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onOpenChange": {
          "description": "Event handler for change open/close state in dropdown menu",
          "params": [
            {
              "name": "$event",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "open": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Progressbar": {
      "module": "ProgressbarModule",
      "selector": "bb-progressbar-ui",
      "description": "Component that represents the progress of a task.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-progressbar--docs",
      "inputs": {
        "animated": {
          "type": "boolean",
          "description": "A flag indicating if the stripes of the progress bar should be animated. Defaults to false.",
          "default": "false"
        },
        "ariaLabel": {
          "type": "string",
          "description": "Accessible label for the progressbar.",
          "default": "'progress bar'"
        },
        "height": {
          "type": "string | undefined",
          "description": "Height of the progress bar. Can take values in px, em, rem."
        },
        "max": {
          "type": "number",
          "description": "Maximum value of the progressbar. Defaults to 100.",
          "default": "100"
        },
        "showValue": {
          "type": "boolean",
          "description": "A flag indicating if the current value should be displayed within the progressbar. Defaults to false.",
          "default": "false"
        },
        "striped": {
          "type": "boolean",
          "description": "A flag indicating if the progress bar should be striped. Defaults to false.",
          "default": "false"
        },
        "type": {
          "type": "ProgressbarType | undefined",
          "options": "'primary' | 'success' | 'info' | 'warning' | 'danger'",
          "description": "Type of progress bar. Takes the values primary, success, info, warning &amp; danger."
        },
        "value": {
          "type": "number",
          "description": "Current value of the progressbar. Should always be less or equal to max. Defaults to 0.",
          "default": "0"
        }
      }
    },
    "ProgressItem": {
      "module": "ProgressItemModule",
      "selector": "bb-progress-item",
      "inputs": {
        "eventPayload": {
          "type": "IEventPayload",
          "description": "The progress initiated time in millseconds"
        },
        "progressTrackerHeaderTemplate": {
          "type": "TemplateRef<any> | undefined",
          "description": "The reference to a custom template for the Progress Tracker Item Header. Allows to completely override the way Progress Item Heading is displayed."
        },
        "progressTrackerItemTemplate": {
          "type": "TemplateRef<any> | undefined",
          "description": "The reference to a custom template for the Progress Tracker Item. Allows to completely override the way Progress Item is displayed."
        }
      },
      "methods": {
        "cancelItem": {
          "params": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "ProgressTracker": {
      "module": "ProgressTrackerModule",
      "selector": "bb-progress-tracker",
      "description": "A tracker component that tracks multiple ongoing or asynchronous processes on a page. It handles multiple ongoing process events so that you can trigger, cancel and/or destroy events on demand. It is easily extendable as you can you can extend the templates by passing your customised template as input bindings. Refer to examples for the implementation.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-progress-tracker--docs",
      "inputs": {
        "eventList": {
          "type": "IProgressTrackerConfig[]"
        },
        "isOpen": {
          "type": "boolean",
          "description": "Determines whether the Progress Tracker is opened or closed on render. This input property controls the state of the Progress Tracker. When set to true, the Progress Tracker will be opened by default. When set to false, it will be closed by default. Note: A toggle outside of the progress-tracker-container is not currently supported. Clicking on the toggle calls document:click which keeps the container closed. Defaults to false.",
          "default": "false"
        },
        "progressTrackerHeaderTemplate": {
          "type": "TemplateRef<any>",
          "description": "The reference to a custom template for the Progress Tracker Item Header. Allows to completely override the way Progress Tracker Item heading is displayed."
        },
        "progressTrackerItemTemplate": {
          "type": "TemplateRef<IProgressTrackerItemTemplateConfig>",
          "description": "The reference to a custom template for the Progress Tracker Item. Allows to completely override the way Progress Tracker Item is displayed."
        },
        "progressTrackerTemplate": {
          "type": "TemplateRef<IProgressTrackerTemplateConfig>",
          "description": "The reference to a custom template for the Progress Tracker Container. Allows to completely override the way Progress Tracker is displayed."
        }
      },
      "outputs": {
        "cancel": {
          "type": "EventEmitter"
        }
      }
    },
    "ProgressTrackerContainer": {
      "module": "ProgressTrackerContainerModule",
      "selector": "bb-progress-tracker-container",
      "inputs": {
        "eventList": {
          "type": "IProgressTrackerConfig[]"
        },
        "progressTrackerHeaderTemplate": {
          "type": "TemplateRef<any> | undefined",
          "description": "The reference to a custom template for the Progress Tracker Item Header. Allows to completely override the way Progress Tracker Item heading is displayed."
        },
        "progressTrackerItemTemplate": {
          "type": "TemplateRef<IProgressTrackerItemTemplateConfig> | undefined",
          "description": "The reference to a custom template for the Progress Tracker Item. Allows to completely override the way Progress Tracker Item is displayed."
        },
        "progressTrackerTemplate": {
          "type": "TemplateRef<IProgressTrackerTemplateConfig> | undefined",
          "description": "The reference to a custom template for the Progress Tracker Container. Allows to completely override the way Progress Tracker is displayed."
        },
        "show": {
          "type": "boolean",
          "description": "Controls the visibility of the Progress Tracker."
        }
      },
      "outputs": {
        "showChange": {
          "type": "EventEmitter"
        }
      },
      "methods": {
        "isShow": {
          "returns": {
            "type": "void"
          }
        },
        "onClick": {
          "params": [
            {
              "name": "targetElement",
              "type": "HTMLElement"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onEsc": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "RichTextEditor": {
      "module": "RichTextEditorModule",
      "selector": "bb-rich-text-editor-ui",
      "description": "Component that provides you input text with editing.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-rich-text-editor--docs",
      "inputs": {
        "actions": {
          "type": "RichTextEditorActions[]",
          "description": "Actions of the editor toolbar.",
          "default": "[\n    RichTextEditorActions.Bold,\n    RichTextEditorActions.Italic,\n    RichTextEditorActions.Underline,\n    RichTextEditorActions.Strike,\n    RichTextEditorActions.OrderedList,\n    RichTextEditorActions.UnorderedList,\n    RichTextEditorActions.Code,\n    RichTextEditorActions.Link,\n    RichTextEditorActions.Indent,\n  ]"
        },
        "actionsTooltipPlacement": {
          "type": "string",
          "description": "Placement of the action tooltip relative to the action button: auto | top | bottom | left | right. Defaults to 'auto'.",
          "default": "'auto'"
        },
        "counter": {
          "type": "boolean",
          "description": "Show/hide message length. Defaults to true.",
          "default": "true"
        },
        "maxLength": {
          "type": "any",
          "description": "The maxLength for the rich-text-editor component.",
          "default": "Infinity"
        },
        "minLength": {
          "type": "number",
          "description": "The minLength for the rich-text-editor component.",
          "default": "0"
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder for the rich-text-editor component. Defaults to an empty string.",
          "default": "''"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "callOnBlur": {
          "returns": {
            "type": "void"
          }
        },
        "callOnChange": {
          "returns": {
            "type": "void"
          }
        },
        "callOnFocus": {
          "returns": {
            "type": "void"
          }
        },
        "changedEditor": {
          "params": [
            {
              "name": "event",
              "type": "ContentChange"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "closeModal": {
          "returns": {
            "type": "void"
          }
        },
        "configureToolbar": {
          "returns": {
            "type": "void"
          }
        },
        "getMessageText": {
          "returns": {
            "type": "string"
          }
        },
        "labelClick": {
          "returns": {
            "type": "void"
          }
        },
        "onResult": {
          "returns": {
            "type": "void"
          }
        },
        "openLinkModal": {
          "returns": {
            "type": "void"
          }
        },
        "setActionTypes": {
          "returns": {
            "type": "void"
          }
        },
        "setSelectionUrl": {
          "returns": {
            "type": "void"
          }
        },
        "showCounter": {
          "returns": {
            "type": "boolean"
          }
        },
        "updateQuillContent": {
          "params": [
            {
              "name": "inputValue",
              "type": "string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "validate": {
          "params": [
            {
              "name": "control",
              "type": "AbstractControl"
            }
          ],
          "returns": {
            "type": "ValidationErrors | null"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "SearchBox": {
      "module": "SearchBoxModule",
      "selector": "bb-search-box-ui",
      "description": "Component that provides you a search input field. ### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - Set aria-describedby  with an element id that contains a detailed decription about the Search box.  - aria-label or  aria-labelledby can be used to display the label for search box. If  showSearch = true , searchLabel is discernible text for search button. If  showClear = true , clearLabel is discernible text for clear button.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-search-box--docs",
      "inputs": {
        "autocomplete": {
          "type": "string",
          "description": "The autocomplete attribute value. Defaults to off.",
          "default": "'off'"
        },
        "clearLabel": {
          "type": "string",
          "description": "The aria label used when the clear button is in focus.",
          "default": "'Clear'"
        },
        "containerAriaLabel": {
          "type": "string",
          "description": "The label of the container for the search input. When there are multiple search inputs on a page, a label should be assigned. Defaults to ''.",
          "default": "''"
        },
        "containerRole": {
          "type": "string",
          "description": "The role of the container for the search input. For non-landmarked search, please assign this a value. Defaults to 'search'.",
          "default": "'search'"
        },
        "maxLength": {
          "type": "string",
          "description": "The maximum length of the search text. Defaults to 140.",
          "default": "'140'"
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder text to display in the input.",
          "default": "''"
        },
        "searchLabel": {
          "type": "string",
          "description": "The aria label used when the search button is in focus.",
          "default": "'Search'"
        },
        "showClear": {
          "type": "boolean",
          "description": "Whether to show the clear button icon after the text. Defaults to false.",
          "default": "false"
        },
        "showSearch": {
          "type": "boolean",
          "description": "Whether to show the search button icon before the text. Defaults to false.",
          "default": "false"
        },
        "squareBorder": {
          "type": "boolean",
          "description": "The square border for search box. Defaults to false.",
          "default": "false"
        },
        "typeaheadOptions": {
          "type": "TypeaheadOptions<T> | undefined",
          "description": "The list of options to use when typeahead is available. See https://ng-bootstrap.github.io/#/components/typeahead/api#NgbTypeahead for the list of options."
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "clear": {
          "type": "EventEmitter<string>",
          "description": "Emits an event when the clear button is clicked."
        },
        "submit": {
          "type": "EventEmitter<string | boolean | Object | null>",
          "description": "Emits an event when a search is submitted."
        },
        "valueChange": {
          "type": "EventEmitter<any>",
          "description": "Emits an event when the value in the search box is changed."
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "focusEditableElement": {
          "returns": {
            "type": "void"
          }
        },
        "focusOnInputField": {
          "description": "Sets the focus on the input field. If the input field reference is defined, it calls the `focus()` method on the native element.",
          "returns": {
            "type": "void"
          }
        },
        "getKeywordBySize": {
          "params": [
            {
              "name": "size",
              "type": "number | string"
            }
          ],
          "returns": {
            "type": "string"
          }
        },
        "getSizeByKeyword": {
          "params": [
            {
              "name": "keyword",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "isClearVisible": {
          "returns": {
            "type": "boolean"
          }
        },
        "onBlur": {
          "returns": {
            "type": "void"
          }
        },
        "onClear": {
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "returns": {
            "type": "void"
          }
        },
        "onSelect": {
          "params": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onSubmit": {
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "SelectList": {
      "module": "SelectListModule",
      "selector": "bb-select-list-ui",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-select-list--docs",
      "inputs": {
        "filterEnabled": {
          "type": "boolean",
          "description": "Flag to determine if typeahead should be used to filter the items list. If enabled the items list can not be updated asynchonously as the filtering and the underlying data will get out of sync.",
          "default": "true"
        },
        "isOpen": {
          "type": "any"
        },
        "items": {
          "type": "T[]",
          "description": "A list of items to select from based on the input text.",
          "default": "[]"
        },
        "loading": {
          "type": "boolean",
          "description": "Flag to determine if the data in the list is loading",
          "default": "false"
        },
        "maxSelectedItems": {
          "type": "string",
          "description": "Maximum number of selected items, 'none' means unlimited",
          "default": "'none'"
        },
        "minTermLength": {
          "type": "number",
          "description": "Minimum number of characters required before searching for items",
          "default": "2"
        },
        "multiple": {
          "type": "boolean",
          "description": "Flag to determine if the list allows multiple selection.",
          "default": "false"
        },
        "placeholder": {
          "type": "string",
          "description": "Placeholder text to display in the input",
          "default": "''"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "clear": {
          "type": "EventEmitter",
          "description": "Emitter when clear is performed."
        },
        "search": {
          "type": "EventEmitter<string>",
          "description": "Emitter when search is performed. Outputs search term"
        },
        "valueChange": {
          "type": "",
          "description": "Output to capture value change event."
        },
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "onOpen": {
          "deprecated": true,
          "deprecationMessage": "Deprecated in ui-ang@12. To be marked as protected in ui-ang@14. No replacements.",
          "returns": {
            "type": "void"
          }
        },
        "onSearch": {
          "params": [
            {
              "name": "event",
              "type": "string | SearchPayload"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Stepper": {
      "module": "StepperModule",
      "selector": "bb-stepper-ui",
      "description": "Component that represents a navigation stepper.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-stepper--docs",
      "outputs": {
        "select": {
          "type": "EventEmitter<any>",
          "description": "Emits an event when a step's link is clicked."
        }
      },
      "methods": {
        "onClickHandler": {
          "params": [
            {
              "name": "data",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "StepperStep": {
      "module": "StepperStepModule",
      "selector": "bb-stepper-step-ui",
      "description": "Component that represents a single step that is a part of the stepper component.",
      "inputs": {
        "ariaLabel": {
          "type": "string",
          "description": "Represents step's area-label"
        },
        "data": {
          "type": "any",
          "description": "Represents step's data"
        },
        "isActive": {
          "type": "boolean",
          "description": "Marks step as active",
          "default": "false"
        },
        "isChecked": {
          "type": "boolean",
          "description": "Marks step as checked",
          "default": "false"
        },
        "isCurrent": {
          "type": "boolean",
          "description": "Marks step as current",
          "default": "false"
        },
        "label": {
          "type": "string",
          "description": "Represents step's label"
        },
        "stateLabel": {
          "type": "string",
          "description": "Represents step's state label"
        }
      }
    },
    "Switch": {
      "module": "SwitchModule",
      "selector": "bb-switch-ui",
      "description": "Component that provides you a switch input.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-switch--docs",
      "inputs": {
        "labelPosition": {
          "type": "LabelPosition",
          "options": "'left' | 'right'",
          "description": "Specifies the label position of the switch component. Defaults to left.",
          "default": "position.left"
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the input is read only. Defaults to false.",
          "default": "false"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "isLabelLeft": {
          "returns": {
            "type": "boolean"
          }
        },
        "isLabelRight": {
          "returns": {
            "type": "boolean"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "toggleSwitch": {
          "returns": {
            "type": "void"
          }
        },
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Tab": {
      "module": "TabModule",
      "selector": "bb-tab-ui",
      "description": "TabComponent represents Tab item that should be used inside tab group component",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-tab--docs",
      "inputs": {
        "disabled": {
          "type": "boolean",
          "description": "Flag to disable a tab. Defaults to 'false'.",
          "default": "false"
        }
      }
    },
    "TabGroup": {
      "module": "TabGroupModule",
      "selector": "bb-tab-group-ui",
      "description": "TabGroupComponent represents component that is used as a wrapper for tab item components. It tracks user interaction and notifies parent upon selection change",
      "inputs": {
        "initialSelection": {
          "type": "number | undefined",
          "description": "Setter (Input) for initial tab item selection"
        }
      },
      "outputs": {
        "select": {
          "type": "EventEmitter",
          "description": "Event (Output) that emits new value once tab item selection has changed. As a parameter it provides index of newly selected item"
        }
      },
      "methods": {
        "onClick": {
          "description": "Internal handler for clicks on tab items",
          "params": [
            {
              "name": "event",
              "type": "MouseEvent"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onKeyDown": {
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "index",
              "type": "number"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Textarea": {
      "module": "TextareaModule",
      "selector": "bb-textarea-ui",
      "description": "### Accessibility Current component provide option to pass needed accessibility attributes. You need to take care of properties that are required in your case :  - role  - aria-activedescendant  - aria-describedby  - aria-expanded  - aria-invalid  - aria-label  - aria-labelledby  - aria-owns Component that displays a text input.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-textarea--docs",
      "inputs": {
        "cols": {
          "type": "number",
          "description": "The number of columns to display in the textarea."
        },
        "maxLength": {
          "type": "number",
          "description": "The maxLength for the text input."
        },
        "minLength": {
          "type": "number",
          "description": "The minLength for the text input."
        },
        "placeholder": {
          "type": "string",
          "description": "The placeholder for the text input. Defaults to an empty string.",
          "default": "''"
        },
        "readonly": {
          "type": "boolean",
          "description": "Whether the text input is readonly.",
          "default": "false"
        },
        "rows": {
          "type": "number",
          "description": "The number of rows to display in the textarea."
        },
        "showCharCounter": {
          "type": "boolean",
          "description": "Shows character counter based on maxLength.",
          "default": "false"
        },
        "wrap": {
          "type": "\"soft\" | \"hard\"",
          "description": "Indicates how the control wraps text."
        },
        "aria-activedescendant": {
          "type": "string",
          "description": "It identifies the currently active element when focus is on a composite widget, combobox, textbox, group, or application."
        },
        "aria-autocomplete": {
          "type": "string",
          "description": "It indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox."
        },
        "aria-controls": {
          "type": "string",
          "description": "When an interactive or input control has an impact on another element in a document or application, the aria-control indicates which element or elements the user interface widget controls."
        },
        "aria-describedby": {
          "type": "string",
          "description": "Set aria-describedby  with an element id that contains a detailed decription of the widget. It is used to establish a relationship between widgets or groups and the text that describes them."
        },
        "aria-expanded": {
          "type": "string",
          "description": "The aria-expanded attribute is set on an element to indicate if a control is expanded or collapsed, and whether or not its child elements are displayed or hidden."
        },
        "aria-invalid": {
          "type": "string",
          "description": "The aria-invalid state indicates the entered value is not in a format expected by the application."
        },
        "aria-label": {
          "type": "string",
          "description": "Accessible label when control does not need to render label tag."
        },
        "aria-labelledby": {
          "type": "string",
          "description": "The aria-labelledby property enables authors to reference other elements on the page to define an accessible name. This is useful when using elements that don't have native support for associating elements to provide an accessible name."
        },
        "aria-owns": {
          "type": "string",
          "description": "The aria-owns attribute identifies an element (or elements) in order to define a visual, functional, or contextual relationship between a parent and its child elements when the DOM hierarchy cannot be used to represent the relationship."
        },
        "autofocus": {
          "type": "boolean",
          "description": "Whether the text input should be auto-focused when shown.",
          "default": "false"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether the component is mutable or clickable. Defaults to false.",
          "default": "false"
        },
        "id": {
          "type": "string",
          "description": "The id for the input. Defaults to unique string. Used to map the label to the input."
        },
        "inputClassName": {
          "type": "string",
          "description": "Class names that must be included on the &lt;input&gt; form control"
        },
        "label": {
          "type": "string",
          "description": "The label for the input. Defaults to an empty string.",
          "default": "''"
        },
        "required": {
          "type": "boolean",
          "description": "Whether the input is required. Defaults to false.",
          "default": "false"
        },
        "role": {
          "type": "string | undefined",
          "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed."
        },
        "size": {
          "type": "number | string",
          "description": "Configure the minimum width to fit the specified number of characters that should fit for HTML &lt;input&gt;"
        }
      },
      "outputs": {
        "blur": {
          "type": "EventEmitter",
          "description": "An event emitter for on blur actions."
        },
        "focus": {
          "type": "EventEmitter",
          "description": "An event emitter for on focus actions."
        }
      },
      "methods": {
        "getSizeByKeyword": {
          "description": "Returns the `input` `size` value for a keyword, such as \"xxl\". Subclasses can choose to implement a custom mapping, which will be used to configure `size`.",
          "params": [
            {
              "name": "arg",
              "type": "any"
            }
          ],
          "returns": {
            "type": "number | undefined"
          }
        },
        "onBlur": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "$event",
              "type": "FocusEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onValueChange": {
          "params": [
            {
              "name": "newValue",
              "type": "Object | string"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerOnTouched": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "setDisabledState": {
          "params": [
            {
              "name": "isDisabled",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "writeValue": {
          "params": [
            {
              "name": "inputValue",
              "type": "Object | string | null"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Tracker": {
      "module": "TrackerModule",
      "selector": "bb-tracker-ui",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-tracker--docs",
      "inputs": {
        "countFn": {
          "type": "function",
          "description": "Custom counting function that overrides default behaviour."
        },
        "hideCount": {
          "type": "boolean",
          "description": "Whether segment count should be hidden. Defaults to 'false'.",
          "default": "false"
        },
        "progressAriaLabel": {
          "type": "string",
          "description": "Aria label attribute for active segment's progress element. Defaults to 'progress'.",
          "default": "'progress'"
        },
        "segmented": {
          "type": "boolean",
          "description": "Whether tracker is in segmented mode. Defaults to true.",
          "default": "true"
        },
        "separator": {
          "type": "string",
          "description": "Separator between count text and segment label. Applicable only to non-vertical mode. Defaults to '-'.",
          "default": "'-'"
        },
        "vertical": {
          "type": "boolean",
          "description": "Whether tracker is in vertical mode. Defaults to false.",
          "default": "false"
        }
      },
      "methods": {
        "calculateCount": {
          "description": "Calculates count text of the segment.",
          "params": [
            {
              "name": "segment",
              "type": "TrackerSegmentComponent | null"
            },
            {
              "name": "segmentIndex",
              "type": "number | null"
            }
          ],
          "returns": {
            "type": "string"
          }
        },
        "stateChanged": {
          "description": "Marks the component to be change detected.",
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "TrackerSegment": {
      "module": "TrackerSegmentModule",
      "selector": "bb-tracker-segment-ui",
      "inputs": {
        "ariaLabel": {
          "type": "string",
          "description": "Aria label for the segment."
        },
        "countText": {
          "type": "string",
          "description": "Sets custom count text."
        },
        "hideCount": {
          "type": "boolean",
          "description": "Whether segment count should be hidden. Defaults to 'false'",
          "default": "false"
        },
        "isActive": {
          "type": "boolean",
          "description": "Whether the segment is marked as active. Defaults to 'false'.",
          "default": "false"
        },
        "isCompleted": {
          "type": "boolean",
          "description": "Whether the segment is marked as completed. Defaults to 'false'.",
          "default": "false"
        },
        "label": {
          "type": "string",
          "description": "Label of the segment.",
          "default": "''"
        },
        "progress": {
          "type": "number",
          "description": "Progress level of the segment. Defaults to '0'.",
          "default": "0"
        },
        "separator": {
          "type": "string",
          "description": "Separator between count text and segment label. Applicable only to horizontal or linear mode. Defaults to '-'.",
          "default": "''"
        },
        "subtitle": {
          "type": "string",
          "description": "Optional subtitle for the segment."
        }
      }
    },
    "UniversalHeader": {
      "module": "UniversalHeaderModule",
      "selector": "bb-universal-header-ui",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-universal-header--docs",
      "inputs": {
        "backgroundColor": {
          "type": "UniversalHeaderBackgroundColor",
          "options": "'white' | 'no-background'",
          "description": "The universal header background color to display.",
          "default": "'white'"
        },
        "closeButton": {
          "type": "UniversalHeaderCloseButton",
          "description": "The universal header close button configuration."
        },
        "logo": {
          "type": "UniversalHeaderLogo",
          "description": "The universal header logo configuration."
        },
        "title": {
          "type": "UniversalHeaderTitle",
          "description": "The universal header title configuration."
        }
      },
      "outputs": {
        "close": {
          "type": "EventEmitter<any>",
          "description": "The universal header close action."
        }
      }
    },
    "ValidationMessage": {
      "module": "ValidationMessageModule",
      "selector": "bb-validation-message-ui",
      "description": "Dynamic component that displays a control validation message dependence on validation."
    }
  },
  "directives": {
    "bbInfiniteScroll": {
      "module": "bbInfiniteScrollModule",
      "directive": "bbInfiniteScrollDirective",
      "inputs": {
        "alwaysCallback": {
          "type": "boolean",
          "default": "false"
        },
        "fromRoot": {
          "type": "boolean",
          "default": "false"
        },
        "horizontal": {
          "type": "boolean",
          "default": "false"
        },
        "immediateCheck": {
          "type": "boolean",
          "default": "false"
        },
        "infiniteScrollContainer": {
          "type": "any",
          "default": "null"
        },
        "infiniteScrollDisabled": {
          "type": "boolean",
          "default": "false"
        },
        "infiniteScrollDistance": {
          "type": "number",
          "default": "2"
        },
        "infiniteScrollThrottle": {
          "type": "number",
          "default": "150"
        },
        "infiniteScrollUpDistance": {
          "type": "number",
          "default": "1.5"
        },
        "scrollWindow": {
          "type": "boolean",
          "default": "true"
        }
      },
      "outputs": {
        "scrolled": {
          "type": "EventEmitter"
        },
        "scrolledUp": {
          "type": "EventEmitter"
        }
      },
      "methods": {
        "destroyScroller": {
          "returns": {
            "type": "void"
          }
        },
        "handleOnScroll": {
          "params": [
            {
              "type": "IInfiniteScrollAction"
            }
          ],
          "returns": {
            "type": "any"
          }
        },
        "setup": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Button": {
      "module": "ButtonModule",
      "directive": "bbButton",
      "description": "Directive for styling button. ### Color background mode In case the button is located inside a parent HTML element with a darker background, consider using an `On Color` palette. For the reference see the `On Color` example above in the `Interactive demo` section. To enable the `On Color` palette one has to add a `.btn-on-color` class to the parent HTML element like this: ```        ...      ``` The class does not have to be applied to a direct parent of a button component: all buttons under this container, no matter how deep, will be displayed in the `On Color` palette. `On Color` is supported only for `primary`, `secondary` and `link` buttons. The `bbButton` directive doesn't provide any specific properties for accessibility. In case of necessity add `aria-*` attributes to the `button` element.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-button--docs",
      "inputs": {
        "block": {
          "type": "boolean",
          "description": "The flag to indicate whether the button should fill the container that it is in. Defaults to 'false'.",
          "default": "false"
        },
        "buttonSize": {
          "type": "\"sm\" | \"md\"",
          "description": "Size of the button.",
          "default": "'md'"
        },
        "circle": {
          "type": "boolean",
          "description": "The flag to indicate whether the button should be in a circular shape. Defaults to 'false'. This will only work when there's only an icon inside the button without a text.",
          "default": "false"
        },
        "color": {
          "type": "ButtonColor | string",
          "options": "'primary' | 'info' | 'success' | 'warning' | 'danger' | 'secondary' | 'light' | 'dark' | 'link' | 'tertiary' | 'link-text' | 'link-text-light' | 'unstyled' | 'link-dark' | 'neutral'",
          "description": "The color for the button. Defaults to 'primary'. If a custom string used, then a css class is going to be added. The pattern is as follows: btn-customColor",
          "default": "'primary'"
        },
        "type": {
          "type": "ButtonType",
          "options": "'button' | 'submit' | 'reset'",
          "description": "Button's type atrribute with default value.",
          "default": "'button'"
        }
      }
    },
    "CollapsibleBody": {
      "module": "CollapsibleBodyModule",
      "directive": "bbCollapsibleBody"
    },
    "CollapsibleHeader": {
      "module": "CollapsibleHeaderModule",
      "directive": "bbCollapsibleHeader"
    },
    "ControlErrorContainer": {
      "module": "ControlErrorContainerModule",
      "directive": "bbControlErrorContainer"
    },
    "CustomGroupItemsHeader": {
      "module": "CustomGroupItemsHeaderModule",
      "directive": "bbCustomGroupItemsHeader"
    },
    "CustomLoadingTemplate": {
      "module": "CustomLoadingTemplateModule",
      "directive": "bbCustomLoadingTemplate"
    },
    "CustomModalBody": {
      "module": "CustomModalBodyModule",
      "directive": "bbCustomModalBody"
    },
    "CustomModalFooter": {
      "module": "CustomModalFooterModule",
      "directive": "bbCustomModalFooter"
    },
    "CustomModalHeader": {
      "module": "CustomModalHeaderModule",
      "directive": "bbCustomModalHeader"
    },
    "CustomMultiSelectedItemsLabel": {
      "module": "CustomMultiSelectedItemsLabelModule",
      "directive": "bbCustomMultiSelectedItemsLabel"
    },
    "CustomOptionItem": {
      "module": "CustomOptionItemModule",
      "directive": "bbCustomOptionItem"
    },
    "CustomOptionsHeader": {
      "module": "CustomOptionsHeaderModule",
      "directive": "bbCustomOptionsHeader"
    },
    "CustomProductItemBasicAccountDetailsFormatter": {
      "module": "CustomProductItemBasicAccountDetailsFormatterModule",
      "directive": "bbCustomProductItemBasicAccountDetailsFormatter"
    },
    "CustomProductItemBasicAccountTitle": {
      "module": "CustomProductItemBasicAccountTitleModule",
      "directive": "bbCustomProductItemBasicAccountTitle"
    },
    "CustomProductItemBasicAccountType": {
      "module": "CustomProductItemBasicAccountTypeModule",
      "directive": "bbCustomProductItemBasicAccountType"
    },
    "CustomProductItemCreditCardDetailsFormatter": {
      "module": "CustomProductItemCreditCardDetailsFormatterModule",
      "directive": "bbCustomProductItemCreditCardDetailsFormatter"
    },
    "CustomProductItemCreditCardMainSection": {
      "module": "CustomProductItemCreditCardMainSectionModule",
      "directive": "bbCustomProductItemCreditCardMainSection"
    },
    "CustomProductItemCreditCardSecondarySection": {
      "module": "CustomProductItemCreditCardSecondarySectionModule",
      "directive": "bbCustomProductItemCreditCardSecondarySection"
    },
    "CustomProductItemCreditCardTitle": {
      "module": "CustomProductItemCreditCardTitleModule",
      "directive": "bbCustomProductItemCreditCardTitle"
    },
    "CustomProductItemCurrentAccountDetailsFormatter": {
      "module": "CustomProductItemCurrentAccountDetailsFormatterModule",
      "directive": "bbCustomProductItemCurrentAccountDetailsFormatter"
    },
    "CustomProductItemCurrentAccountMainSection": {
      "module": "CustomProductItemCurrentAccountMainSectionModule",
      "directive": "bbCustomProductItemCurrentAccountMainSection"
    },
    "CustomProductItemCurrentAccountSecondarySection": {
      "module": "CustomProductItemCurrentAccountSecondarySectionModule",
      "directive": "bbCustomProductItemCurrentAccountSecondarySection"
    },
    "CustomProductItemCurrentAccountTitle": {
      "module": "CustomProductItemCurrentAccountTitleModule",
      "directive": "bbCustomProductItemCurrentAccountTitle"
    },
    "CustomProductItemDebitCardTitle": {
      "module": "CustomProductItemDebitCardTitleModule",
      "directive": "bbCustomProductItemDebitCardTitle"
    },
    "CustomProductItemInvestmentAccountDetailsFormatter": {
      "module": "CustomProductItemInvestmentAccountDetailsFormatterModule",
      "directive": "bbCustomProductItemInvestmentAccountDetailsFormatter"
    },
    "CustomProductItemInvestmentAccountTitle": {
      "module": "CustomProductItemInvestmentAccountTitleModule",
      "directive": "bbCustomProductItemInvestmentAccountTitle"
    },
    "CustomProductItemLoanDetailsFormatter": {
      "module": "CustomProductItemLoanDetailsFormatterModule",
      "directive": "bbCustomProductItemLoanDetailsFormatter"
    },
    "CustomProductItemLoanTitle": {
      "module": "CustomProductItemLoanTitleModule",
      "directive": "bbCustomProductItemLoanTitle"
    },
    "CustomProductItemSavingsAccountDetailsFormatter": {
      "module": "CustomProductItemSavingsAccountDetailsFormatterModule",
      "directive": "bbCustomProductItemSavingsAccountDetailsFormatter"
    },
    "CustomProductItemSavingsAccountMainSection": {
      "module": "CustomProductItemSavingsAccountMainSectionModule",
      "directive": "bbCustomProductItemSavingsAccountMainSection"
    },
    "CustomProductItemSavingsAccountTitle": {
      "module": "CustomProductItemSavingsAccountTitleModule",
      "directive": "bbCustomProductItemSavingsAccountTitle"
    },
    "CustomProductItemTermDepositDetailsFormatter": {
      "module": "CustomProductItemTermDepositDetailsFormatterModule",
      "directive": "bbCustomProductItemTermDepositDetailsFormatter"
    },
    "CustomProductItemTermDepositMainSection": {
      "module": "CustomProductItemTermDepositMainSectionModule",
      "directive": "bbCustomProductItemTermDepositMainSection"
    },
    "CustomProductItemTermDepositTitle": {
      "module": "CustomProductItemTermDepositTitleModule",
      "directive": "bbCustomProductItemTermDepositTitle"
    },
    "CustomSingleSelectedItemLabel": {
      "module": "CustomSingleSelectedItemLabelModule",
      "directive": "bbCustomSingleSelectedItemLabel"
    },
    "CustomStepperStep": {
      "module": "CustomStepperStepModule",
      "directive": "bbCustomStepperStep"
    },
    "DigitOnly": {
      "module": "DigitOnlyModule",
      "directive": "bbDigitOnly",
      "inputs": {
        "allowNegativeSign": {
          "type": "boolean",
          "default": "false"
        },
        "bbDigitOnly": {
          "type": "boolean",
          "default": "true"
        }
      },
      "methods": {
        "onKeyDown": {
          "params": [
            {
              "name": "e",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "DropdownLabel": {
      "module": "DropdownLabelModule",
      "directive": "bbDropdownLabel"
    },
    "DropdownMenu": {
      "module": "DropdownMenuModule",
      "directive": "bbDropdownMenu",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-dropdown-menu--docs"
    },
    "DropdownMenuFullWidth": {
      "module": "DropdownMenuFullWidthModule",
      "directive": "bbDropdownToggleFullWidth",
      "inputs": {
        "bbDropdownToggleFullWidth": {
          "type": "boolean",
          "description": "If true it will stretch the dropdown menu to 100% width",
          "default": "false"
        }
      },
      "methods": {
        "onResize": {
          "params": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "DropdownMenuItem": {
      "module": "DropdownMenuItemModule",
      "directive": "bbDropdownMenuItem"
    },
    "DropdownMenuOption": {
      "module": "DropdownMenuOptionModule",
      "directive": "bbDropdownMenuOption",
      "inputs": {
        "active": {
          "type": "boolean",
          "description": "Boolean value to add/remove the active class on menuitem",
          "default": "false"
        },
        "bbDropdownMenuOption": {
          "type": "string",
          "description": "value of the dropdown menuitem"
        }
      },
      "outputs": {
        "selectionChange": {
          "type": "EventEmitter<DropdownMenuOptionDirective>",
          "description": "Event that is emitted when user clicks on menuitem"
        }
      },
      "methods": {
        "onSelect": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "DropdownToggle": {
      "module": "DropdownToggleModule",
      "directive": "bbDropdownToggle"
    },
    "ElementViewInit": {
      "module": "ElementViewInitModule",
      "directive": "bbElementViewInit",
      "outputs": {
        "bbElementViewInit": {
          "type": "EventEmitter"
        }
      }
    },
    "Focus": {
      "module": "FocusModule",
      "directive": "bbFocus",
      "inputs": {
        "bbFocus": {
          "type": "boolean | string"
        }
      },
      "methods": {
        "focus": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "FocusInvalidInput": {
      "module": "FocusInvalidInputModule",
      "directive": "bbFocusInvalidInput",
      "description": "Directive to focus the first invalid form input.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-focus-invalid-input--docs",
      "methods": {
        "onFormSubmit": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "FormSubmit": {
      "module": "FormSubmitModule",
      "directive": "bbFormSubmit"
    },
    "Highlight": {
      "module": "HighlightModule",
      "directive": "bbHighlight",
      "description": "Directive that encapsulate logic for highlighting positive/negative numbers. Example usage with bb-amount-ui (AmountModule)",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-highlight--docs",
      "inputs": {
        "amount": {
          "type": "string | number",
          "description": "Setter (Input) for value of highlighted number"
        },
        "bbHighlight": {
          "type": "boolean | string",
          "description": "Setter (Input) that turn on/off highlight"
        },
        "negativeClass": {
          "type": "string",
          "description": "The class for positive value.",
          "default": "DEFAULT_NEGATIVE_CLASS"
        },
        "positiveClass": {
          "type": "string",
          "description": "The class for negative value.",
          "default": "DEFAULT_POSITIVE_CLASS"
        }
      }
    },
    "IbanValidator": {
      "module": "IbanValidatorModule",
      "directive": "bbIbanValidatorDir",
      "methods": {
        "validate": {
          "params": [
            {
              "name": "control",
              "type": "AbstractControl"
            }
          ],
          "returns": {
            "type": "literal type | null"
          }
        }
      }
    },
    "InputRange": {
      "module": "InputRangeModule",
      "directive": "bbInputRange",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-input-range--docs"
    },
    "InputRangeMax": {
      "module": "InputRangeMaxModule",
      "directive": "bbInputRangeMax",
      "inputs": {
        "bbInputRangeMax": {
          "type": "number",
          "description": "Maximum possible value (optional);"
        }
      }
    },
    "InputRangeMin": {
      "module": "InputRangeMinModule",
      "directive": "bbInputRangeMin",
      "inputs": {
        "bbInputRangeMin": {
          "type": "number",
          "description": "Minimum possible value (optional);"
        }
      }
    },
    "IsContentTruncated": {
      "module": "IsContentTruncatedModule",
      "directive": "bbIsContentTruncated",
      "inputs": {
        "hostRef": {
          "type": "CheckContentTruncationBehaviour"
        }
      }
    },
    "ItemLogRecord": {
      "module": "ItemLogRecordModule",
      "directive": "bbItemLogRecord"
    },
    "KeyboardClick": {
      "module": "KeyboardClickModule",
      "directive": "bbKeyboardClick",
      "description": "Directive that add click/keydown.enter/keydown.space events on element Used for adding accessibility(tab navigation events) for element",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-keyboard-click--docs",
      "outputs": {
        "bbKeyboardClick": {
          "type": "EventEmitter",
          "description": "Stream that should be fired on click/keydown.enter/keydown.space"
        }
      },
      "methods": {
        "onActionKeyPressed": {
          "params": [
            {
              "name": "$event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onClicked": {
          "params": [
            {
              "name": "$event",
              "type": "MouseEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "LayoutNavDropdown": {
      "module": "LayoutNavDropdownModule",
      "directive": "bbLayoutNavDropdown"
    },
    "ListMultipleSelectAction": {
      "module": "ListMultipleSelectActionModule",
      "directive": "bbListMultipleSelectAction"
    },
    "ListMultipleSelectItem": {
      "module": "ListMultipleSelectItemModule",
      "directive": "bbListMultipleSelectItem"
    },
    "LocaleSelectorLabel": {
      "module": "LocaleSelectorLabelModule",
      "directive": "bbLocaleSelectorLabel"
    },
    "MaxDateValidator": {
      "module": "MaxDateValidatorModule",
      "directive": "maxDate",
      "inputs": {
        "maxDate": {
          "type": "string | NgbDateStruct | undefined"
        }
      },
      "methods": {
        "registerOnValidatorChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "validate": {
          "params": [
            {
              "name": "control",
              "type": "AbstractControl"
            }
          ],
          "returns": {
            "type": "ValidationErrors | null"
          }
        }
      }
    },
    "MinDateValidator": {
      "module": "MinDateValidatorModule",
      "directive": "minDate",
      "inputs": {
        "minDate": {
          "type": "string | NgbDateStruct | undefined"
        }
      },
      "methods": {
        "registerOnValidatorChange": {
          "params": [
            {
              "name": "fn",
              "type": "function"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "validate": {
          "params": [
            {
              "name": "control",
              "type": "AbstractControl"
            }
          ],
          "returns": {
            "type": "ValidationErrors | null"
          }
        }
      }
    },
    "Table": {
      "module": "TableModule",
      "directive": "bbTable",
      "description": "Directive that displays a table. #### Sorting Sorting of table can be enabled by adding `[bbSortable]=\"'columnName'\"` to column header. Additional you will need to implement handling of `sort` output. Here is small example of how it may look like in template: ```typescript            columnName       ``` #### Focusable and clickable rows In order to achieve keyboard navigation over a table and add support for clickable rows you will need to add `bbTableFocus` to root table element and `[bbRow]=\"rowData\"` to row elements. Additionally `selectRow` and `rowClick` can be used to handle appropriate events. ```typescript                   ``` #### a11y The table directive doesn't provide any specific properties for accessibility. The `aria-sort` tag can be set on the sortable header cells with ascending and descending values.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-table--docs",
      "inputs": {
        "bbTable": {
          "type": "Array<Object>",
          "description": "The data source for the table."
        }
      },
      "outputs": {
        "rowClick": {
          "type": "EventEmitter",
          "description": "Emits an event when a row is clicked. An sample implementation could be: Example :onRowClick(value: unknown) { ..... } This will require `[bbRow]=&quot;rowData&quot;` to table row and `[bbTableFocus]` to root table element."
        },
        "selectRow": {
          "type": "EventEmitter",
          "description": "Emits an event when a row is selected."
        },
        "sort": {
          "type": "EventEmitter",
          "description": "An event emitter for on sort actions. An sample implementation could be: Example :onSort({ column, direction }: SortEvent) { ..... }This will require you to add [bbSortable]=&quot;'columnName'&quot; to column header."
        }
      },
      "methods": {
        "isSelected": {
          "params": [
            {
              "name": "row",
              "type": "any"
            }
          ],
          "returns": {
            "type": "boolean"
          }
        },
        "isSelectedAll": {
          "returns": {
            "type": "boolean"
          }
        },
        "isSelectedPart": {
          "returns": {
            "type": "boolean"
          }
        },
        "onRowClick": {
          "params": [
            {
              "name": "rowItem",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onSort": {
          "params": [
            {
              "name": "sortEvent",
              "type": "SortEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "registerHeader": {
          "params": [
            {
              "name": "header",
              "type": "TableSortableDirective"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "toggleAllItems": {
          "returns": {
            "type": "void"
          }
        },
        "toggleItem": {
          "params": [
            {
              "name": "row",
              "type": "any"
            },
            {
              "name": "isChecked",
              "type": "boolean"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "unRegisterHeader": {
          "params": [
            {
              "name": "header",
              "type": "TableSortableDirective"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "TableFocus": {
      "module": "TableFocusModule",
      "directive": "bbTableFocus",
      "inputs": {
        "focusFirstRowOnChanges": {
          "type": "boolean",
          "default": "false"
        }
      },
      "methods": {
        "onKeyEvent": {
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "TableRow": {
      "module": "TableRowModule",
      "directive": "bbRow",
      "inputs": {
        "bbRow": {
          "type": "any",
          "description": "The data of the row element"
        }
      },
      "methods": {
        "onBlur": {
          "params": [
            {
              "name": "el",
              "type": "ElementRef"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onFocus": {
          "params": [
            {
              "name": "el",
              "type": "ElementRef"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onRowClick": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "TableSortable": {
      "module": "TableSortableModule",
      "directive": "bbSortable",
      "inputs": {
        "bbSortable": {
          "type": "string",
          "description": "The name of the column to be sorted"
        },
        "direction": {
          "type": "SortDirection",
          "options": "'asc' | 'desc' | null",
          "description": "The current sort direction. Accepts one of the values of 'asc', 'desc' or null",
          "default": "null"
        },
        "sortDisabled": {
          "type": "boolean",
          "description": "Toggles the sorting functionality on the column."
        }
      },
      "outputs": {
        "sort": {
          "type": "EventEmitter",
          "description": "An event emitter for on sort actions."
        }
      },
      "methods": {
        "emitSortEvent": {
          "description": "Notify table with new sorting params",
          "returns": {
            "type": "void"
          }
        },
        "getMenuOptionSelectionChanges": {
          "description": "Combined stream of all of the bbTableMenuitem selectionChange events.",
          "params": [
            {
              "name": "menuOptions",
              "type": "QueryList<DropdownMenuOptionToken>"
            }
          ],
          "returns": {
            "type": "any"
          }
        },
        "markAllMenuOptionAsInactive": {
          "returns": {
            "type": "void"
          }
        },
        "markMenuOptionAsActive": {
          "description": "mark the new menuitem as active only if sorting order is asc/desc",
          "params": [
            {
              "name": "menuOption",
              "type": "DropdownMenuOptionToken"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "onMenuOptionSelect": {
          "params": [
            {
              "name": "menuOption",
              "type": "DropdownMenuOptionToken"
            }
          ],
          "returns": {
            "type": "void"
          }
        },
        "rotate": {
          "returns": {
            "type": "void"
          }
        },
        "updateAriaSortAttribute": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "Tooltip": {
      "module": "TooltipModule",
      "directive": "bbTooltip",
      "description": "Directive that displays a tooltip. ### Global configuration token `TOOLTIP_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of `TooltipComponent` in your project. *Note:* The token overwrites the default value only. If you have provided a value as a property on a specific component, the token is not be able to overwrite it. The following properties can be overwritten using the token:  - `triggers` #### Usage notes The following is an example of how to use the token: ```typescript import { TOOLTIP_CONFIG_TOKEN } from '@backbase/ui-ang/tooltip-directive'; import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; import { AppModule } from './app/app.module'; const tooltipConfig = {   triggers: 'click',   closeDelay: 400 }; platformBrowserDynamic().bootstrapModule(AppModule, {   providers: [{ provide: TOOLTIP_CONFIG_TOKEN, useValue: tooltipConfig }] }); ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-tooltip--docs",
      "inputs": {
        "bbTooltip": {
          "type": "string | TemplateRef | null | undefined",
          "description": "Content to be displayed as tooltip. If falsy, the tooltip won't open. Accepts a string or TemplateRef."
        },
        "isOpenWithContext": {
          "type": "any",
          "description": "Whether tooltip is initially opened with a given context. If falsy, the tooltip will not open on render. Accepts any context that will be passed into NgTooltip open(). Defaults to false."
        },
        "triggers": {
          "type": "string",
          "description": "Specifies the events that should trigger the tooltip (space separated strings). Defaults to 'click'. This component extends NgbTooltip. All available properties of NgbTooltip can be used with this component as well. More information about it and more examples can be found in NgBootstrap documentation. This attribute can be overwritten via the global configuration token.",
          "default": "'click'"
        }
      },
      "methods": {
        "close": {
          "description": "Event handler to set aria-expanded on closing the tooltip",
          "returns": {
            "type": "void"
          }
        },
        "open": {
          "description": "Event handler to set aria-expanded on opening the tooltip",
          "params": [
            {
              "name": "context",
              "type": "any"
            }
          ],
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "ValidationErrors": {
      "module": "ValidationErrorsModule",
      "directive": "bbFormControl",
      "inputs": {
        "errorComponent": {
          "type": "Type<ValidationErrorComponentModel>",
          "description": "Custom component for error message. Use only if you need to set custom component for specific control. To specify custom component for all form errors use BB_DYNAMIC_ERROR_TMPL InjectionToken.",
          "default": "this.errorTmpl"
        },
        "errorLabels": {
          "type": "PlainObject<string>",
          "description": "Custom error labels object. Use only if you need to set custom error labels for specific control. To specify custom error labels for entire form use BB_VALIDATION_ERRORS InjectionToken.",
          "default": "{}"
        },
        "inputSelector": {
          "type": "string",
          "description": "Selector to indicate the control in which aria-describedby should be set.",
          "default": "'.form-control'"
        },
        "label": {
          "type": "string | null",
          "description": "Input label",
          "default": "null"
        },
        "showError": {
          "type": "() => boolean",
          "description": "Custom function to specify when errors should be shown. By default will be shown when control is invalid.",
          "default": "this.showErrorDefault"
        }
      },
      "methods": {
        "onElBlur": {
          "returns": {
            "type": "void"
          }
        }
      }
    },
    "ValueDiff": {
      "module": "ValueDiffModule",
      "directive": "bbValueDiff",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-value-diff--docs",
      "inputs": {
        "bbValueDiff": {
          "type": "string",
          "description": "New data with which we will compare content."
        },
        "position": {
          "type": "ValueDiffPosition",
          "description": "A position where differences will be added. Default value: 'before'"
        },
        "showArrow": {
          "type": "boolean",
          "description": "Show arrow between old and new value Default value: false"
        },
        "sr-only-new": {
          "type": "string",
          "description": "Text for screen reader to describe new value Default value: 'Current value:'"
        },
        "sr-only-old": {
          "type": "string",
          "description": "Text for screen reader to describe old value Default value: 'Previous value:'"
        }
      }
    },
    "ViewExtension": {
      "module": "ViewExtensionModule",
      "description": "Abstract directive used in journeys to provide locations where custom components can be rendered. ```html ``` Journeys should create a concrete implementation of this directive which defines a specific data type for `ContextType`: ```typescript // Some data type available for use in a view extension: export interface ExampleEntity {   id: string;   additions?: Record;   // etc } // The extension slot directive (does not need to be public API) @Directive({   selector: '[bbExampleEntityAdditions]' }) export class ExampleEntityAdditionsDirective extends ViewExtensionDirective {} ``` The journey should also publicly export a type derived from {@link ViewExtensionComponent} with the same type parameter for `ContextType`, and allow configuring a concrete implementation of that type via the journey module and a private injection token: ```typescript // view-specific ViewExtensionComponent type: export type ExampleEntityExtensionComponent = ViewExtensionComponent; // journey module & config: export interface MyJourneyModuleConfig {   route?: Route;   viewExtensions?: {     entityDetails?: Type   } } @NgModule({   //... }) export class MyJourneyModule {   static forRoot(     {route, viewExtensions}: MyJourneyModuleConfig = {}   ): ModuleWithProviders {     return {       ngModule: MyJourneyModule,       providers: [         provideRoutes([route || defaultRoute]),         {           // internal injection token           provide: ΘMY_JOURNEY_EXTENSIONS,           useValue: viewExtensions || {}         }       ],     };   } } // journey view component: @Component({   //... }) export class JourneyViewComponent {   // implementation of ViewExtensionComponent provided via config:   additionalDetailsComponent: Type | undefined;   constructor(@Inject(ΘMY_JOURNEY_EXTENSIONS) extensionConfig) {     this.additionalDetailsComponent = extensionConfig.entityDetails;   } } ``` The journey view component containing extension point should conditionally render an `ng-container` with this directive if an implementation of the corresponding `ViewExtensionComponent` has been configured: ```html      ``` See {@link ViewExtensionComponent}",
      "inputs": {
        "componentType": {
          "type": "Type<ViewExtensionComponent<ContextType>> | undefined",
          "description": "The component class to render in this extension point. Required."
        },
        "context": {
          "type": "ContextType | undefined",
          "description": "The data available to the custom view extension component.  Will be passed into the custom component instance via its own context input."
        }
      }
    }
  },
  "pipes": {
    "AccountNumber": {
      "ngname": "bbAccountNumber",
      "description": "Pipe for formatting account numbers. It applies different format configurations per number type.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-account-number--docs",
      "transform": {
        "description": "Formats account numbers to use with a global accountsFormat configuration - '12345678' | bbAccountNumber:'iban' to apply a custom configuration - '12345678' | bbAccountNumber:{ segments: [2, 4, 2] } to apply a 'visa' card number configuration - '12345678' | bbAccountNumber:'cardNumber':'visa'",
        "params": [
          {
            "name": "value",
            "type": "string | number",
            "description": "the string to transform"
          },
          {
            "name": "configuration",
            "type": "AccountNumberType | AccountsDisplayingFormat",
            "options": "'cardNumber' | 'iban' | 'bban'",
            "description": "type of the value (iban, bban or number) or a custom numbers format"
          },
          {
            "name": "cardProviderName",
            "type": "string",
            "description": "card provider name"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    },
    "AlertIcon": {
      "ngname": "alertIcon",
      "transform": {
        "params": [
          {
            "name": "alertModifier",
            "type": "AlertType",
            "options": "'warning' | 'error' | 'success' | 'info'"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "AlertType": {
      "ngname": "alertType",
      "transform": {
        "params": [
          {
            "name": "alertModifier",
            "type": "AlertType",
            "options": "'warning' | 'error' | 'success' | 'info'"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "AmountInputCurrencyRemap": {
      "ngname": "bbAmountInputCurrencyRemap",
      "transform": {
        "params": [
          {
            "name": "currency",
            "type": "string"
          },
          {
            "name": "mapCurrency",
            "type": "boolean"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "AvatarInitials": {
      "ngname": "avatarInitials",
      "transform": {
        "params": [
          {
            "name": "text",
            "type": "string"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "BbDate": {
      "ngname": "bbDate",
      "description": "Pipe for formatting dates ### Locale token `LOCALE_ID` enables you to globally set the same locale for all instances of `bbDatePipe` in your project. Refer to https://angular.io/api/core/LOCALE_ID for more information. ### Default timezone and format option `DATE_PIPE_DEFAULT_OPTIONS` enables you to globally set the default timezone and date format for all instances of `bbDatePipe` in your project. Refer to https://angular.io/api/common/DATE_PIPE_DEFAULT_OPTIONS for more information. ### Format configuration token `DATE_PIPE_CONFIG` enables to globally setup format for all instances of `bbDatePipe` in your project. The following is an example of how to use the token: ```typescript  import { DATE_PIPE_CONFIG, DateFormat } from '@backbase/ui-ang/date-pipe';  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';  import { AppModule } from './app/app.module';  platformBrowserDynamic().bootstrapModule(AppModule, {    providers: [{ provide: DATE_PIPE_CONFIG, useValue: DateFormat.short }]  }); ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/formatters-date-pipe--docs",
      "transform": {
        "description": "Depending on format type, formats a date Custom format is called with bbShort, and formats to 'MMMM d, y at HH:mm', otherwise uses the predifined angular formats",
        "params": [
          {
            "name": "value",
            "type": "any",
            "description": "the date that should be formatted"
          },
          {
            "name": "format",
            "description": "the format type for the date to be formatted",
            "default": "this.dateFormatConfig?.format ?? this.defaultOptions?.dateFormat ?? 'mediumDate'"
          },
          {
            "name": "timezone",
            "type": "string | undefined",
            "description": "used for formatting the time",
            "default": "this.defaultOptions?.timezone"
          },
          {
            "name": "locale",
            "type": "string",
            "description": "locale to use for formatting"
          }
        ],
        "returns": {
          "type": "string | null"
        }
      }
    },
    "BbIban": {
      "ngname": "bbIban",
      "description": "Pipe for formatting iban",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/formatters-iban-pipe--docs",
      "transform": {
        "description": "Splits the iban up with spaces Applies global numbers format configuration for IBAN attribute type",
        "params": [
          {
            "name": "value",
            "type": "string",
            "description": "the iban that should be formatted"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    },
    "CardVendorTitle": {
      "ngname": "cardVendorTitle",
      "transform": {
        "params": [
          {
            "name": "vendor",
            "type": "string"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "CountryFlag": {
      "ngname": "countryFlag",
      "transform": {
        "description": "Transforms the input value to a flag icon class name.",
        "params": [
          {
            "name": "value",
            "type": "string",
            "description": "The country code to transform."
          }
        ],
        "returns": {
          "type": "string",
          "description": "The class name for the flag icon."
        }
      }
    },
    "IllustrationAlt": {
      "ngname": "illustrationAlt",
      "transform": {
        "params": [
          {
            "name": "text",
            "type": "string"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "IllustrationSrc": {
      "ngname": "illustrationSrc",
      "transform": {
        "params": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "assetPath",
            "type": "string"
          },
          {
            "name": "fileType",
            "type": "string"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    },
    "NotificationIconColor": {
      "ngname": "notificationIconColor",
      "transform": {
        "params": [
          {
            "name": "modifier",
            "type": "NotificationType",
            "options": "'success' | 'info' | 'warning' | 'error' | 'alert'"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "NotificationIcon": {
      "ngname": "notificationIcon",
      "transform": {
        "params": [
          {
            "name": "modifier",
            "type": "NotificationType",
            "options": "'success' | 'info' | 'warning' | 'error' | 'alert'"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "PaymentCardNumber": {
      "ngname": "paymentCardNumber",
      "description": "A card number is the digit identifier found on payment cards, such as credit cards and debit cards. This card number prefix identifies the issuer of the card, and the digits that follow are used by the issuing organization, such as a bank, to identify the cardholder as a customer with their designated accounts. ### Numbers masking synchronization token It is possible to enable numbers masking synchronization with backend. If set to `true` FE does not apply any masking and relies on the backend masking behavior. To enable this feaure the `SYNCHRONIZE_NUMBERS_MASKING` token should be provided. For example: ```typescript  // other imports  import { SYNCHRONIZE_NUMBERS_MASKING } from '@backbase/ui-ang/payment-card-number-pipe';  @NgModule({    //...    providers: [      //...      { provide: SYNCHRONIZE_NUMBERS_MASKING, useValue: true }    ]  })  export class AppModule {}  ```",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/formatters-payment-card-number-pipe--docs",
      "transform": {
        "description": "Formats a card number, mask it and split it into segments - do not set config parameter to use with a global accountsFormat configuration - use config parameter to apply a custom accountsFormat configuration",
        "params": [
          {
            "name": "value",
            "type": "string | number",
            "description": "the string to transform"
          },
          {
            "name": "config",
            "type": "PaymentCardNumberFormat",
            "description": "the formatting configuration"
          },
          {
            "name": "maskChar",
            "type": "string",
            "description": "the character to mask with, deprecated from 6.0.0",
            "default": "'•'"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    },
    "PhoneNumber": {
      "ngname": "phoneNumber",
      "description": "Pipe for formatting phone numbers to various international formats ### Global configuration token `INPUT_PHONE_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of `InputPhoneComponent` in your project. The following properties can be overwritten using the token:  - `maxLength`  - `minLength`  - `autocomplete`  - `mask`  - `displayFormat`  - `validationPattern`  - `hideSelectedCountryFlag`  - `defaultCountryIsoCode`  - `countryList` #### Usage notes The following is an example of how to use the token: ```typescript  import { INPUT_PHONE_CONFIG_TOKEN } from '@backbase/ui-ang/input-phone';  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';  import { AppModule } from './app/app.module';  const inputPhoneConfig = {    maxLength: 10,    minLength: 5,    autocomplete: 'off',    displayFormat: 'E.164',  }  providers: [    {      provide: INPUT_PHONE_CONFIG_TOKEN,      useValue: inputPhoneConfig,    },  ] ``` ### Country Code Format Config Token `COUNTRY_CODE_FORMAT_CONFIG_TOKEN` enables you to globally set the same configuration for all instances of `InputPhoneComponent` in your project. #### Usage notes The following is an example of how to use the token. Note: the `minLength` and `maxLength` properties do not account for the country dialling code: ```typescript  import { COUNTRY_CODE_FORMAT_CONFIG_TOKEN } from '@backbase/ui-ang/input-phone';  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';  import { AppModule } from './app/app.module';  const countryCodeFormatConfig = {    '+1': {      mask: '+0 (000) 000-0000',      minLength: 8,      maxLength, 12,    },  };  providers: [    {      provide: COUNTRY_CODE_FORMAT_CONFIG_TOKEN,      useValue: countryCodeFormatConfig,    },  ] ``` #### IMPORTANT NOTE:  - If you wish to validate & format ALL phone numbers using the SAME `minLength`, `maxLength` and/or `mask`, please configure these values using the `INPUT_PHONE_CONFIG_TOKEN`.  - If you need to support phone numbers for multiple countries (DIFFERENT `minLength`, `maxLength` & `mask`), we advise to use the `COUNTRY_CODE_FORMAT_CONFIG_TOKEN` instead.",
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/formatters-phone-number-pipe--docs",
      "transform": {
        "description": "Formats a phone number to any entered country code international format",
        "params": [
          {
            "name": "value",
            "type": "string | number",
            "description": "the phone number string to transform"
          },
          {
            "name": "countryCode",
            "type": "CountryCode",
            "description": "the two letter CDLR code for the country to format to"
          },
          {
            "name": "isInputElement",
            "type": "boolean",
            "description": "whether the value was entered in an input element"
          }
        ],
        "returns": {
          "type": "string"
        }
      }
    },
    "PresetIllustration": {
      "ngname": "presetIllustration",
      "transform": {
        "params": [
          {
            "name": "value",
            "type": "EmptyStatePresetType",
            "options": "'unknown_error_personal' | 'consents' | 'sweeps' | 'batches' | 'payment_not_found' | 'transactions' | 'budgets' | 'permissions' | 'upcoming_payments' | 'results_found' | 'no_results_found' | 'notifications' | 'unknown_error_organisation' | 'cards' | 'cashflow' | 'data_found' | 'no_internet' | 'location' | 'user' | 'pockets' | 'insights' | 'transaction_limits' | 'no_contacts' | 'no_conversations' | 'nothing_to_approve' | 'operation_timeout'"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "PresetPrimaryActionText": {
      "ngname": "presetPrimaryActionText",
      "transform": {
        "params": [
          {
            "name": "value",
            "type": "EmptyStatePresetType",
            "options": "'unknown_error_personal' | 'consents' | 'sweeps' | 'batches' | 'payment_not_found' | 'transactions' | 'budgets' | 'permissions' | 'upcoming_payments' | 'results_found' | 'no_results_found' | 'notifications' | 'unknown_error_organisation' | 'cards' | 'cashflow' | 'data_found' | 'no_internet' | 'location' | 'user' | 'pockets' | 'insights' | 'transaction_limits' | 'no_contacts' | 'no_conversations' | 'nothing_to_approve' | 'operation_timeout'"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "PresetSubtitle": {
      "ngname": "presetSubtitle",
      "transform": {
        "params": [
          {
            "name": "value",
            "type": "EmptyStatePresetType",
            "options": "'unknown_error_personal' | 'consents' | 'sweeps' | 'batches' | 'payment_not_found' | 'transactions' | 'budgets' | 'permissions' | 'upcoming_payments' | 'results_found' | 'no_results_found' | 'notifications' | 'unknown_error_organisation' | 'cards' | 'cashflow' | 'data_found' | 'no_internet' | 'location' | 'user' | 'pockets' | 'insights' | 'transaction_limits' | 'no_contacts' | 'no_conversations' | 'nothing_to_approve' | 'operation_timeout'"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    },
    "PresetTitle": {
      "ngname": "presetTitle",
      "transform": {
        "params": [
          {
            "name": "value",
            "type": "EmptyStatePresetType",
            "options": "'unknown_error_personal' | 'consents' | 'sweeps' | 'batches' | 'payment_not_found' | 'transactions' | 'budgets' | 'permissions' | 'upcoming_payments' | 'results_found' | 'no_results_found' | 'notifications' | 'unknown_error_organisation' | 'cards' | 'cashflow' | 'data_found' | 'no_internet' | 'location' | 'user' | 'pockets' | 'insights' | 'transaction_limits' | 'no_contacts' | 'no_conversations' | 'nothing_to_approve' | 'operation_timeout'"
          }
        ],
        "returns": {
          "type": "any"
        }
      }
    }
  },
  "styles": {
    "_bb-block": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-block--docs",
      "classes": [
        "bb-block--bottom-space",
        "bb-block--full-width",
        "bb-block--lg",
        "bb-block--lg-down",
        "bb-block--md",
        "bb-block--no-margin",
        "bb-block--sm",
        "bb-block--xl",
        "bb-block--xs"
      ],
      "examples": [
        "<div class=\"bb-block--xs\">\nContent with xs margin bottom\n</div>\n<div class=\"bb-block--sm\">\nContent with sm margin bottom\n</div>\n<div class=\"bb-block--md\">\nContent with md margin bottom\n</div>\n<div class=\"bb-block--lg\">\nContent with lg margin bottom\n</div>\n<div class=\"bb-block--xl\">\nContent with xl margin bottom\n</div>\n<div class=\"bb-block--no-margin\">\nContent with no margin bottom\n</div>\n<div class=\"bb-block--full-width\">\nContent with full width\n</div>\n<div class=\"bb-block--bottom-space\">\nContent with defined padding bottom and max height\n</div>\n\n@example html\n<div class=\"bb-block--md-md-down\">\nContent with margin bottom\n</div>"
      ]
    },
    "_bb-button-bar": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-button-bar--docs",
      "classes": [
        "bb-button-bar",
        "bb-button-bar--center",
        "bb-button-bar--density-0",
        "bb-button-bar--density-1",
        "bb-button-bar--density-2",
        "bb-button-bar--density-3",
        "bb-button-bar--density-4",
        "bb-button-bar--density-5",
        "bb-button-bar--end",
        "bb-button-bar--reverse",
        "bb-button-bar--spacing-0",
        "bb-button-bar--spacing-1",
        "bb-button-bar--spacing-2",
        "bb-button-bar--spacing-3",
        "bb-button-bar--spacing-4",
        "bb-button-bar--spacing-5",
        "bb-button-bar--sticky",
        "bb-button-bar__button",
        "bb-button-bar__button--across"
      ],
      "examples": [
        "<div class=\"bb-button-bar\">\n<button class=\"bb-button-bar__button btn btn-primary\">Primary action</button>\n<button class=\"bb-button-bar__button btn btn-secondary\">Secondary action</button>\n<button class=\"bb-button-bar__button btn btn-tertiary\">Tertiary action</button>\n</div>\n\n@example html - Button order reversed: `bb-button-bar--reverse`\n<div class=\"bb-button-bar bb-button-bar--reverse\">\n<button class=\"bb-button-bar__button btn btn-tertiary\">Tertiary action</button>\n<button class=\"bb-button-bar__button btn btn-secondary\">Secondary action</button>\n<button class=\"bb-button-bar__button btn btn-primary\">Primary action</button>\n</div>\n\n@example html - Buttons aligned in center: `bb-button-bar--center`\n<div class=\"bb-button-bar bb-button-bar--center\">\n<button class=\"bb-button-bar__button btn btn-primary\">Primary action</button>\n<button class=\"bb-button-bar__button btn btn-secondary\">Secondary action</button>\n<button class=\"bb-button-bar__button btn btn-tertiary\">Tertiary action</button>\n</div>\n\n@example html - Extra top spacing: `bb-button-bar--spacing-md`\n<div class=\"bb-button-bar bb-button-bar--spacing-md\">\n<button class=\"bb-button-bar__button btn btn-primary\">Primary action</button>\n<button class=\"bb-button-bar__button btn btn-secondary\">Secondary action</button>\n<button class=\"bb-button-bar__button btn btn-tertiary\">Tertiary action</button>\n</div>\n\n@example html - Bigger spacing between button elements: `bb-button-bar--density-lg`\n<div class=\"bb-button-bar bb-button-bar--density-lg\">\n<button class=\"bb-button-bar__button btn btn-primary\">Primary action</button>\n<button class=\"bb-button-bar__button btn btn-secondary\">Secondary action</button>\n<button class=\"bb-button-bar__button btn btn-tertiary\">Tertiary action</button>\n</div>",
        "<button class=\"bb-button-bar__button btn btn-primary\">Primary action</button>",
        "<button class=\"bb-button-bar__button--across btn btn-primary\">\nPrimary action\n</button>",
        "<div class=\"bb-button-bar bb-button-bar--reverse\">\n...\n</div>",
        "<div class=\"bb-button-bar bb-button-bar--center\">\n...\n</div>",
        "<div class=\"bb-button-bar bb-button-bar--end\">\n...\n</div>",
        "<div class=\"bb-button-bar bb-button-bar--sticky\">\n...\n</div>",
        "<div class=\"bb-button-bar bb-button-bar--spacing-md\">\n...\n</div>",
        "<div class=\"bb-button-bar bb-button-bar--density-xs\">\n...\n</div>"
      ]
    },
    "_bb-card": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-card--docs",
      "classes": [
        "bb-card",
        "bb-card--border-level-lg",
        "bb-card--border-level-md",
        "bb-card--border-level-sm",
        "bb-card--border-level-xs",
        "bb-card--highlight",
        "bb-card--ignore",
        "bb-card--lg",
        "bb-card--md",
        "bb-card--shadow-level-lg",
        "bb-card--shadow-level-md",
        "bb-card--shadow-level-sm",
        "bb-card--shadow-level-xl",
        "bb-card--shadowless",
        "bb-card--sm",
        "bb-card--warning",
        "bb-card__body",
        "bb-card__footer",
        "bb-card__header",
        "bb-card__header--only-child",
        "bb-card__title",
        "bb-list__group"
      ],
      "examples": [
        "$bb-card-shadow-level-sm: $box-shadow-sm !default;\n$bb-card-shadow-level-md: $box-shadow-md !default;\n$bb-card-shadow-level-lg: $box-shadow-lg !default;\n$bb-card-shadow-level-xl: $box-shadow-xl !default;",
        "$bb-card-border-radius: $border-radius-md !default;\n$bb-card-border-width: 0px !default;\n$bb-card-border-color: $color-border-on-color !default;\n$bb-card-inner-border-radius: calc(#{$bb-card-border-radius} -\n#{$bb-card-border-width}) !default;",
        "$bb-card-background-color: $color-background-surface-1 !default;\n$bb-card-highlight-background-color: $color-background-surface-2 !default;\n$bb-card-warning-background-color: $color-background-warning-subtle !default;",
        "$bb-card-header-padding-sm: $sizer-md !default;\n$bb-card-header-padding-md: $sizer-lg !default;\n$bb-card-header-only-child-padding: $sizer-lg !default;",
        "$bb-card-padding-vertical: $sizer-lg !default;\n$bb-card-padding-horizontal: $sizer-lg !default;\n$bb-card-body-padding-sm: $sizer-md !default;\n$bb-card-body-padding-md: $sizer-lg !default;\n$bb-card-footer-padding-sm: $sizer-md !default;",
        "$bb-card-caption-background-color: $color-background-surface-1 !default;\n$bb-card-caption-color: $optional !default;",
        "$bb-card-focus-border-primary: $focus-border-primary !default;\n$bb-card-focus-outline-distance: $focus-outline-distance !default;",
        "<div class=\"bb-card\">\n<div class=\"bb-card__header\">\n<h3 class=\"bb-card__title\">\nCard title\n</h3>\n</div>\n<div class=\"bb-card__body\">Card body</div>\n<div class=\"bb-card__footer\">Card footer</div>\n</div>",
        "<div class=\"bb-card\">\n<div class=\"bb-card__header\">\n<h3 class=\"bb-card__title\">Card title</h3>\n</div>\n<div class=\"bb-card__body\">\nCard body\n</div>\n<div class=\"bb-card__footer\">Card footer</div>\n</div>",
        "<div class=\"bb-card\">\n<div class=\"bb-card__header\">\n<h3 class=\"bb-card__title\">Card title</h3>\n</div>\n<div class=\"bb-card__body\">Card body</div>\n<div class=\"bb-card__footer\">Card footer</div>\n</div>",
        "<div class=\"bb-card\">\n<div class=\"bb-card__header\">\n<h3 class=\"bb-card__title\">Card title</h3>\n</div>\n<div class=\"bb-card__body\">Card body</div>\n<div class=\"bb-card__footer\">\nCard footer\n</div>\n</div>"
      ]
    },
    "_bb-container": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-container--docs",
      "classes": [
        "container",
        "container--drag-up",
        "container--fixed-width",
        "container--fixed-width-small",
        "container-fluid",
        "container-lg",
        "container-md",
        "container-sm",
        "container-xl"
      ],
      "examples": [
        "$container-fixed-width-max-width: 840px !default;\n$container-fixed-width-small-max-width: 600px !default;",
        "<div class=\"container--fixed-width\">\n<!-- Content here -->\n</div>\n@example html Variant use-cases\n.container--fixed-width {\nmax-width: $container-fixed-width-max-width;\n}\n.container--fixed-width-small {\nmax-width: $container-fixed-width-small-max-width;\n}"
      ]
    },
    "_bb-display": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-display--docs",
      "classes": [
        "bb-d-block",
        "bb-d-flex",
        "bb-d-inline",
        "bb-d-inline-block",
        "bb-d-inline-flex",
        "bb-d-lg-block",
        "bb-d-lg-flex",
        "bb-d-lg-inline",
        "bb-d-lg-inline-block",
        "bb-d-lg-inline-flex",
        "bb-d-lg-none",
        "bb-d-lg-table",
        "bb-d-lg-table-cell",
        "bb-d-lg-table-row",
        "bb-d-md-block",
        "bb-d-md-flex",
        "bb-d-md-inline",
        "bb-d-md-inline-block",
        "bb-d-md-inline-flex",
        "bb-d-md-none",
        "bb-d-md-table",
        "bb-d-md-table-cell",
        "bb-d-md-table-row",
        "bb-d-none",
        "bb-d-print-block",
        "bb-d-print-flex",
        "bb-d-print-inline",
        "bb-d-print-inline-block",
        "bb-d-print-inline-flex",
        "bb-d-print-none",
        "bb-d-print-table",
        "bb-d-print-table-cell",
        "bb-d-print-table-row",
        "bb-d-sm-block",
        "bb-d-sm-flex",
        "bb-d-sm-inline",
        "bb-d-sm-inline-block",
        "bb-d-sm-inline-flex",
        "bb-d-sm-none",
        "bb-d-sm-table",
        "bb-d-sm-table-cell",
        "bb-d-sm-table-row",
        "bb-d-table",
        "bb-d-table-cell",
        "bb-d-table-row",
        "bb-d-xl-block",
        "bb-d-xl-flex",
        "bb-d-xl-inline",
        "bb-d-xl-inline-block",
        "bb-d-xl-inline-flex",
        "bb-d-xl-none",
        "bb-d-xl-table",
        "bb-d-xl-table-cell",
        "bb-d-xl-table-row"
      ],
      "examples": [
        "<div class=\"bb-d-flex\">\nDisplay flex\n</div>\n<div class=\"bb-d-none\">\nDisplay none\n</div>\n<div class=\"bb-d-md-none\">\nDisplay none on medium screens and larger\n</div>\n<div class=\"bb-d-none bb-d-md-block\">\nDisplay block on medium screens and larger and display none on smaller screens\n</div>"
      ]
    },
    "_bb-inline-stack": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-inline-stack--docs",
      "classes": [
        "bb-inline-stack",
        "bb-inline-stack--density-0",
        "bb-inline-stack--density-1",
        "bb-inline-stack--density-2",
        "bb-inline-stack--density-3",
        "bb-inline-stack--density-4",
        "bb-inline-stack--density-5",
        "bb-inline-stack--density-none",
        "bb-inline-stack__item",
        "bb-inline-stack__item--spacing-0",
        "bb-inline-stack__item--spacing-1",
        "bb-inline-stack__item--spacing-2",
        "bb-inline-stack__item--spacing-3",
        "bb-inline-stack__item--spacing-4",
        "bb-inline-stack__item--spacing-5",
        "bb-inline-stack__item--spacing-none"
      ],
      "examples": [
        "<span class=\"bb-inline-stack\">\n<span class=\"bb-inline-stack__item\">\nTab\n</span>\n<span class=\"bb-inline-stack__item\">\nTab\n</span>\n</span>",
        "<span class=\"bb-inline-stack bb-inline-stack--density-md\">\n<span class=\"bb-inline-stack__item\">Tab 1</span>\n<span class=\"bb-inline-stack__item\">Tab 2</span>\n</span>",
        "<span class=\"bb-inline-stack\">\n<span class=\"bb-inline-stack__item bb-inline-stack__item--spacing-md\">\nTab\n</span>\n<span class=\"bb-inline-stack__item bb-inline-stack__item--spacing-md\">\nTab\n</span>\n</span>",
        "<span class=\"bb-inline-stack bb-inline-stack--density-none\">\n<span class=\"bb-inline-stack__item\">Tab 1</span>\n<span class=\"bb-inline-stack__item\">Tab 2</span>\n</span>",
        "<span class=\"bb-inline-stack\">\n<span class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none\">\nTab\n</span>\n<span class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none\">\nTab\n</span>\n</span>"
      ]
    },
    "_bb-page-layout-horizontal": {
      "classes": [
        "bb-page-layout--horizontal-nav",
        "bb-page-layout--nav-expanded",
        "bb-page-layout__main",
        "bb-page-layout__nav-backdrop",
        "bb-page-layout__toggler",
        "bb-page-layout__topbar"
      ],
      "examples": []
    },
    "_bb-page-layout-vertical": {
      "classes": [
        "bb-page-layout--nav-collapsed",
        "bb-page-layout--nav-expanded",
        "bb-page-layout--sticky-sidebar",
        "bb-page-layout--sticky-topbar",
        "bb-page-layout--vertical-nav",
        "bb-page-layout__main",
        "bb-page-layout__topbar",
        "bb-sidebar",
        "bb-sidebar__sidebar-toggler"
      ],
      "examples": []
    },
    "_bb-page-layout": {
      "classes": [
        "bb-page-layout",
        "bb-page-layout--sticky-sidebar",
        "bb-page-layout--sticky-topbar",
        "bb-page-layout__container",
        "bb-page-layout__content",
        "bb-page-layout__content-anchor",
        "bb-page-layout__main",
        "bb-page-layout__nav-backdrop",
        "bb-page-layout__skip-to-content",
        "bb-page-layout__topbar",
        "bb-sidebar"
      ],
      "examples": []
    },
    "_bb-sidebar": {
      "classes": [
        "bb-icon",
        "bb-navigation-item__icon",
        "bb-navigation-item__text",
        "bb-sidebar",
        "bb-sidebar--collapsed",
        "bb-sidebar--expanded",
        "bb-sidebar--horizontal-nav",
        "bb-sidebar__sidebar-toggler",
        "bb-sidebar__sidebar-toggler--horizontal-nav"
      ],
      "examples": []
    },
    "_bb-stack": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-stack--docs",
      "classes": [
        "bb-stack",
        "bb-stack--align-baseline",
        "bb-stack--align-baseline-lg",
        "bb-stack--align-baseline-lg-down",
        "bb-stack--align-baseline-lg-up",
        "bb-stack--align-baseline-md",
        "bb-stack--align-baseline-md-down",
        "bb-stack--align-baseline-md-up",
        "bb-stack--align-baseline-sm",
        "bb-stack--align-baseline-sm-down",
        "bb-stack--align-baseline-sm-up",
        "bb-stack--align-baseline-xl",
        "bb-stack--align-baseline-xl-down",
        "bb-stack--align-baseline-xl-up",
        "bb-stack--align-baseline-xs",
        "bb-stack--align-baseline-xs-down",
        "bb-stack--align-baseline-xs-up",
        "bb-stack--align-bottom",
        "bb-stack--align-bottom-lg",
        "bb-stack--align-bottom-lg-down",
        "bb-stack--align-bottom-lg-up",
        "bb-stack--align-bottom-md",
        "bb-stack--align-bottom-md-down",
        "bb-stack--align-bottom-md-up",
        "bb-stack--align-bottom-sm",
        "bb-stack--align-bottom-sm-down",
        "bb-stack--align-bottom-sm-up",
        "bb-stack--align-bottom-xl",
        "bb-stack--align-bottom-xl-down",
        "bb-stack--align-bottom-xl-up",
        "bb-stack--align-bottom-xs",
        "bb-stack--align-bottom-xs-down",
        "bb-stack--align-bottom-xs-up",
        "bb-stack--align-top",
        "bb-stack--align-top-lg",
        "bb-stack--align-top-lg-down",
        "bb-stack--align-top-lg-up",
        "bb-stack--align-top-md",
        "bb-stack--align-top-md-down",
        "bb-stack--align-top-md-up",
        "bb-stack--align-top-sm",
        "bb-stack--align-top-sm-down",
        "bb-stack--align-top-sm-up",
        "bb-stack--align-top-xl",
        "bb-stack--align-top-xl-down",
        "bb-stack--align-top-xl-up",
        "bb-stack--align-top-xs",
        "bb-stack--align-top-xs-down",
        "bb-stack--align-top-xs-up",
        "bb-stack--center",
        "bb-stack--density-0",
        "bb-stack--density-1",
        "bb-stack--density-2",
        "bb-stack--density-3",
        "bb-stack--density-4",
        "bb-stack--density-5",
        "bb-stack--density-none",
        "bb-stack--row-gap-0",
        "bb-stack--row-gap-1",
        "bb-stack--row-gap-2",
        "bb-stack--row-gap-3",
        "bb-stack--row-gap-4",
        "bb-stack--row-gap-5",
        "bb-stack--space-between",
        "bb-stack--vertical",
        "bb-stack--vertical-lg",
        "bb-stack--vertical-lg-down",
        "bb-stack--vertical-lg-up",
        "bb-stack--vertical-md",
        "bb-stack--vertical-md-down",
        "bb-stack--vertical-md-up",
        "bb-stack--vertical-sm",
        "bb-stack--vertical-sm-down",
        "bb-stack--vertical-sm-up",
        "bb-stack--vertical-xl",
        "bb-stack--vertical-xl-down",
        "bb-stack--vertical-xl-up",
        "bb-stack--vertical-xs",
        "bb-stack--vertical-xs-down",
        "bb-stack--vertical-xs-up",
        "bb-stack--wrap",
        "bb-stack__box-item",
        "bb-stack__box-item--spacing-0",
        "bb-stack__box-item--spacing-1",
        "bb-stack__box-item--spacing-2",
        "bb-stack__box-item--spacing-3",
        "bb-stack__box-item--spacing-4",
        "bb-stack__box-item--spacing-5",
        "bb-stack__break",
        "bb-stack__break--down",
        "bb-stack__break--lg",
        "bb-stack__break--lg-down",
        "bb-stack__break--lg-up",
        "bb-stack__break--md",
        "bb-stack__break--md-down",
        "bb-stack__break--md-up",
        "bb-stack__break--sm",
        "bb-stack__break--sm-down",
        "bb-stack__break--sm-up",
        "bb-stack__break--spacing-0",
        "bb-stack__break--spacing-1",
        "bb-stack__break--spacing-2",
        "bb-stack__break--spacing-3",
        "bb-stack__break--spacing-4",
        "bb-stack__break--spacing-5",
        "bb-stack__break--up",
        "bb-stack__break--xl",
        "bb-stack__break--xl-down",
        "bb-stack__break--xl-up",
        "bb-stack__break--xs",
        "bb-stack__item",
        "bb-stack__item--align-bottom",
        "bb-stack__item--align-top",
        "bb-stack__item--bottom-space",
        "bb-stack__item--fill",
        "bb-stack__item--fill--down",
        "bb-stack__item--fill--lg-down",
        "bb-stack__item--fill--lg-up",
        "bb-stack__item--fill--md-down",
        "bb-stack__item--fill--md-up",
        "bb-stack__item--fill--sm-down",
        "bb-stack__item--fill--sm-up",
        "bb-stack__item--fill--up",
        "bb-stack__item--fill--xl-down",
        "bb-stack__item--fill--xl-up",
        "bb-stack__item--fill-lg",
        "bb-stack__item--fill-md",
        "bb-stack__item--fill-sm",
        "bb-stack__item--fill-xl",
        "bb-stack__item--fill-xs",
        "bb-stack__item--no-shrink",
        "bb-stack__item--push-left",
        "bb-stack__item--push-left-lg",
        "bb-stack__item--push-left-lg-down",
        "bb-stack__item--push-left-lg-up",
        "bb-stack__item--push-left-md",
        "bb-stack__item--push-left-md-down",
        "bb-stack__item--push-left-md-up",
        "bb-stack__item--push-left-sm",
        "bb-stack__item--push-left-sm-down",
        "bb-stack__item--push-left-sm-up",
        "bb-stack__item--push-left-xl",
        "bb-stack__item--push-left-xl-down",
        "bb-stack__item--push-left-xl-up",
        "bb-stack__item--push-left-xs",
        "bb-stack__item--push-left-xs-down",
        "bb-stack__item--push-left-xs-up",
        "bb-stack__item--push-right",
        "bb-stack__item--push-right-lg",
        "bb-stack__item--push-right-lg-down",
        "bb-stack__item--push-right-lg-up",
        "bb-stack__item--push-right-md",
        "bb-stack__item--push-right-md-down",
        "bb-stack__item--push-right-md-up",
        "bb-stack__item--push-right-sm",
        "bb-stack__item--push-right-sm-down",
        "bb-stack__item--push-right-sm-up",
        "bb-stack__item--push-right-xl",
        "bb-stack__item--push-right-xl-down",
        "bb-stack__item--push-right-xl-up",
        "bb-stack__item--push-right-xs",
        "bb-stack__item--push-right-xs-down",
        "bb-stack__item--push-right-xs-up",
        "bb-stack__item--spacing-0",
        "bb-stack__item--spacing-1",
        "bb-stack__item--spacing-2",
        "bb-stack__item--spacing-3",
        "bb-stack__item--spacing-4",
        "bb-stack__item--spacing-5",
        "bb-stack__item--spacing-none"
      ],
      "examples": [
        "<div class=\"bb-stack bb-stack--vertical\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack bb-stack__center\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack bb-stack__space-between\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack bb-stack--wrap\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack bb-stack--align-top\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack bb-stack--align-bottom\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack bb-stack--align-baseline\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__box-item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-bb-stack__box-item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-bb-stack__box-item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack bb-stack--density-none\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack row\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item bb-stack__item--no-shrink\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item bb-stack__item--fill\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack__item--bottom-space\">\n<bb-input-text-ui\nformControlName=\"companyId\"\nlabel=\"Company ID\"\naria-describedby=\"ach-blocker-company-id-required-error\"\n>\n</bb-input-text-ui>\n<bb-input-validation-message-ui\nrole=\"alert\"\n[showErrors]=\"achBlockerRuleForm.get('companyId')?.errors?.required\"\n>Company ID is required.\n</bb-input-validation-message-ui>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__item bb-stack__item--align-top\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item bb-stack__item--align-bottom\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__item\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item bb-stack__item--push-right\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__item bb-stack__item--push-left\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__item bb-stack__item--spacing-none\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack\">\n<div class=\"bb-stack__item bb-stack__break\">\n<div class=\"bb-avatar\">\n<span class=\"bb-avatar__initials\">XY</span>\n</div>\n</div>\n<div class=\"bb-stack__item\">\n<div><strong>Title</strong></div>\n<div>x</div>\n<div><span class=\"text-body-secondary\">Muted</span></div>\n</div>\n<div class=\"bb-stack__item\">\n<button class=\"btn btn-sm btn-success btn-circle\">\n<i class=\"bb-icon bb-icon-check\"></i>\n</button>\n<button class=\"btn btn-sm btn-danger btn-circle\">\n<i class=\"bb-icon bb-icon-times\"></i>\n</button>\n</div>\n</div>",
        "<div class=\"bb-stack bb-stack--vertical bb-stack--row-gap-<xs|sm|md|lg|xl>\">\n<div class=\"bb-stack__item\"></div>\n<div class=\"bb-stack__item\"></div>\n</div>"
      ]
    },
    "_bb-state-container": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-state-container--docs",
      "classes": [
        "bb-state-container",
        "bb-state-container--min-height",
        "bb-state-container__footer"
      ],
      "examples": [
        "<div class=\"bb-state-container\">\nEmpty state\n<div class=\"bb-state-container__footer\">\nOptional action buttons\n</div>\n</div>"
      ]
    },
    "_bb-tabs-container": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-tabs-container--docs",
      "classes": [
        "bb-tabs-container__tabs"
      ],
      "examples": [
        "<div class=\"bb-tabs-container\">\n<div class=\"bb-tabs-container__tabs\">\n<bb-tab-group-ui [initialSelection]=\"0\" (select)=\"onTabSelect($event)\" (click)=\"onClick($event)\">\n<bb-tab-ui>First</bb-tab-ui>\n<bb-tab-ui>Second</bb-tab-ui>\n<bb-tab-ui>Third</bb-tab-ui>\n</bb-tab-group-ui>\n</div>\n<div class=\"tab-main-content\">\n<div data-role=\"first-tab\" *ngIf=\"index === 0\">First tab content here</div>\n<div data-role=\"second-tab\" *ngIf=\"index === 1\">Second tab content here</div>\n<div data-role=\"third-tab\" *ngIf=\"index === 2\">Third tab content here</div>\n</div>\n</div>"
      ]
    },
    "_bb-toolbar": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-toolbar--docs",
      "classes": [
        "bb-toolbar",
        "bb-toolbar__item",
        "bb-toolbar__section",
        "bb-toolbar__section--align-end"
      ],
      "examples": [
        "<div class=\"bb-toolbar\">\n<div class=\"bb-toolbar__section\">Some title</div>\n<div class=\"bb-toolbar__section bb-toolbar__section--align-end\">\n<button bbButton color=\"success\" circle=\"true\" class=\"bb-toolbar__item\">\n<bb-icon-ui name=\"check\"></bb-icon-ui>\n</button>\n<button bbButton color=\"danger\" circle=\"true\" class=\"bb-toolbar__item\">\n<bb-icon-ui name=\"times\"></bb-icon-ui>\n</button>\n</div>\n</div>",
        "<div class=\"bb-toolbar\">\n<div class=\"bb-toolbar__section\">Some title</div>\n<div class=\"bb-toolbar__section bb-toolbar__section--align-end\">\n<button bbButton color=\"success\" circle=\"true\" class=\"bb-toolbar__item\">\n<bb-icon-ui name=\"check\"></bb-icon-ui>\n</button>\n<button bbButton color=\"danger\" circle=\"true\" class=\"bb-toolbar__item\">\n<bb-icon-ui name=\"times\"></bb-icon-ui>\n</button>\n</div>\n</div>",
        "<div class=\"bb-toolbar\">\n<button bbButton color=\"success\" circle=\"true\" class=\"bb-toolbar__item\">\n<bb-icon-ui name=\"check\"></bb-icon-ui>\n</button>\n<button bbButton color=\"danger\" circle=\"true\" class=\"bb-toolbar__item\">\n<bb-icon-ui name=\"times\"></bb-icon-ui>\n</button>\n</div>"
      ]
    },
    "_bb-topbar": {
      "classes": [
        "bb-icon",
        "bb-topbar",
        "bb-topbar__branding-area",
        "bb-topbar__content-area",
        "bb-topbar__nav-expand-marker",
        "bb-topbar__nav-expand-marker--horizontal-nav",
        "bb-topbar__navigation-area"
      ],
      "examples": []
    },
    "_bb-vertical-tabs-container": {
      "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-structure-bb-vertical-tabs-container--docs",
      "classes": [
        "bb-vertical-tabs-container",
        "bb-vertical-tabs-container__button",
        "bb-vertical-tabs-container__main",
        "bb-vertical-tabs-container__sidebar"
      ],
      "examples": [
        "<div class=\"bb-vertical-tabs-container\">\n<div class=\"bb-vertical-tabs-container__sidebar\">\nMain Sidebar Example\n<div class=\"bb-vertical-tabs-container__button\">Button example.</div>\n</div>\n<div class=\"bb-vertical-tabs-container__main\">\nMain View Example\n</div>\n</div>",
        "<div class=\"bb-vertical-tabs-container\">\n<div class=\"bb-vertical-tabs-container__sidebar\">\nMain Sidebar Example\n<div class=\"bb-vertical-tabs-container__button\">Button example.</div>\n</div>\n<div class=\"bb-vertical-tabs-container__main\">\nMain View Example\n</div>\n</div>",
        "<div class=\"bb-vertical-tabs-container\">\n<div class=\"bb-vertical-tabs-container__sidebar\">\nMain Sidebar Example\n<div class=\"bb-vertical-tabs-container__button\">Button example.</div>\n</div>\n<div class=\"bb-vertical-tabs-container__main\">\nMain View Example\n</div>\n</div>",
        "<div class=\"bb-vertical-tabs-container\">\n<div class=\"bb-vertical-tabs-container__sidebar\">\nMain Sidebar Example\n<div class=\"bb-vertical-tabs-container__button\">Button example.</div>\n</div>\n<div class=\"bb-vertical-tabs-container__main\">\nMain View Example\n</div>\n</div>"
      ]
    }
  }
}