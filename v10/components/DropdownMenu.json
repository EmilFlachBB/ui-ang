{
  "module": "DropdownMenuModule",
  "selector": "bb-dropdown-menu-ui",
  "storybookUrl": "https://designsystem.backbase.com/storybook/?path=/docs/design-system-dropdown-menu--docs",
  "inputs": {
    "autoClose": {
      "type": "boolean | \"inside\" | \"outside\"",
      "description": "Whether the dropdown should be closed when clicking one of dropdown items or pressing ESC. Defaults to true.",
      "default": "true"
    },
    "btnCircle": {
      "type": "",
      "description": "The flag to indicate whether the dropdown button should be in a circular shape. Defaults to 'false'. This will only work when there's only an icon inside the button without a text.",
      "default": "false"
    },
    "btnColor": {
      "type": "",
      "description": "Color of the button. Defaults to primary.",
      "default": "'primary'"
    },
    "buttonSize": {
      "type": "\"sm\" | \"md\"",
      "description": "Predefined button sizes",
      "default": "'md'"
    },
    "container": {
      "type": "\"\" | \"body\"",
      "description": "Specifies which element the dropdown should be appended to.",
      "default": "''"
    },
    "disabled": {
      "type": "",
      "description": "Whether the component is mutable or clickable. Defaults to false.",
      "default": "false"
    },
    "dropDownButtonLabel": {
      "type": "",
      "description": "Dropdown menu (toggle) button aria label. Defaults to &quot;Toggle dropdown&quot;.",
      "default": "'Toggle dropdown'"
    },
    "dropDownMenuId": {
      "type": "string | undefined",
      "description": "ID for the dropdown menu"
    },
    "dropDownMenuRole": {
      "type": "string | undefined",
      "description": "The role of the dropdown menu defaults to menu",
      "default": "'menu'"
    },
    "fullWidth": {
      "type": "",
      "description": "If true it will stretch the button inside to 100% width.",
      "default": "false"
    },
    "icon": {
      "type": "string | undefined",
      "description": "Icon that is displayed in the button."
    },
    "iconColor": {
      "type": "string | undefined",
      "description": "The color of the icon to be displayed."
    },
    "iconSize": {
      "type": "",
      "description": "The size of the icon to be displayed. Defaults to md.",
      "default": "'md'"
    },
    "label": {
      "type": "",
      "description": "The label for the button dropdown. Defaults to an empty string.",
      "default": "''"
    },
    "optionLabelKey": {
      "type": "string | undefined",
      "description": "Key that contains the label of the option object. Mandatory when the type of option is object"
    },
    "options": {
      "type": "Array<string | object>",
      "description": "If the value is an object, please provide a optionLabelKey.",
      "default": "[]"
    },
    "position": {
      "type": "Placement | PlacementArray",
      "description": "The position of the dropdown, position will be picked in order of feasibility.",
      "default": "['bottom-end', 'bottom-start', 'top-end', 'top-start']"
    },
    "role": {
      "type": "",
      "description": "Customize the ARIA role for the HTML input/select/textarea element inside this component. This can be used to improve accessibility for components, for example by configuring [role]=&quot;'combobox'&quot; for a component that provides an autocomplete list. Values that are valid for the native HTML form elements are allowed.",
      "default": "'group'"
    }
  },
  "outputs": {
    "select": {
      "type": "EventEmitter",
      "description": "Event (Output) that emits the value of selected dropdown item."
    }
  },
  "methods": {
    "closeDropdownAndReturnFocus": {
      "returns": {
        "type": "void"
      }
    },
    "getOptionLabel": {
      "params": [
        {
          "name": "option",
          "type": "any"
        }
      ],
      "returns": {
        "type": "string"
      }
    },
    "onClick": {
      "params": [
        {
          "name": "event",
          "type": "Event"
        },
        {
          "name": "item",
          "type": "any"
        }
      ],
      "returns": {
        "type": "void"
      }
    },
    "onOpenChange": {
      "params": [
        {
          "name": "isOpen",
          "type": "boolean"
        }
      ],
      "returns": {
        "type": "void"
      }
    }
  }
}